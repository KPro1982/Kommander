<File version="3.2">
  <FileID>fb15099b-6511-42ea-a001-83430d32c4ab</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAHDaSURBVHhe7b0HdFzXea59r5NlJ06cxLlZzvpz
7811SSy5yEWyLcmyLIkUJUqU2HvvvffeexF7EXtvYEEhAILovVcSlegdIArRO95/f2cw5BAckiAA
EgOc913rIWdOL3v2fvY5Zwb/g2EYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYRnc5
/Tff+U7Qf/3sZ0Fz5swNWrZsRdCSJcsIIYQQ0mlYHrRixcqgr3t9GfS97343SLXtwvPzne98J7pn
z544fuYSAu+lIC69CDGpBYQQQgjpJMSmFSoK4O4Xinnz5uGHP/wXNDXzz87PfvrjoGOnLiA8uQAe
ESlwDb0PN0IIIYR0KqT9DojNQWBEAvr06fNiAZgza25Q4N0UeEWmwjM8iRBCCCGdFI+wRESoDv25
C1deLAArlq8MSsouhXt4MjwjCCGEkM6LVzvS2ZYpeCgJuJtWjCtWNi8WgOXLlgclZj1UM6bAO5IQ
QgjpnPjeTYXfvXRFWpvxVcgyfaJS1XLV+3aifbcz/dEyjYgQ3FMCcOnKjRcLwDIRgOwS7RaA7Cgh
hBDS2ZAG2yUwHhdsfHD2hhfO3fRuHWreszc8YesWrjWybsHxuH7HD9dv++C6UyuReRWOPhGG7QyI
wwXr9thOL9zyiNQkwHgcRAKi0x+2XACSlAB4R5m3FUIIIcTS8Y/J0BrE216R8AxNgIdquFuLd9h9
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
13FlsEMFQCo9OeHyoxeCfIjk+5Z6wrjPxgd8unpDIPsnvQPjOW9+PPSEnHP5oLPx79wY6zF50EzO
qx7rMSNyDFpTj8n00ikQeTAeR70i9YJ0DF5HvdChAiDITkoPSHZYz+ipFyj7KT+1ae446An55ole
znlXh/WYgbbUYzKfSIBcCTC3bL0gP1RmPB7Nj1F70+ECIMiOyo9S6JnXcbItCZ7zMt7372KwTLe9
HpP55XNhbtl64XXWCxYhAIQQQgh5vVAACCGEEB1CASCEEEJ0CAWAEEII0SEUAEIIIUSHUAAIIYQQ
HUIBIIQQQnQIBYAQQgjRIe0qAIVKAEpLDQslhBBCiOUi7XW7CUCSWpAsjBBCCCGWT3yWofFvswDE
KIsQkyCEEEKI5fOo/W6NAMQoATDaAyGEEEI6H9GKrJYKwLJly0MqG4HsMoWaiRBCCCGdE2n8KwHc
tHV4sQBMmDAx4oaNPS5fvakZAyGEEEI6Lzdt7bFx05YXCwDDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzDMAzD
MAzDMAzDMAzDMAzDMEwXyv/4H/8/nz8y73EO7DcAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabSelectMod)
	{
		#TODO: Enter Validation Code here for Step 1
		if($lblModName.Text)
		{
			return $true 
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabLaunch)
	{
		#TODO: Enter Validation Code here for Step 2

		
		
		if ($lblModName.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabAddons)
	{
		#TODO: Enter Validation Code here for Step 3

			return $true
		
	}
	elseif ($tabPage -eq $tabModSettings)
	{
		Initialize-ModSettingsTab
		if ($txtScriptsFolder.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabhelp)
	{
		
	
			return $true

		
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$frmWizard_Load={
	Update-NavButtons
	Update-Wizard

	$buttonCreateUIFromLayout.Enabled = $true
	
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	

	
	Update-NavButtons
}

function Initialize-ModSettingsTab
{
	[CmdletBinding()]
	param ()
	
	$layoutf = ""
	Assert-ModLayoutFolder -outpath ([ref]$layoutf)
	if ($layoutf)
	{
		$textLayoutFolder.Text = $layoutf
		Write-ModParam -key "LayoutFolder" -value $layoutf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		$textLayoutFolder.Text = $modfolder
	}
	
	$inputsf = ""
	Assert-ModInputsFolder -outpath ([ref]$inputsf)
	if ($inputsf)
	{
		$textInputsFolder.Text = $inputsf
		Write-ModParam -key "InputsFolder" -value $inputsf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		
	}
}


$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$textboxName_TextChanged={
	Update-NavButtons
}




$tabSelectMod_Click={
	
	
}

$btnLaunch_Click={
	
	Start-kServer
	Start-Sleep -Seconds 5
	Start-kMPGame
}

$btnKill_Click={
	
	Stop-kDayz
}

$buttonSelectAdditionalMods_Click={
	
	$FolderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog;
	$FolderBrowser.RootFolder = "Desktop";
	
	$Results = $FolderBrowser.ShowDialog();
	
	if ($Results -eq "OK")
	{
		$location = $FolderBrowser.SelectedPath.ToString();
		$txtAdditionalMods.Text = $location;
		Update-NavButtons
	}
}

$buttonBrowseFolder_Click={
	if($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
	}
}

$buttonBrowseFolder_Click2={
	if($folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowsermoderndialog1.SelectedPath
	}
}

$btnSettings_Click={
	
	Show-GlobalSettings_psf
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$listSelectAdditionalMods_SelectedIndexChanged={
	
	$selectedmod = $listSelectAdditionalMods.Items.Item($listSelectAdditionalMods.SelectedIndex)
	Update-ListBox $listAdditionalMods  $selectedmod -Append
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
	
}

function Initialize-Listbox
{
	[CmdletBinding()]
	param ()
	
	#TODO: Place script here
	$mods = Read-ModParam -key "AdditionalMPMods"
	
	if ($mods)
	{
		$modlist = $Mods.Split(';')
		
		foreach ($mod in $modlist)
		{
			Update-ListBox $listAdditionalMods  $mod -Append
		}
		
	}
	
}



function Convert-ListboxCollection
{
	[CmdletBinding()]
	[OutputType([string])]
	param ()
	
	$addonresult = ""
	#TODO: Place script here
	foreach ($mod in $listAdditionalMods.Items)
	{
		$addonresult = $addonresult +  $mod + ';'
		
	}
	if ($addonresult)
	{
		$addonresult = $addonresult.TrimEnd(';')
	}
	Else
	{
		$addonresult = ""
	}
	
	return $addonresult
}



$listAdditionalMods_Click={
	
	$selindex = $listAdditionalMods.SelectedIndex
	$item = $listAdditionalMods.Items.Item($selindex)
	$listAdditionalMods.Items.Remove($item)
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
}

$buttonLaunchWorkbench_Click={
	
	Start-kWorkbench
}

$btnLaunchServerGame_Click={
	
	Stop-kDayz
	Start-kServer
	Start-Sleep -Seconds 10
	Start-kMPGame
	
}

$listSelectMod_SelectedIndexChanged= {
	
	$modname = $listSelectMod.Items.Item($listSelectMod.SelectedIndex)
	$lblModName.Text = $modname
	$curmodfolder = Read-GlobalParam -key "ModSourceFolder"
	$curmodfolder = Add-Folder -Source $curmodfolder -Folder $modname
	Write-GlobalParam -key "CurrentModFolder" -value $curmodfolder
	Write-ModParam -key "ModName" -value $modname
	
	# initialize elements that require a modname
	Initialize-Listbox
	
	
	$modscriptsfolder = Read-ModParam -key "ScriptsFolder"
	if (-not $modscriptsfolder)
	{
		if (Assert-ModScriptsFolder -outpath ([ref]$modscriptsfolder))
		{
			$txtScriptsFolder.Text = $modscriptsfolder
			Write-ModParam -key "ScriptsFolder" -value $modscriptsfolder
		}
	}
	else
	{
		$txtScriptsFolder.Text = $modscriptsfolder
	}
	
	
	Update-NavButtons
}


$btnLinkMods_Click={
	
	Link-Scripts
	Link-Source
	Link-Packed
	Link-Workbench
}
<#
	.SYNOPSIS
		Set folder to folder define in settings
	
	.DESCRIPTION
		A detailed description of the Set-Folder function.
	
	.PARAMETER folder
		A description of the folder parameter.
	
	.EXAMPLE
				PS C:\> Set-Folder -folder 'Value1'
	
	.NOTES
		Additional information about the function.
#>



$buttonBuild_Click={
	
	
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	Reset-BuildSuccess
	Start-Build $buildmethod
	
}




$btnWorkbenchCommandline_Click = {
	$wbcommandline = Start-kWorkbench -Commandline
	Set-PopupMessage -Message $wbcommandline -Title "Workbench Commandline"
	Show-messageform_psf
}

$btnBuildCommandLine_Click = {
	
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	$buildm = ""
	$buildm = Start-Build -BuildMethod $buildmethod -Commandline
	Set-PopupMessage -Message "$buildm" -Title "Build Commandline"
	Show-messageform_psf
}


$btnServerCommandline_Click={
	
	$newline = "`n"
	$servergamecommandline = "SERVER`n" + (Start-kServer -CommandLine)
	$servergamecommandline += "`n`n"
	$servergamecommandline += "GAME`n" + (Start-kMPGame -CommandLine)
	Set-PopupMessage -Message $servergamecommandline -Title "Server + Build Commandlines"
	Show-messageform_psf
}

$buttonBuildSettings_Click={
	
	Show-BuildSettings_psf
}

$btnScriptsFolder_Click = {
	$folderbrowserdialog1.SelectedPath = Read-GlobalParam -key "CurrentModFolder"

	$testpath = ""

	if ($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		
		Write-ModParam -key "ScriptsFolder" -value $folderbrowserdialog1.SelectedPath
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
		Update-NavButtons
	}
	
	
}
$txtScriptsFolder_TextChanged = {
	
	Write-ModParam -key "ScriptsFolder" -value $txtScriptsFolder.Text

}


$lblModName_Click={
	
	
}



$buttonSetupWizard_Click={
	
	Show-SetupWizard_psf
}

$labelPboname_Click={
	
	
}

$textpboname_TextChanged={
	
	Write-ModParam -key "PboName" -value $textpboname.Text
	
}

$listAdditionalMods_SelectedIndexChanged={
	
	
}

$buttonHelpScriptsFolder_Click={
	
	Set-PopupMessage -Message "This is the subfolder that contains your mods scripts. It is generally just called scripts. Kommander will autofill this field if you use the standard setup" -Title "Help"
	Show-messageform_psf
}

$buttonlinkmods_Click={
	
	Set-PopupMessage -Message "If Kommander is running as administrator, this will link your mods. Otherwise you can use the provided linkall bat file" -Title "Help"
	Show-messageform_psf
}

$buttonkillall_Click={
	
	Set-PopupMessage -Message "Kill all running instances of dayz. " -Title "Help"
	Show-messageform_psf
}

$buttonhelpadditionmods_Click={
	
	Set-PopupMessage -Message "Select the mods that you want to load with your mod.  Click on left panel to select a mod. Click on right panel to deselect a mod`n'link to workbench' will add a symbolic link to dayz\addons." -Title "Help"
	Show-messageform_psf
}


$buttonMountP_Click={
	
	Mount-Pdrive
}

$buttonLinkToDayzAddons_Click={
	
	Link-Addons
}



$btnCreateNewMod_Click={
	
	Show-CreateMod_psf
	Update-NavButtons
	Update-Wizard
	
}

$tabSelectMod_Enter={
	
	Update-Wizard
}

function Update-Wizard
{
	[CmdletBinding()]
	param ()
	
	$workshop = Read-GlobalParam -key GameFolder
	$workshop += "\!Workshop"
	$modsource = Read-GlobalParam -key ModSourceFolder
	Update-ListBox $listSelectAdditionalMods (Get-ChildItem -Path "$workshop" -Directory)
	Update-ListBox $listSelectMod (Get-ChildItem -Path "$modsource" -Directory)

	$buildmethod = Read-GlobalParam -key "BuildMethod"
	if ($buildmethod -eq "Mikero")
	{
		$labelPboname.Visible = $true
		$textpboname.Visible = $true
	}
	Reset-BuildSuccess
	
}


$buttonBrowse_Click={
	
	Write-ScratchParam -key "DefaultLogFile" -value "None"
	Show-DisplayLogs_psf
	
}

$buttonBrowse2_Click={

	if($openfiledialog2.ShowDialog() -eq 'OK')
	{
		$textboxFile.Text = $openfiledialog2.FileName
	}
}

$formSplashScreen_Load = {
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
	
	$paramShowSplashScreen = @{
		Image = $pictureboxSplashScreenHidden.Image
		Title = 'Loading...'
		PassThru = $false
	}
	
	Show-SplashScreen @paramShowSplashScreen
	
	#TODO: Place initialization script here:
	
}
#Append the event to the form
#  $frmWizard.add_Load($formSplashScreen_Load)


#region Splash Screen Helper Function
function Show-SplashScreen
{
	<#
	.SYNOPSIS
		Displays a splash screen using the specified image.
	
	.PARAMETER Image
		Mandatory Image object that is displayed in the splash screen.
	
	.PARAMETER Title
		(Optional) Sets a title for the splash screen window. 
	
	.PARAMETER Timeout
		The amount of seconds before the splash screen is closed.
		Set to 0 to leave the splash screen open indefinitely.
		Default: 2
	
	.PARAMETER ImageLocation
		The file path or url to the image.

	.PARAMETER PassThru
		Returns the splash screen form control. Use to manually close the form.
	
	.PARAMETER Modal
		The splash screen will hold up the pipeline until it closes.

	.EXAMPLE
		PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
				#close the splash screen
				$splashScreen.Close()
	.OUTPUTS
		System.Windows.Forms.Form
	
	.NOTES
		Created by SAPIEN Technologies, Inc.

		The size of the splash screen is dependent on the image.
		The required assemblies to use this function outside of a WinForms script:
		Add-Type -AssemblyName System.Windows.Forms
		Add-Type -AssemblyName System.Drawing
#>
	[OutputType([System.Windows.Forms.Form])]
	param
	(
		[Parameter(ParameterSetName = 'Image',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNull()]
		[System.Drawing.Image]$Image,
		[Parameter(Mandatory = $false)]
		[string]$Title,
		[int]$Timeout = 1,
		[Parameter(ParameterSetName = 'ImageLocation',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNullOrEmpty()]
		[string]$ImageLocation,
		[switch]$PassThru,
		[switch]$Modal
	)
	
	#Create a splash screen form to display the image.
	$splashForm = New-Object System.Windows.Forms.Form
	
	#Create a picture box for the image
	$pict = New-Object System.Windows.Forms.PictureBox
	
	if ($Image)
	{
		$pict.Image = $Image;
	}
	else
	{
		$pict.Load($ImageLocation)
	}
	
	$pict.AutoSize = $true
	$pict.Dock = 'Fill'
	$splashForm.Controls.Add($pict)
	
	#Display a title if defined.
	if ($Title)
	{
		$splashForm.Text = $Title
		$splashForm.FormBorderStyle = 'FixedDialog'
	}
	else
	{
		$splashForm.FormBorderStyle = 'None'
	}
	
	#Set a timer
	if ($Timeout -gt 0)
	{
		$timer = New-Object System.Windows.Forms.Timer
		$timer.Interval = $Timeout * 1000
		$timer.Tag = $splashForm
		$timer.add_Tick({
				$this.Tag.Close();
				$this.Stop()
			})
		$timer.Start()
	}
	
	#Show the form
	$splashForm.AutoSize = $true
	$splashForm.AutoSizeMode = 'GrowAndShrink'
	$splashForm.ControlBox = $false
	$splashForm.StartPosition = 'CenterScreen'
	$splashForm.TopMost = $true
	
	if ($Modal) { $splashForm.ShowDialog() }
	else { $splashForm.Show() }
	
	if ($PassThru)
	{
		return $splashForm
	}
}
#endregion

$frmWizard_MouseMove=[System.Windows.Forms.MouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	

}

$frmWizard_Enter={
	

}

$frmWizard_MouseEnter={
	

}

$listSelectMod_MouseEnter={
	

}



$buttonHelpCleanUpLinks_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "This tool removes all kinks in P:\ and the Dayz game folder"
	Show-messageform_psf
}

$buttonCleanUpLinks_Click={
	#TODO: Place custom script here
	Remove-AllLinks
}

$buttonOpenBuildLog_Click = {
	$logpath = Get-BuildLogPath
	Write-ScratchParam -key "DefaultLogFile" -value $logpath
	Show-DisplayLogs_psf
	
}

$buttonLaunchLogs_Click={
	#TODO: Place custom script here
	Write-ScratchParam -key "DefaultLogFile" -value "ServerLog"
	Show-DisplayLogs_psf
}

$buttonHotLoading_Click={
	
	Set-PopupMessage -Message "If hotloading does not work. Try Tools->Clean Links.  Launch->Link All"
	Show-messageform_psf
	
}

$buttonConvertExistingMod_Click={
	
	# Copy Kommander folder
	$templatef = Read-GlobalParam -key "TemplateFolder"
	$templateKommanderf = Add-Folder -Source $templatef -Folder "Kommander\*"
	
	$modfolder = Read-GlobalParam -key "CurrentModFolder"
	$kommanderf = Add-Folder -Source $modfolder -Folder "Kommander"
	
	if (-not (Test-Path -Path $kommanderf))
	{
		New-Item -Path $kommanderf -ItemType "Directory"			
	}
	Copy-Item -Path $templateKommanderf -Destination $kommanderf -Recurse
	
	# Edit dayz.proj to refer to modname instead of templatemod
	$ModName = Read-ModParam -key "ModName"
	Edit-TemplateTokens -Source "TemplateMod" -Replace $ModName -Folder $kommanderf -File "dayz.gproj"
	
	# Copy batch files from template to modfolder
	$templatef = Add-Folder -Source $templatef -Folder "*.bat"
	
	Copy-Item -Path $templatef -Destination $modfolder
	Edit-BatchFiles -Modfolder $modfolder -Modname $ModName
	
	
}

$buttonHelpFolderSettings_Click={
	Set-PopupMessage -Message "Convert Mod `n (1) Creates Kommander folder; `n (2) Copies and customizes batch folders `n (3) Copies integrated tools `n `nUsage: Copy your modfolder into the modsource folder that you slected in folder settings. Click on it in left panel. Click on Convert Mod." -Title "Help"
	Show-messageform_psf
	
}

$buttonCreateUIFromLayout_Click={
	
	Show-CreateUI_psf
	
}

$buttonLayoutFolder_Click3={
	if($folderbrowserdialog2.ShowDialog() -eq 'OK')
	{
		$textLayoutFolder.Text = $folderbrowserdialog2.SelectedPath
		Write-ModParam -key "LayoutFolder" -value $folderbrowserdialog2.SelectedPath
	}
}

$buttonInputsFolder_Click3 = {
	$folderbrowserdialog3.SelectedPath = Read-GlobalParam -key "CurrentModFolder"
	if($folderbrowserdialog3.ShowDialog() -eq 'OK')
	{
		$textInputsFolder.Text = $folderbrowserdialog3.SelectedPath
	}
	Write-ModParam -key "InputsFolder" -value $textInputsFolder.Text
}

$buttonHelpCreateUI_Click={
	Set-PopupMessage -Message "This tool will create the code necessary to implement a layout. The code is contained in separate subfolders named UIHelper. `n`nThe tool will also create the necessary code to show the dialog.  However, at present, the tool cannot inject itself into an existing input.xml.  If you don't already have an inputs.xml, then it shouldn't be a problem. The  tool will create one with the O key as default key to bring up your dialog.  But if the tool finds an existing inputs.xml, it will copy the required code in a uiinputs.xml file. Its up to you to integrate the two files. Automating this is on my todo list. `n `n If the key doesn't bring up the dialog, also check to make sure that the config.cpp contains the appropriate reference to the inputs.xml"
	Show-messageform_psf
	
}






$buttonCopyMissionAndConfig_Click={
	$kommanderf = Get-ScriptDirectory
	$serveraddins = Add-Folder -Source $kommanderf -Folder "Dayz_Folder_Adds/*"
	$gamef = Read-GlobalParam -key "GameFolder"
	Copy-Item -Path $serveraddins -Destination $gamef
}

$buttonHelpCopyMission_Click={
	Set-PopupMessage -Message "In order to run the dayZdiag_x64.exe as the server in the Dayz folder, you must have a copy of the mission and serverDZ.cfg files in the game folder.  If you do not have them, this tool will copy them for you."
	Show-messageform_psf
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">11</Line>
    <Line Disabled="True">176</Line>
    <Line Disabled="True">500</Line>
    <Line Disabled="False">540</Line>
    <Line Disabled="False">614</Line>
    <Line Disabled="True">848</Line>
    <Line Disabled="True">855</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>