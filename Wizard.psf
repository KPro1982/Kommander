<File version="3.2">
  <FileID>fb15099b-6511-42ea-a001-83430d32c4ab</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFv+SURBVHhe7d1ncFRnvi76U3tXnVN1Pty6p27V
/XCrbtXeZ+45s2fPeGZsz3jG9nicsA1O2OSMySByzsEkY4IxOeckooQkJIQyygHlnHPOObT03Pe/
Wg0t0RghhJF4n2fv39Bhdffq1avX+6zV3fJ/YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiGYRiG
YRiGYRiG0S5n//Vf/iXs//vNb8IWLlwUtnr12rCVK1cTERHRgLEmbO3adWFfffF52H/7r/81TI3t
4pfzL//yLwmDBw/GyXNXEBqfheTcSiRmlxMREdEAkZRToZTDJ+gBFi9ejP/xP/5PdA7zT85v/ue/
hZ04cwlRmeXwjc6C14M0eBMREdGAIuN3SFIRQqNTMXTo0KcXgIXzF4WFxmXhfkw2/KIyiIiIaIDy
jUxHtNqhv3Dp6tMLwNo168IyCmvhE5UJv2giIqKB634fGmj3KXxVCYjLqcLV67efXgDWrF4Tll5Q
rW6YBf8YIiKigSkwLhtB8blKznMLVOQ+A2Kz1f2q832kb+cz9+F9WkghiFcF4MrVW08vAKulABTW
GB8ByBMlIiIaaGTA9gxNwaXbATh/6z4uOPj3jrrt+Vt+cPKOMgZZ7/AU3LwXhJt3A3DTvZfktopb
QLR5PkOSccmxL+bzPlx8Y4wSYFkOUgIScqt7XgAyVAHwj7XdVoiIiPq74MQ8Y0C8ez8Gfg9S4asG
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
FtYrAxER6UOrAmAhHwHIZ+A64+BPRKQ3LQsAERGR7lgAiIiINMQCQEREpCEWACIiIg2xABAREWmI
BYCIiEhDLABEREQaYgEgIiLSEAsAERGRhlgAiIiINMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhD
LABEREQaYgEgIiLSEAsAERGRhlgAiIiINMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhDLABEREQa
YgEgIiLSEAsAERGRhlgAiIiINMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhDLABEREQaYgEgIiLS
EAsAERGRhlgAiIiINMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhDLABEREQaYgEgIiLSEAsAERGR
hlgAiIiINMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhDLABEREQaYgEgIiLSEAsAERGRhlgAiIiI
NMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhDLABEREQaYgEgIiLSEAsAERGRhlgAiIiINMQCQERE
pCEWACIiIg2xABAREWmIBYCIiEhDLABEREQaYgEgIiLSEAsAERGRhlgAiIiINMQCQEREpCEWACIi
Ig2xABAREWmIBYCIiEhDLABEREQaYgEgIiLSEAsAERGRhlgAiIiINMQCQEREpCEWACIiIg2xABAR
EWmIBYCIiEhDLABEREQaYgEgIiLSEAsAERGRhlgAiIiINMQCQEREpCEWACIiIg2xABAREWmIBYCI
iEhDLABEREQaYgEgIiLSEAsAERGRhlgAiIiINMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhDLABE
REQaYgEgIiLSEAsAERGRhlgAiIiINMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhDLABEREQaYgEg
IiLS0CtdAJqamtDW1maUACIiInrklS0ApaWlxum6ujrjCRIREdEjMk7Kv93H0L7w0gqAqKqqQkVF
BREREdkg46TsJNsaQ5/XSy0AchSAiIiInszW+NkXXmoBICIiopeDBYCIiEhDLABEREQaYgEgIiLS
EAsAERGRhlgAiIiINMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhDLABEREQaYgEgIiLSEAsAERGR
hlgAiIiINMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhDLABEREQaYgEgIiLSEAsAERGRhlgAiIiI
NMQCQEREpCEWACIiIg2xABAREWmIBYCIiEhDLABEREQaYgEgIiLSEAsAERGRhlgAiIiINMQCQERE
pCEWACIiIg2xABAREWmIBYCIiEhDLABEREQaYgEgIiLSEAsAERGRhvpFAaipqUFtba3WZBnYWjav
Kr7mZrq97q8yrtPPvz5zGZr9WtuFl14AqqqqkJ+fj6ysLGRnZxv/6kiWga3l8yqSlbuoqMh43jq/
5rm5uaisrPzV3uz04sh2LC8vz+brrJPn2Y7J+6CkpMTYJui8XcjJyUF5efmvsl14qQVAnqBsBGUw
aGpqMjQ2NmpHnrcsA1kWr/pgIM/P8lwbGhq0fs3lTS5veBk8bC0rGhi6b8dsvd46eJ7tmExfWlpq
DPx1dXVabxdkech24dcoAS+tAMgTkycoL3h7ezskHR0dWpLIMpBl8Ws1v5dFnpus3M3NzcbztrU8
dGBJQUGBsdF8lV/zV5n1dszyunZ/rXUhsWzHKioqnmmdlsPecju5jcTW/etCUlZWZhxRkuVia3n1
lZdeAKQtSmTF0ZlElsWrXgCEFIDW1lZjZbe1LHQhkUOehYWFL/yNTi8Gt2NdSXqzHbMUgPr6euM+
bN23LiRyVFCWIwtAP2JpZy9i4JKwAOhFUlxczAIwgA30AmCJret6Q/KqFwBLbF3XFyTy3SAWgBfA
VmxNZ4t8RpOeno62tjab1z8PCQtA71kipy1FTdJ9ul/yaxcSCQvAwPYit2PW67HkRayflsP1tq7r
DUl/KwC2Yrn8l5bpk66XLzrK+7b75X1FwgLQByyxnJcX09fXFz///DN27dqF3bt3Gyt/T95YMo18
VvvRRx8hKiqqy/32BQkLQO/I/Vy8eBH37983lqNsROQ1Pnv2rHFdTx7Hkp5e3hckLAAD24vajlly
9epVY1t18+ZN47ytaXtLsmXLFixatMg4bWuaZyXpLwVA3veys3by5En89NNPxnLcuXMnIiMjjevu
3r1r7NTZ2j5YrpcvKltfLzlx4gQmTJhgnLa+TV+RsAA8B0tkoJFBwfICSvz8/PDxxx/D3d0dLi4u
WLZsGUwmk3GddbrflyVbt26Fj49P5zlzLNM+DwkLQO9ILl++jH/91381NiLyppc36KZNm4zrepLM
zExjQ2GJ3K/MX3x8PEJDQzsv7du9MAkLwMD2orZj8iXZS5cu4eDBg8Z2au3atUbJ7R6Ztnust3fW
sXWZrN8rV640Tlse+3lI+lMBkH8XL16MOXPmGNv8ffv2GTsGkj179hjz2D1yO4mUBhmIu0d2BBcu
XNh5rm+3CULCAtBLEtmoyt69NNvTp093eUPIHr+dnZ3x+HI04Pjx48Z18tOTvXv3YvXq1cYG2bIS
JCQkYOnSpThy5IhxfuPGjXjw4AFu376NuXPnGr/Z7IsVQMIC0DuS5ORkvPvuu8abWy47evQo7ty5
Y1wnj3Po0CHjtZVv18relLyBo6OjjY3D+fPnceDAAbz++utYtWoVgoKCjNsIT09PrFixwtgAZ2Rk
PLy/7vPQGxIWgIHtRWzHJFJIZ8+ebZyWyLoXERFhrCeyFyvrqfxsTtZFV1dX4zLZM5X1XwqwZf2V
7da8efOM+5N4e3sbt5XBUB5LtmVyXtJ9PnpD0l8KgJDY29sb73+ZH0dHR+MyeY/Lzpzs/Mm/cqRF
dhhSU1ON5SalX87LfcgYIMtItvdpaWnGc5PT+/fvx40bN4z76P64z0PCAtALkoCAAMyaNQvOzs7G
oC6xvl6+XfnBBx8YA8D8+fONeZDICiFNW1745cuXG5fFxsYah408PDyM5iiRAiCXnzt3zlgp5BCR
9Tz0loQFoHckgYGBxiB+7do1400pRwQcHByMx5EyIKdlwJcyJx/hfPfdd7h37x6mTJlivPZyVGfq
1KmIiYkxNqzW9y2RDaWUBdkLkzd8X8y7hAVgYHtR2zF5j1j2Mi2XSeQIppubm/GvZeCWgfO3v/0t
bt26he3btxuHrqUEyHrv5ORkDH5xcXHw9/c3jijIgCY7R3JZYmLiK18AZHD/9NNPjeX53nvvGZfJ
/H377bfGaSlP77//vrHtl/e4bDNkR3H48OFGcZKjB7LMpEzJtkPm8e233zZeh/Xr1xvbHomtx+8N
CQtAL0jkRZQ9/OvXrxv3L7G+Xja28iJLkpKSsGHDBuM6WdDyubEcDhs3bpxxvZyWxmwdKQBjx47F
jz/+2HnJy33jDEQvogAEBwcbTV7eOLLhk3InezlyKPXNN980XmcZ/GXdkMiRG3kdZcCXyBtb9vIt
sb5vmU/ZeC5ZssTYmLAAkMWL2o7Jl40t66pE1g8hg48c3ZSPLqXESuQyy+f4UoJl0JdppdxaR9Z3
GcxkwJfBTb7MJttAOTImsTUvz0rS3wqAHBWxfHwiH3lYLl+wYIHxr4wVFy5cME7LURfZNklkmcpz
kEIly0w+kmlpaTF+ny/bAolsc7y8vIzT3R+7tyQsAL0kkYUnh2fkBZTBwLKxlsihtEmTJhkLVh7f
8iaRliyfAZ85c8b4op+sBHL4V0qBDFiWQ2Zyn/IGkxVKVqy+OvwjYQHoHYm8VjLoS2RAVauo8ZrJ
40hLl6M78trLaycbvs2bNxtHCuQwn7R8OaojhU+avpQJmTchb355s3///ffGH+2R9OV8swAMbC9i
OybrlxyplHVUdmjkMU6dOmWUT/lIU7Y9sic/ZMgQY/sjf0ti/PjxxuAkX+qT6+W0DE7yhTcpr1J4
5fayPZP3gXwMJrcLCQkxSsHL3o69yAIgY4F8vGuJLF/ZMZBlJv8eO3bMWC6Wy2Qe5AjKxIkTjW2D
bDNkma1Zs8bY65fvAEyePNlYxlLE5GizxNbj94aEBeA5WCIbbHkDWV8unwvLiycbeznUL4fAJPJx
gezdy4oiK4EcFpbIwDJ9+nSjOcrnx6NGjcLhw4eNQ8xffPGFsYL0xYAgYQHoHYm8JlLmZNlJpMjJ
IX+JfEwjG0Y5BCh7+lLchg4danymOmzYMONojryZ5bsAUvCs18mUlJSH9yPpq3kWEhaAge1Fbccs
9yXrpmyr5AtpMijJ4CRHqmQ7JUcq5TNrOUop67Fsq2bMmGEMShLZpsnevRzilkIhkRIg7wPZ2ZHr
pUiMGDHCGHxf5nbsRRQAeT4SOfJnOepriRQjWWYyHsjylWUiZV8uCwsLM8YFOUoiOwnyeb9cb/ke
wZUrV4zr5GNDOaoi2xZ5rL7cnrEA9AFL5LS8OHLoRlYGOZwje3VCTsvKIZ8dW6f7fUi6n5dYpnte
kt68cQaiviwAch/yZpaNnryR5bWU11X2+uUyKXnyJpLI9Nbpft46lvu3xHK+L0lYAAa2F7Edk3Va
Bh758qmQ9VnWY2H5Epslluktpy2xPm2Jrekskcv6gqQ/FQDZe7csR9k2WMjhfMvjWGI5bbm9dazP
P2l59xUJC8ALIP+hBfkWZ3fSouWwjrywFta3sz5vPU336Z6HhAWgd2R5dX89rc/L3r3169WT078G
CQvAwPaitmNyeL77eizn5XLLemq9rlpO27rc+nz3y2xd/zwk/aUACDlqa738LOR9Z3nu3Vlu+6Tr
nnS6r0hYAF4AeaF+KbZu82uRsAD0ztPS12/QviJhARjYXtR27Jdia/r+QtKfCsAvxdb0/YGEBUAz
EhYAvUhYAAY2bse6kvSnAjAQSVgANCPRqQBY/liJrWWhC4kUAPmyKgvAwMTtWFeS5ykA8oVdia37
1oVEvrQpv9x4ZQuAkCcp36KXv8ese+T7CTIwSvOztaxeFbJRkDe65VvJOkd+eiVvcvnDQ6966XuV
yXtWtmPyHtY9vd2OyUAnX9KW7zgw5l+w/RpHBl9qAZCNnrzg8kcvhLyJ5PeWOrE8Z8sXfF71gUCe
n+wdWF7z7stDJ/Kayxudg//AZtmOyRfN5HXVcTtmIcugN9sxmV52CqQ8WJajrmS7IDsGv8Z24aUW
ACFPUvaA5AnrTKe9QHme8qc2bS0HncgvT3R5zV913I6ZPc92TG4nJUCOBNi6b13IHyqzLI/uy6iv
vfQCIOSJyh+l0Nmv8WL3J3zN6/i5/yuG6/Tzb8fk9vK+sHXfuvg1twv9ogAQERHRr4sFgIiISEMs
AERERBpiASAiItIQCwAREZGGWACIiIg0xAJARESkIRYAIiIiDfVpAahQBaC21nynRERE1H/JeN1n
BSBD3ZHcGREREfV/KQXmwf+5C0CiahHSJIiIiKj/ezh+96YAJKoCYGkPRERENPAkKAU9LQCrV6+J
aOwACusUdSMiIiIamGTwbwTg4OT69AIwbdr06Fu378D+moPRGIiIiGjgcnC6g63bfnh6AWAYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhnmF8l/+y/8PEy6z4L/f/6QAAAAASUVORK5C
YII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabSelectMod)
	{
		#TODO: Enter Validation Code here for Step 1
		if($lblModName.Text)
		{
			return $true 
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabLaunch)
	{
		#TODO: Enter Validation Code here for Step 2

		
		
		if ($lblModName.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabAddons)
	{
		#TODO: Enter Validation Code here for Step 3

			return $true
		
	}
	elseif ($tabPage -eq $tabModSettings)
	{
		Initialize-ModSettingsTab
		if ($txtScriptsFolder.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabhelp)
	{
		
	
			return $true

		
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$frmWizard_Load={
	Update-NavButtons
	Update-Wizard

	$buttonCreateUIFromLayout.Enabled = $false	
	
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	

	
	Update-NavButtons
}

function Initialize-ModSettingsTab
{
	[CmdletBinding()]
	param ()
	
	$layoutf = ""
	Assert-ModLayoutFolder -outpath ([ref]$layoutf)
	if ($layoutf)
	{
		$textLayoutFolder.Text = $layoutf
		Write-ModParam -key "LayoutFolder" -value $layoutf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		$textLayoutFolder.Text = $modfolder
	}
	
	$inputsf = ""
	Assert-ModInputsFolder -outpath ([ref]$inputsf)
	if ($inputsf)
	{
		$textInputsFolder.Text = $inputsf
		Write-ModParam -key "InputsFolder" -value $inputsf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		$textLayoutFolder.Text = $modfolder
	}
}


$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$textboxName_TextChanged={
	Update-NavButtons
}




$tabSelectMod_Click={
	
	
}

$btnLaunch_Click={
	
	Start-kServer
	Start-Sleep -Seconds 5
	Start-kMPGame
}

$btnKill_Click={
	
	Stop-kDayz
}

$buttonSelectAdditionalMods_Click={
	
	$FolderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog;
	$FolderBrowser.RootFolder = "Desktop";
	
	$Results = $FolderBrowser.ShowDialog();
	
	if ($Results -eq "OK")
	{
		$location = $FolderBrowser.SelectedPath.ToString();
		$txtAdditionalMods.Text = $location;
		Update-NavButtons
	}
}

$buttonBrowseFolder_Click={
	if($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
	}
}

$buttonBrowseFolder_Click2={
	if($folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowsermoderndialog1.SelectedPath
	}
}

$btnSettings_Click={
	
	Show-GlobalSettings_psf
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$listSelectAdditionalMods_SelectedIndexChanged={
	
	$selectedmod = $listSelectAdditionalMods.Items.Item($listSelectAdditionalMods.SelectedIndex)
	Update-ListBox $listAdditionalMods  $selectedmod -Append
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
	
}

function Initialize-Listbox
{
	[CmdletBinding()]
	param ()
	
	#TODO: Place script here
	$mods = Read-ModParam -key "AdditionalMPMods"
	
	if ($mods)
	{
		$modlist = $Mods.Split(';')
		
		foreach ($mod in $modlist)
		{
			Update-ListBox $listAdditionalMods  $mod -Append
		}
		
	}
	
}



function Convert-ListboxCollection
{
	[CmdletBinding()]
	[OutputType([string])]
	param ()
	
	$addonresult = ""
	#TODO: Place script here
	foreach ($mod in $listAdditionalMods.Items)
	{
		$addonresult = $addonresult +  $mod + ';'
		
	}
	if ($addonresult)
	{
		$addonresult = $addonresult.TrimEnd(';')
	}
	Else
	{
		$addonresult = ""
	}
	
	return $addonresult
}



$listAdditionalMods_Click={
	
	$selindex = $listAdditionalMods.SelectedIndex
	$item = $listAdditionalMods.Items.Item($selindex)
	$listAdditionalMods.Items.Remove($item)
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
}

$buttonLaunchWorkbench_Click={
	
	Start-kWorkbench
}

$btnLaunchServerGame_Click={
	
	Stop-kDayz
	Start-kServer
	Start-Sleep -Seconds 10
	Start-kMPGame
	
}

$listSelectMod_SelectedIndexChanged= {
	
	$modname = $listSelectMod.Items.Item($listSelectMod.SelectedIndex)
	$lblModName.Text = $modname
	$curmodfolder = Read-GlobalParam -key "ModSourceFolder"
	$curmodfolder = Add-Folder -Source $curmodfolder -Folder $modname
	Write-GlobalParam -key "CurrentModFolder" -value $curmodfolder
	Write-ModParam -key "ModName" -value $modname
	
	# initialize elements that require a modname
	Initialize-Listbox
	
	
	$modscriptsfolder = Read-ModParam -key "ScriptsFolder"
	if (-not $modscriptsfolder)
	{
		if (Assert-ModScriptsFolder -outpath ([ref]$modscriptsfolder))
		{
			$txtScriptsFolder.Text = $modscriptsfolder
			Write-ModParam -key "ScriptsFolder" -value $modscriptsfolder
		}
	}
	else
	{
		$txtScriptsFolder.Text = $modscriptsfolder
	}
	
	
	Update-NavButtons
}


$btnLinkMods_Click={
	
	Link-Scripts
	Link-Source
	Link-Packed
	Link-Workbench
}
<#
	.SYNOPSIS
		Set folder to folder define in settings
	
	.DESCRIPTION
		A detailed description of the Set-Folder function.
	
	.PARAMETER folder
		A description of the folder parameter.
	
	.EXAMPLE
				PS C:\> Set-Folder -folder 'Value1'
	
	.NOTES
		Additional information about the function.
#>



$buttonBuild_Click={
	
	
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	Reset-BuildSuccess
	Start-Build $buildmethod
	
}




$btnWorkbenchCommandline_Click = {
	$wbcommandline = Start-kWorkbench -Commandline
	Set-PopupMessage -Message $wbcommandline -Title "Workbench Commandline"
	Show-messageform_psf
}

$btnBuildCommandLine_Click = {
	
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	$buildm = ""
	$buildm = Start-Build -BuildMethod $buildmethod -Commandline
	Set-PopupMessage -Message "$buildm" -Title "Build Commandline"
	Show-messageform_psf
}


$btnServerCommandline_Click={
	
	$newline = "`n"
	$servergamecommandline = "SERVER`n" + (Start-kServer -CommandLine)
	$servergamecommandline += "`n`n"
	$servergamecommandline += "GAME`n" + (Start-kMPGame -CommandLine)
	Set-PopupMessage -Message $servergamecommandline -Title "Server + Build Commandlines"
	Show-messageform_psf
}

$buttonBuildSettings_Click={
	
	Show-BuildSettings_psf
}

$btnScriptsFolder_Click = {
	$folderbrowserdialog1.SelectedPath = Read-GlobalParam -key "CurrentModFolder"

	$testpath = ""

	if ($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		
		Write-ModParam -key "ScriptsFolder" -value $folderbrowserdialog1.SelectedPath
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
		Update-NavButtons
	}
	
	
}
$txtScriptsFolder_TextChanged = {
	
	Write-ModParam -key "ScriptsFolder" -value $txtScriptsFolder.Text

}


$lblModName_Click={
	
	
}



$buttonSetupWizard_Click={
	
	Show-SetupWizard_psf
}

$labelPboname_Click={
	
	
}

$textpboname_TextChanged={
	
	Write-ModParam -key "PboName" -value $textpboname.Text
	
}

$listAdditionalMods_SelectedIndexChanged={
	
	
}

$buttonHelpScriptsFolder_Click={
	
	Set-PopupMessage -Message "This is the subfolder that contains your mods scripts. It is generally just called scripts. Kommander will autofill this field if you use the standard setup" -Title "Help"
	Show-messageform_psf
}

$buttonlinkmods_Click={
	
	Set-PopupMessage -Message "If Kommander is running as administrator, this will link your mods. Otherwise you can use the provided linkall bat file" -Title "Help"
	Show-messageform_psf
}

$buttonkillall_Click={
	
	Set-PopupMessage -Message "Kill all running instances of dayz. " -Title "Help"
	Show-messageform_psf
}

$buttonhelpadditionmods_Click={
	
	Set-PopupMessage -Message "Select the mods that you want to load with your mod.  Click on left panel to select a mod. Click on right panel to deselect a mod`n'link to workbench' will add a symbolic link to dayz\addons." -Title "Help"
	Show-messageform_psf
}


$buttonMountP_Click={
	
	Mount-Pdrive
}

$buttonLinkToDayzAddons_Click={
	
	Link-Addons
}



$btnCreateNewMod_Click={
	
	Show-CreateMod_psf
	Update-NavButtons
	Update-Wizard
	
}

$tabSelectMod_Enter={
	
	Update-Wizard
}

function Update-Wizard
{
	[CmdletBinding()]
	param ()
	
	$workshop = Read-GlobalParam -key GameFolder
	$workshop += "\!Workshop"
	$modsource = Read-GlobalParam -key ModSourceFolder
	Update-ListBox $listSelectAdditionalMods (Get-ChildItem -Path "$workshop" -Directory)
	Update-ListBox $listSelectMod (Get-ChildItem -Path "$modsource" -Directory)

	$buildmethod = Read-GlobalParam -key "BuildMethod"
	if ($buildmethod -eq "Mikero")
	{
		$labelPboname.Visible = $true
		$textpboname.Visible = $true
	}
	Reset-BuildSuccess
	
}


$buttonBrowse_Click={
	
	Write-ScratchParam -key "DefaultLogFile" -value "None"
	Show-DisplayLogs_psf
	
}

$buttonBrowse2_Click={

	if($openfiledialog2.ShowDialog() -eq 'OK')
	{
		$textboxFile.Text = $openfiledialog2.FileName
	}
}

$formSplashScreen_Load = {
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
	
	$paramShowSplashScreen = @{
		Image = $pictureboxSplashScreenHidden.Image
		Title = 'Loading...'
		PassThru = $false
	}
	
	Show-SplashScreen @paramShowSplashScreen
	
	#TODO: Place initialization script here:
	
}
#Append the event to the form
#  $frmWizard.add_Load($formSplashScreen_Load)


#region Splash Screen Helper Function
function Show-SplashScreen
{
	<#
	.SYNOPSIS
		Displays a splash screen using the specified image.
	
	.PARAMETER Image
		Mandatory Image object that is displayed in the splash screen.
	
	.PARAMETER Title
		(Optional) Sets a title for the splash screen window. 
	
	.PARAMETER Timeout
		The amount of seconds before the splash screen is closed.
		Set to 0 to leave the splash screen open indefinitely.
		Default: 2
	
	.PARAMETER ImageLocation
		The file path or url to the image.

	.PARAMETER PassThru
		Returns the splash screen form control. Use to manually close the form.
	
	.PARAMETER Modal
		The splash screen will hold up the pipeline until it closes.

	.EXAMPLE
		PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
				#close the splash screen
				$splashScreen.Close()
	.OUTPUTS
		System.Windows.Forms.Form
	
	.NOTES
		Created by SAPIEN Technologies, Inc.

		The size of the splash screen is dependent on the image.
		The required assemblies to use this function outside of a WinForms script:
		Add-Type -AssemblyName System.Windows.Forms
		Add-Type -AssemblyName System.Drawing
#>
	[OutputType([System.Windows.Forms.Form])]
	param
	(
		[Parameter(ParameterSetName = 'Image',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNull()]
		[System.Drawing.Image]$Image,
		[Parameter(Mandatory = $false)]
		[string]$Title,
		[int]$Timeout = 1,
		[Parameter(ParameterSetName = 'ImageLocation',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNullOrEmpty()]
		[string]$ImageLocation,
		[switch]$PassThru,
		[switch]$Modal
	)
	
	#Create a splash screen form to display the image.
	$splashForm = New-Object System.Windows.Forms.Form
	
	#Create a picture box for the image
	$pict = New-Object System.Windows.Forms.PictureBox
	
	if ($Image)
	{
		$pict.Image = $Image;
	}
	else
	{
		$pict.Load($ImageLocation)
	}
	
	$pict.AutoSize = $true
	$pict.Dock = 'Fill'
	$splashForm.Controls.Add($pict)
	
	#Display a title if defined.
	if ($Title)
	{
		$splashForm.Text = $Title
		$splashForm.FormBorderStyle = 'FixedDialog'
	}
	else
	{
		$splashForm.FormBorderStyle = 'None'
	}
	
	#Set a timer
	if ($Timeout -gt 0)
	{
		$timer = New-Object System.Windows.Forms.Timer
		$timer.Interval = $Timeout * 1000
		$timer.Tag = $splashForm
		$timer.add_Tick({
				$this.Tag.Close();
				$this.Stop()
			})
		$timer.Start()
	}
	
	#Show the form
	$splashForm.AutoSize = $true
	$splashForm.AutoSizeMode = 'GrowAndShrink'
	$splashForm.ControlBox = $false
	$splashForm.StartPosition = 'CenterScreen'
	$splashForm.TopMost = $true
	
	if ($Modal) { $splashForm.ShowDialog() }
	else { $splashForm.Show() }
	
	if ($PassThru)
	{
		return $splashForm
	}
}
#endregion

$frmWizard_MouseMove=[System.Windows.Forms.MouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	

}

$frmWizard_Enter={
	

}

$frmWizard_MouseEnter={
	

}

$listSelectMod_MouseEnter={
	

}



$buttonHelpCleanUpLinks_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "This tool removes all kinks in P:\ and the Dayz game folder"
	Show-messageform_psf
}

$buttonCleanUpLinks_Click={
	#TODO: Place custom script here
	Remove-AllLinks
}

$buttonOpenBuildLog_Click={
	Write-ScratchParam -key "DefaultLogFile" -value "Buildoutput.txt"
	Show-DisplayLogs_psf
	
}

$buttonLaunchLogs_Click={
	#TODO: Place custom script here
	Write-ScratchParam -key "DefaultLogFile" -value "ServerLog"
	Show-DisplayLogs_psf
}

$buttonHotLoading_Click={
	
	Set-PopupMessage -Message "If hotloading does not work. Try Tools->Clean Links.  Launch->Link All"
	Show-messageform_psf
	
}

$buttonConvertExistingMod_Click={
	
	# Copy Kommander folder
	$templatef = Read-GlobalParam -key "TemplateFolder"
	$templateKommanderf = Add-Folder -Source $templatef -Folder "Kommander\*"
	
	$modfolder = Read-GlobalParam -key "CurrentModFolder"
	$kommanderf = Add-Folder -Source $modfolder -Folder "Kommander"
	
	if (-not (Test-Path -Path $kommanderf))
	{
		New-Item -Path $kommanderf -ItemType "Directory"			
	}
	Copy-Item -Path $templateKommanderf -Destination $kommanderf -Recurse
	
	# Edit dayz.proj to refer to modname instead of templatemod
	$ModName = Read-ModParam -key "ModName"
	Edit-TemplateTokens -Source "TemplateMod" -Replace $ModName -Folder $kommanderf -File "dayz.gproj"
	
	# Copy batch files from template to modfolder
	$templatef = Add-Folder -Source $templatef -Folder "*.bat"
	
	Copy-Item -Path $templatef -Destination $modfolder
	Edit-BatchFiles -Modfolder $modfolder -Modname $ModName
	
	
}

$buttonHelpFolderSettings_Click={
	Set-PopupMessage -Message "Convert Mod `n (1) Creates Kommander folder; `n (2) Copies and Customizes dayz.groj `n (3) Copies and customizes batch folders `n (4) Copies integrated tools `n `nUsage: Copy your modfolder into the modsource folder that you slected in folder settings. Click on it in left panel. Click on Convert Mod." -Title "Help"
	Show-messageform_psf
	
}

$buttonCreateUIFromLayout_Click={
	
	Show-CreateUI_psf
	
}

$buttonLayoutFolder_Click3={
	if($folderbrowserdialog2.ShowDialog() -eq 'OK')
	{
		$textLayoutFolder.Text = $folderbrowserdialog2.SelectedPath
		Write-ModParam -key "LayoutFolder" -value $folderbrowserdialog2.SelectedPath
	}
}

$buttonInputsFolder_Click3={
	if($folderbrowserdialog3.ShowDialog() -eq 'OK')
	{
		$textInputsFolder.Text = $folderbrowserdialog3.SelectedPath
	}
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">11</Line>
    <Line Disabled="True">176</Line>
    <Line Disabled="False">500</Line>
    <Line Disabled="False">540</Line>
    <Line Disabled="False">614</Line>
    <Line Disabled="True">847</Line>
    <Line Disabled="True">854</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>