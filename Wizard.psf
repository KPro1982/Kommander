<File version="3.2">
  <FileID>fb15099b-6511-42ea-a001-83430d32c4ab</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAGRoSURBVHhe7Z0HeFTnmbZJssmW7O6fvkk21Y6T
2Ou494ptbHrvzfTee6+m9y56E0USQkhCvffekYSEQCCQkEANVFHj+b/3zAwIeRyDPNgaznNf131J
c+b09j7fOWdmWhFCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
yKNx+Ac/+H7MX55+OmbKlKkx8+YtiJkzZx6llFJKrcb5MQsWLIzp2LFDzI9+9KMYVdvFf84Pvv/9
tHZt22H/kROIPpeNjKslSL9SRCmllFIr8XxOsbIIAeFxUI15/PSnP4GxzH81T//pTzF7Dx1HYnYR
gpIuwz8+CwGUUkoptRqldotRGfmISsxEly5dvj4ATJo0JSb63GWEJF9BcOIlSimllFqpQQkXkaQa
9LbH7b8+ACyYvzDm0vUyBCZmIziJUkoptV5DLKS5cVtSc9Nsjk3HG6RCwLmcUtg7unx9AJg/b37M
xbxbasDLCE2mlFJKrdPwczmISL1qEWVcMs6wlBz1v7y2hIZxPo75NCmhIFUFgJP2Tl8fAOZJALh+
W7sFEJZCKaWUWp9SCD3DUmHrFIKjFlDGJQXWJyoNjl5hOP0NlOEdPUPhHWkYp3dEOo6dCcXR0+an
/fAGwz04RVt203qQEJB29dbDB4BLKgCEaimHUkoptS6lqAYlZuPIqSAERp9HYGwGAmOaqRo2ICod
RxzVuOIvagU8LCkLESnZCE++dM+oc5cRe/7al4xJVy3zRv2ZjEiWcYVq9+iPOAbDLyJVTSvzgWkH
x11Q08pGmNzLV++FxGdpr0PV66b9ikFqXmU+/WOzEJlmuBogISD92u1HCAD5ZQg79+VLCxGp1xB1
/ro24sj0PESfzzPTz2M2LVfNQx4izb1HKaVU90amXVPF+hKOq1Z1ZGoO/OPkyfiLzVKGlXFIC90/
9gJc/SMRl5mvauQ1hKuaKEpdknBw0i0MJ86G4aTR4y4hcA1K1N439StKfY2/UKDGFYUAVeRtnUJV
oLj8wHwGJlyCV2Q6Djn64fDpAG38roGJ2G/nBQfPSO31vfmMuwg/bT6v4oRLGPxiLiAqXc2Xei0h
4HxuGU46PGQAyC4oVwNe01biffMQlZYN3+A4hKReR3h8MtwC49WCqe7puSoQiNKf6f8myjjMdReb
vmfutRR+FToiUi7AJzgBYamNp9tErX9KKaV6VGpDUEK2VgyjVV2S/4PlwfZmKMNGqXGecAlXhTZL
1b0YJGQVqOlIDTIYd/EmNtscx+Ytu3H48EkcOWqneeDAMSxbuQXuISmIy7pxr38ZNvHiDW1cgapV
f1yNO+LcFUPhV8FFlJCwfoctTpx0gu3x01i4cifWbNwHpzMeWLdxN+zcw1XrPsfYvwSBLESr+bRz
jdCuAESfN9RCqeUZ18sfPgBcvlGhVpqhhX/ffMScz4TzGS/4xmTgrKc3vKOyEJtZgLgLNxArqlQU
k5FvfG3sbno/43qj926ovwWN3stT7103vi4w/G/sp/Gw8VlFiD6XgtOnfRCcdkO9VuPQxpNvGFat
YOn3wfmmlFKqJ6WGhCRd0QJAjAoAIYmXESoPthuNTM1VBVe1xpsoDc2w5CsP9CvDyjhOqiIdpFrl
7kGxSLpYoNXIGJmWMj7rJlZt2IvU1BSEhUXAzc0T7h7eyLlyGftVCLBXxToxu/Be/zJs0qUb8AiO
VSHjkhYuotIMty2C1fREmcc9x9xwxNYRdbW1cD3rg5ycXFy9mouV6/fAI/ScFhJk/rSn/9WwMaro
25+NQGDcRa0uyrqQwHEhvwJ2DxsAcm5WagPLZY77qoJ7IRtuZ1xg5+wH37hstUDFiEvLhJuHLxxd
VDCIvYKY1Ax4+oTA1cMHZwNi4R0YglMuPghIvoqohGS4ewfDxd0HHiGJqj8/nHILQqgq5tHJaeo9
Hzj7xSE6Iwf+AaFw8VTjPRuI4NR8JKjwIdNxcvfEKecgRKh5Cg6LhLNbAPxU8gmNTYSzi68KJZkq
janw8KX5p5RSqgfl8nq4ah2fdA1HnAoDoar+hKUYlNb30VO+WLf5IDZsO4KN2w2u3XwA2/c6IEi1
qCNU8TX1L8PGqkJ6UhVWCQSeIXFIvqSKeYahESsmXirGui0HERMdjamzlmPF5iMYPXkZXFzctSsB
jt7RSLpccq9/GTY5u0gbV1jKZTWfEYhVISM0We7ZG5RL9wmXirBm2zFs33kIwqXsy5g6e6V2W0HG
Y+pXlGHjMq/D3i0SwQnZSFANYlkXsarxfLGg6iEDwJx5MTmFlao1XaC1sO97UxX8HLg6nsQRe0+E
phci9dpN+Pl6wzkgBZFJKXD2DEJQXALs7NwRnHweZ0474Wx4BoKDAuHkF4/gyFCcdAxAeGIS7B2c
VeG+BB8vT7iEZiDxwmV4+HjC9oQz/JMy4ezkAs/IDDV+FSRCkuEfGoyzwWkIi4lSgUKFgvhENZ3T
OO1yFg7eYfD2kzARiZgLKqioAPDgvFNKKdWLCaoGyP1vKdpSBMNSGrX0VXFfudYGl7OzcfPGDdwo
KNAsLirE7j1H4eAZpRqhKkAY+5dhJUScPBup/r+iinY8UlTxjlWNYrlCLSZll2Dtpv1ISU7CSTsn
7D9kBxs1rpSUFBw8dEILAMlXSu/1L8OmXC6GZ2iCmsYVbdyx6bnqf9PHA1WD+fx1nPGNwcp1NkhI
SNSuLKSmpqlC7oz1O20RquZFrlhEGPs3PFeQrwJAFEJUUEm8dFNbF3Il/dLN6ocPANeKqlXyKNRG
cN8iJF3Khpu7P3xColVLPASxl2/A19MbnrFXkXblumrR+8M/JhGuagUm5BXDx9MH/skqgSTFw1Wt
gMCISLgFpCIp5xrcXH0RrlJTeEQo3APi4RsQBs/wBJx184Ff4nl4uPsh7EIRIqPC4eYfC6/AEPgn
5iPlQjrOnA1CYFQ07By9EJR8CTGZ1xCoQoZbcDqSc0qbzDellFI9mZRdCHkOwE4FACmKUsjlXrjh
QfZ8fKECgOMpJ7i7e8HtrIemj48vVq7eCpeABESr1rWpfxk23tiyllDhpYq2FO+4C6rAGk25cku7
gnDiuD18ffzg4+2r/RVXqXGeDUzS+jH1H5d5E+eulMA7LEEVcQkqkVrIkIfrTc8JaK3/zQexd89B
ODufxayF67Bu0x7VKPbHgkWr4eQToxq7spwPPlcgAUCuCCRfLtLWRYLyclHNwwUA+RWh3OI7SFIL
KCO4b4la6Ctw91At+AsliIgIh7NfjGr5y6V3b1WUfeAVlYWY1GSc9YpBYm4RfL39EZCSj7jkRLj7
xyMkOgbugWlIvnoN7m4BiFABICIyHF4h5+AfHIIzHn5wcvFB0LkseHkFGgJAdATcQ9IQk5QAxzOe
cPbwhOPZUMRk5cDDwwtnPIPhG5uOoJBQlaYykHK1tMl8U0op1ZMpV4q15wAcVNGWohiZdl0VSYNy
6dxVFfktex2wbd8ppaPm5t32OHraXyuk8sybqX8ZNjHrBhzco9TrXPiGJyFN1Rm5BZ5kNCXnFnwi
07Hr0BnsOuwMG6M7DpzGcedAJGTdVPNVcq9/uWUgH83zjUhSgSRXK9qJqrUuz7qZnmmT4u4Vdk6N
74waj5P2YN8pz0hs2SPz6aeFE8MzcoZn78QUteyOHtHae+dySrR1kaTMKal7hABQcgfJKp3ISnxQ
lSguFmjvpeYUIT4jTxXcEiRkXEFUqkocaiWcu6wS2EWViHLUgqp+JUikSDeVQpKz5W+hes80HhUy
suXyidpgl9XCp17WLtckq+kkqY1mel+GSVXTiTt/WW2YXG38567eQkq22kApF7UHHeSBCkl9KWqh
vzzflFJK9aIUPymkUrSlWMdfLELCPQvV+7dw/nqVsrKRVUjLLVf1xtCPqX8ZNi2nFKfco7Va4x+Z
ggsFlUi9Vo60a2X3zCyoRnZxg9F6gyUNuFRYh3Q13sb9piqzblTBPypFG6e9WzRS1XxLq1+mb5oH
mc+MfDWf+ZWqHpZqw2UUVCE9r1ILEoYr9ap/VUNl2PO5t+DoqRrmabmqZpZq60Lq6NXS+ocPAHml
NVqBlRE0Ne2aqfst9f9tQ7fc22oBb2sr2tDd0M+D/cr/Zt5Tf03vpeeqlaPGY35YmU6ZYTr3hpXp
ygo19HN/GEoppXpVaoE0CKVlHZGUjWi59C/31ZuhDBuekK3CRLTWGPWPOofkrOtaY/ecaqA2SzVs
yqUCbVxJapynVNEOibuopqfmMyXHqJq+6a82L6bujd+7b7TqJzLlirbM8Vk3kG6sh+eU1241PHwA
uF5aq1agodBSSiml1mZGXhkiz+XCyTseZ3wScMY3sXmqYU97J2gfy8u8XqF9B0BAdBoCYtIR+A2U
ccizBZnXyxGTng8nmcdvPJ/xCEvO0ZbdtB6kkZ176+7DB4D8W3VIVyOQ1rahxa1a5ZRSSqkVeV4V
7AsFVRZRxiXjlMv55x+4ddB80/PKDfOp/pqbZnO8P5/G+q1U5fzhAsDs2XO0ACAzJF8fKObevI38
ImUhpZRSSlu0ql5nXVeN+GvSkC+D+rf5AaCk9BbKy26h7DallFJKW7JSr+U3fSwSAIpKbuG2Gumt
W5RSSiltyUq9ZgCglFJKdSYDAKWUUqpDGQAopZRSHcoAQCmllOpQBgBKKaVUhzIAUEoppTqUAYBS
SinVoQwAlFJKqQ5lAKCUUkp1KAMApZRSqkMZACillFIdygBAKaWU6lAGAEoppVSHMgBQSimlOpQB
gFJKKdWhDACUUkqpDmUAoJRSSnUoAwCllFKqQxkAKKWUUh3KAEAppZTqUAYASimlVIcyAFBKKaU6
lAGAUkop1aEMAJRSSqkOZQCglFJKdSgDAKWUUqpDGQAopZRSHcoAQCmllOrQ7zwAlJSUoLi4+Im0
tLTU7DJTSiml37XfaQCQIllUVKSFgCdRWTaGAEoppS3R7ywA3L59G4WFhaiqqkJdXR1qa2ufKGWZ
ZPlu3LiBmzdvtnhlXkVz7z3JWuNyW9s8S9A3dw6glH63fucBoLKyUiuYNTU1j2xzh7O0XzUfcgWg
rKwM5eXlLdqKiop7tyzkf3P9PKnK9pH90Nx7LVHZPqYrTNawreQ4lxBg7hxAKf1ubZkBoLYe97hb
/+B7RmvrGrS3G+q+SQioxV1tLEB97f3uhjGrbg8xbtOsNtR9+T0GgJYvA8DjVdYvAwClLdMWFwBq
61RFbbiDjLhwhEbEIedGxZcCQkNDAzJ9d6HvqImIvFKpvW78vlnrDKX+XqFX46ytrcCltCSkns9B
parkMp3a+rsoL8zBuaQUXC/9Z1cnarXpJrlsxIAhU5FwvU69rnugn68KALLMFRUPdpP+Ku8Y0kTd
nUr12tS9HIaud1FZXoayRsNYyq8KABUVldotmsbzer/bPy8+huWp0+a8vtHyGKzQ1oGMp7Ly0YuY
zIOlit9XBYDKyio1f2o6TbpbTDXdiurG6+fhgqIst7kAUGFcn/f98j72Vcq2McwJtH3MXD/NVZaL
AYDSlmnLCgC1dbhbVwmvE0sxYvp0zBnRG216rcIVOTuZmuVGaq8noG/fj3EivsjYxcRdYwGuNb42
Un4dHiHhqJT/76pCLU33u7fhtGoo/t/3/gcbvC5ovaEmD1M+/TN+83wvRKllu9tQf+8qgWAKEMYL
EEBRKPp90hYu6VXqxYNXK8wFACle1dV3tBN04+7Vqv9rST5Ys2IVQjMKUaOKQnl5Je5Ul8Ln8Dqs
P+iKwvIaVFXeH8ZSSiH5cgAoQ4nqdruiCnfuVBsLoZqfO3dUkbiFktJb94Y3p7Y8yb5Y88VKhGjL
U6V1lwAj27m8+CauF9xEeVU1qswUKlN/NdWG8HCnpg616n95T+axcfH7JpoNAGW3tXVRWqrWya3H
cwWn6k4NCtIC8MXK9QhKy1P7S7XZ/poqy/3lAKACVYU6/m7eUMdgKYoLb6Cw+NbDrSPVz52qCgTZ
rcfy/c4oLFPboxmh7KtkAKC05dqiAoAU1bqSWPT/8D2cyZPqegMHl+/DxWpVgmuKEeBsDwfXABRK
8S2/jPFju8E+oUR6RE5SMOztHRCdna8VbUkMF+MCYGd/CiExGYg+vRTPf/AhNh31xdXiSu0hPeHm
+QAMeP81fDRiEdSyI9NnGz579U0MW3AGpgiRnxIBOzs7uIck4Y56XV9/F/Vl1+HjfBqn7Pdj8LD+
8Mr8+gBQWdOAO9fjMKLjx9jmf1nlkBrDeyoUyLLXFEWj31svYIVThhqXKrRVMjUg4sAkvNl6KDJK
VfCprkCVChAyflNhrlCt1ZoaCRXyV3U3hQsJG6rQSLfqJoGjsVIoHggAarhaFcTCji3HG8/+HYuP
R6q1KSu9Dm5bxuKvL76LQ4FZqh8VSIzTlOlXmgq5DC/LU6y25VvP44tT6WpYw7JKIb8YdwpTJg3H
2M97o+fwTTh/q1oVehU0tPHUqPFUoFoVoeyL6ci+UabdirmWnYELeYZt7bBjKhbZBmj/G5ZbDd94
GdX07xiXW9TWh3Qzvq5W+5xp2ZsGgIrKatRWFWDX1C745LP+CLp4G3XG8CJWGqcl8yuvtW1hfF/W
9R0JKVJUZTqqH2393wtQavzG4evvNqCmIAmfd/oI8+0TtWWprb7f31fZNADItr9bXYxd8waiQ+/+
6N7uU3TpMwjdOrbF4eAruHvvFlqj7aMCQ5UKctq6UfNWW9+ARIfFeKnrAKTfrEet6te0rr5pGGAA
oLTl2qICgHb5v+42Tq2bjHadPse2U4mGhn9tMY6unowJi2ywaclQzLf1RkNVLsaP6QbnTNXSjDqK
0WPmYI/NGoyYOwPnilTxD7TB8OHjsWntVIycOBsHd83Dq++/i4UbTyKzoFwVccOF9awoF2xasw2j
hw3APp8wHFw9HyvnL8XIhce0aV8KssekvlOxdft2jOncE/MPRaqAUYhtc4fi88kbsG3tDLz5aTf4
ZmnRwHiyNdg0AMg0U312o83//Qm9Fx9GtRqiUhWmutpqXMtKQ2ZmEpZO6o0tbmkya7hz+yYyLlxA
pNtODBkzFemF0rUBt65nIyEhERfzilDfUIvi/BxcuJSL0uI8nDuXirzS2+rELeu1CrnZqUg6d06F
nuKvbBF+KQCobpV3GlCZG4EBb/wd/+gwHBkVQFVuOIZ/8jc8/+EcZFbVq8Jcr81jalICUi5cQbVq
sUvxrqu9g1xVvDMzk7F8Yi9sdk1Vs12jxn0H9VWXMb37e9gQcl2trvOYP3AWAi+rwn63DrlZ55B8
LgtltWq8hecxcVg7zN7rgyt5l7B4cmeM3ngK167nwcv5EFwiM1BWmIuLl6+jtPAaUlLTUVCmCrKa
fq0qankX1XInp+LSxSxcvFKgilwlLmemIDktHddv3V/OpgFAiqOEnUCbCRg2ZitK1E4gVyjkKoQs
X8VNNa3kFFy6WaICRwXycrKRfe2mGu4Wrl66gKuqe3npTVy4kK3WaSEuZqSo4HJDrc9KVFargnu7
EClJSUjPUkG1uhSb543BKsco5F25gCsFRaowqzChpnV/fh5U5vvBAFCNuls52L1+MbwzrsBmwhCs
cUhEqN0XOBR0We1EtwzbJ/Myqozbp1Y+oZKTqfahJOTcvKXta0VJTug5ZjTSbqqw3VCOrPRkpKRn
oEAdp6Z11RwZAChtubaoACCtFNNDdedUoRzU5j2MXOqKwvwgdHvxJczZZotD6ybi03YzcKX4GqZO
6A3vy0Wwn9EBn/Sdh6NH92PAB+1g4xuL3VMGYL1jljauu3dV8TnviX5TJ+OmoYtqlRla11lh9th0
IADRp7/A3556FsuPRSLJbgv6zzyu3q3C+kFtsNL+otZvVcxJ9OyzBJGx9hjeYwquaV0vYNqQvnA7
LzcX/kkAqFTLpk7U+7euR4DPCfTtPgIxN2RhaxF1ZhP69ByCadMm4Y2P3scOv2u4ezsbG2ePQp+R
0zF0cAe8O3A6rlYBBUl+mDdgtOp3Mnp2HgHH+GvITziJ919ui6krdmDmsB7oPn41rqt1muqyCTPH
DMe0zwdi4he2uHX3LqqanKBFOcF/KQBU16PkchjWL1uLoX07Y53HOQQf/gLTpkzHkNHrcEmFmdrC
S9gxeRrGjpuGAZ16YtHeAO15hVjnzeirLc9kvNn6PWzxvGAMAFWory3CvtmD0HngXHgn5Bs+AlpT
jZiz2zF86ARMGdEHK1z8kJ1yCu+9+Cd82GMc1u7diE4fP4U3O3yOnQeOYeLoblimwuHViP1444WO
mLd+Jyb07Yj+c3egpO4ukt1s0Gdwf4wf3gPPvfC62n7BCDu5AjPGj8eE7r2xeJ+nCl/yTMVXB4Dg
fWq5JtvcCwBVd2qRfyEENsvnYeHkcfi07zQk3qyB/85JeKvfUtysvYWdY1uj7bidqCq6gMnd2qLj
kJXYuGo82rQfAM9Lt7Vtun3BWAwaMwYd2nWDW/hF7J07BMPmbsb6Bf3xdrdhCFPHU53xVoc5mwYA
rXvZbdwuUwkNxdg2fhjWnIhXS1eLshsXYTN1OsaOnYZBnXtgvo2Pdq8/K8AJ0/qMUttyLHr2nAK/
S7dQkXwK3UaNw0UVHv1s5mDahMkY3bEP1tqHQh6Lbe6zEAwAlLZcW1QAqGu4i9JLIdi81V6dphQ3
nNCxzTCEp/ui90uvYOURT1U8z8LuTBAqbudi2uS+CMy7rQJAe7QfvBQBAYGwP+aIc1czsHr4AKzz
NASAW7fUgsU6oPPIUcgoqNdOSvIQoHA1zgUb9oUA5SkYP3AwAvLu4pLDBvSZJQGgBps+/xiL9iVr
/d4M3o2ug1YiNuwQunYZjavSMT8Yw3r3QcBluV7w1QFANahxNdAG/UbOg5fnSXR4/UVs8lVjqEnH
xM6dYBsr1wOKsXR4Z+wKuopMp2XoowqIXPQujNyNXgOn4WpFIdYObodlR1SLWhGzZzE6DN2k5rII
83r3w8LTmSohhGJIl36IKbkD+/l90bbPLISGpeNCRj4qjJetm/qVAeCiP5avOYlgFVBav/cRxi2y
QazncfQZsAS5qsT4bxqFAWN3a7dF6lJd0anNKARfiMesHl1xKFoCUQmWD++I9c5pWgCQ5woqq9WK
uFsK5z2z8OlrH2LGVj/Vis3C2I9fw9TtPmpaq/DxB5/jXEEpVs3uBZuQXG1Ztyzsiy9czmn/H1k5
EOP3+qvxZGNUx37YFJyPO+ed0U+FqvMqZKwb0gZzXPLU5khGpy4DEXWzAFuGtUPPCRsQHXke2dk3
UWm8XfBPA8CkXYYAUH1Hew7kdu45+PmFIMnfEZ1efxM7wopRm2KP7sPnIke9n3F2DfqPWgopxb7r
p6PthMNqj6jDBrVNN3ldxEXXVSqYLNG2acHleOQV5GLj5H6YZBOsulzH9L5tsctXtdobvvp5ALMB
QJ4BqFL7890b2KoCwOrjcWp8gN/Wseg3aoeKsWqU5z3Qtc0IBF1IwLyeHbDLu0Drx3XZRPSf54ib
F9zQa/QEXL6Vh4U9WmPIvL2Ii8rElZyie+uqOTIAUNpybWEBQNXDG3GYMaI9RsxagFkTh2DpPh9U
3inGiS0LMGzKQmzbtRuhaTm4kXwGb7z2HBZKSzDuLMaMHY9169fjhLMPbpRX4ryPDbr274j5s9fC
7mwaruelYXyPjzBw/AHEq5OadqHh7m2cWDoMrbvPwWV5AECjFHsndsBfXu6DuPxqXIk+iaGd+mDB
woUYNHw0tgSqYnanAGtn9kKPyTOw48hOdHrtH5h9OEyN8y7q7l3NuB8AylRRAspwdPN8jJi6CKtW
rcGEfm0wdJETagoj0O+zngjXnmUswqrxvWEbnYfQbWMwcOZR6YiCiH0YOnYBCiqvY0an97E3qFjr
nh+wG537Lkf53UIsHzIeR5MLVYaIxMRRwxGVp8pYaR5cj2/AsMEDMGu3F27X1pl94M5cAKioakD5
tXCsWG2H2+VZGP72PzD9ZCpqVaHvOXCFmlPAfk5XjF7qrM0LKuIxrMsonFaty6Gq5RiqXWopxprx
PbDD+6Ja1yoAVN5BWUE6nJ1DtYKKa07o/G43nE0IwrA3XsCIuRths30zVq45gCsF+Zg/sRN2BauQ
1FCFL2Z0xRfOhiB2ZN0wzDgSpv7LxpR+E3H2WjXuXPLAqNGTkKVyR+SJ5ejSfyJWLJiERdsOo7BK
hb68LJzctwp9+w/CascYVNfVavfEzQcAIOLIHEyZeVibHsquIDDMH/6O9rCxsYfdzqV48aXXsS/m
NqrjjqDLsIVqSYHzzl9g6Iz12rMjXusWYMJmb/VfA3bMGYBDodmI3DUTI+fZyRjV+lB7YK3cAhiL
TT5yhakEq6f0g224BBfzQU00HwDUclRIgCzF7imjsfG03EK6ixPzumPEwtMyNZVikjGyywicjvLG
uHafwUUeM1EkH/sCvScdxPVsP/SfNAnZt+7i1tV0HN6xHL36DcF2z3OoqZOrN1+el4eRAYDSlmuL
CgDy5H5dgzpZl1xDZHgIIqPPoarmLuq1R+6rkRwTjvC4FMgzgRWFV5GYmIzzlw0tmZvXMhASEoKc
wlvq3KpOruoEezU9FqGhiSguq9MehrqZnYH4c9moUuOTacrHALPTEhGflI7i8hrtHn1tTTkunT+H
lMRzyL8lhVuN+0qaNu7Eize1wiUfFay9XYDosDCczy9B/uV0pGZd064q1BqLf+MAUKOmF39qO958
622cSJL2IRCwdRB++4c34Rp3Dhtn9kDvuatwyvMEerz2N4zc7IlrMafQtXtbrDlpjz2rx+PFFz6E
R1YhAnbPQK+uk3Ds2BGMGTEQ8+wiUHUjHO1eeB1TbWORG7sfzz37PHZ6RuPktjXYduQ0Fo3qjY6T
t6NYzXe1mU8RfDkAVKhlqUHy2U34rO1IRFwpRWnxTdxW2yf+8Gz86a/v4Mz5IuRGHsegNj2xYc8x
rJ49Fj0X2aCk/CbWTemKnnNWwEEtT6/X/4rBKxxQVlOP6jv1qLkZi3G9PsaMjbtxaNtsDJ+2DlmF
17Fn/iiMXboLnp4u8A6NQ0WlKo5T2qP9gJXwi8jCvlX98VmvhXB1DcXkfi/gjWFrcSndEx889waW
e2Qgy2cN/vL3F2Ebn4uI/YtVoR+CCROnYY8KGzeLsrF5yWIcdjytpt0Bn69yNNwCMBMA5DZFQ30Z
Ds1oh7ffH4ADx46p5emBPlPnYfOiafh44EL4Bvmg3Wd/wRibUNzJ9kGHD9/EgsMqHMxuj1c/7I+M
/BvYPOhTvD5oM/LzM/H5+39DlyV2uJ7ghj79OmDVvkM4dtgdqWrfG/rZ6+ix7Axu5EWgx1vPYdre
YNTUG8JJ4210f/7MB4DqmjrcuuiPti89i65zjqK0DsiJPKa2T3es230Ma+eOQ/f5W1GituuppcPR
d8B8HLPdi4FDBmGbbxay3Ffi2bfVPhYRh83LluGk8yl83vEzTNjpg9q7hnXVeD4eVgYASluuLSwA
GEJAg9Y8NGD6Mh7tAUEjdfJaFTMN41POpkHkEwDaeFRr10S98Ut6DP2o4i3va97/IqC6e18EdP/j
g4bh7vcjw8q0pT8tkwgN9/4xDn9fUwCQJ61j3D2wb+8+BCVfQXV1JaK8bHHgwF74J15FZeEFHN29
AycC4xAd4IxjZ3xxq7oB58OcsGPPEYSmpOLsyQPwS7qmFaegM0ewfft2nPBNgLRXiy7F4/CB/XAO
TkVWkj/2798P7+jzSI/2wo4dO7D7kAsuFar5+IpLuV8OAPLxwzKkBLmoeT6CuEuFqFfLWV97GwmB
Lmq+9yMkOQe1qtuFKE/sUPOy65gnLpdXqXVbi9t56Ti6ZweOB8YiRvV/7Iw3Cm4ZPl5WVV2By+mh
2L9nu5q3g0jLLtSumlSVX8epI7uwfa8tLhQUax83zM+IwoHdx5GcW4mya8k4sucEIhLPw8N+P/Y7
eCI5PgJH1Lx4RGbgfKw7Dhw6irDYUCyZNAwL99vDy8sD48Z8gmHbnZAWflbN5w7st/NVO3kV7hif
bv9yAKhEZdkNBLscw/59e7Rl27Frt5pGGgqLcnB8vw1OuEeq5XKAg3cUKmorERtwAjsPOyApJQnO
dmp+L2bD1+GQmkd/XLx4Do6HD+CQcyBuVdUjI8JZG6dfVA4q8zNw7OB+HHEOQ/aFeDXuA3Dyj8Ot
yupHDwDV1chLD8dete1tT/kgr6xa7aM1yJJ9QE1vp60HLpWpY032zfJ8uJ/Yq/ahnXCKyFAFvg5p
Ya44sP8gotMuI9rnpHpvB444BaOwohrVzSz+IgMApS3XFhgAnhzv3QJQSitKiwk1Vep1OYzfS4SG
2ipUVBtDh2r5GXKN4aEr+SidUK/Wj6ANq4rzvUCiTtyVatz3h69RLUHDQHfr7tz78iOhRhX/B7+M
575fDgBy4i5XLVHDsPLRQ8NyNJon43IYJ6dRo4qq9Fd5p+ny3P8SIxnmjmkkilptPGoZKg0PZQry
uXTpVm3sr6ZKnkkwBDr5hIGBu/dDnlpW0yRx+zyWfD4Y8xdtV0FlN2aNH4fdbvHGNw3IRwxN60Km
0zgAaN3UOm60WAbUslQZP5Yp611bLvW3vKzCuIxqWYzzU6OKsaFTgyrMNdp/TbdpQ121dkvEQL3q
z7gADbXalwQ1np/GflUAMKx3U+g1ru9G21AwbZ9yFTDuoZarQnUzfgeVCrgqONzbbe4aPgHRaPqP
qkyPAYDSlikDwGO08UOALVlzAcBarbxzB7dzz8PP+TQcHU8jLP4q6uvq1HKZ799cAGjJflUAaKky
AFDacmUAeIzK8pmWtSVrKoISAuR/c/1Yjbduo0K11Ovv3sVdpXzHQpm5/ozK9pFfbDT3XktUto8E
S1O4NNdPS1LWb0FBwb3QQil9NE0183HIAPCYlGWSFrWcqKWw0pYrt9HjleuX0uYpx47pCqW5OvpN
ZQB4jMpyUUoppc1R6oiEAAYASimlVEfKp6EYACillFKdyQBgtNHXABj58ufu73n/Q/rm3/8Ktcsu
jV9/aZpG7j74u/+iifvfJ/CgpmU00Xg6D+u9xVKYhr/PQyzrvQUy/WQy1ZO19z7fZ9hXTDR8xT77
bXvv06Fmji9K9SgDgLKu/i7qqgvg5bwPmzdvxlYbR6TkVqoThXxzX5N+69TJozQXrnZ7EZRq+LGZ
xu9/pabPlDcY+pfhym9cgNOhvdixbYs2Xc0tBxCXXaR9a6BpWPk/I9QOe066orBSfiWvyfLcSy8N
SPQ5hP2n/XH7jvTXqJ+vUean9FoKbPfu1b7w505DvVovdbgQ64W9qltoWu4/XVb5Bbi68gKcdTwK
j4QrD79e6BOhbO+q0stw2qeOizTDt2emBdlhy46TuHJL9uHv9iqcNn/552F7/Jg6vkq4f1Kq1H0A
kN8qv1tzE6sHvYY/fzAQB086YHLnt/DT334CvyuGr9Vtyp3sALz8y1bosznc2KURxtbFve86MdJQ
dB7TB32ATZ7Z6pXh3etRB/DHVq3Qe8EBuLi4wNHREacc3ZF5o9EXqRjJz4xBSEwSbsuP3TSh+moE
RvX7CEcii1CQpfqLS8OXe5NWuenbbBojrTVD90u+G/FjNT8/emU4rmizUIw5H/2nbCwM22r4ffwH
MIaZe9zJwNtP/wveW+yqvWy8numTrezRty454xm1r4w5nIgs35341X/8C7rN2o/CL+/OKlh/1eUv
QR2Txv/MIVfBvoR8KZTx33to3+LZaJ9PPYZ//e9/xxz5UasmNOeKGaXWru4DgHzLWkNZMjr+pBWe
/nyb9ktq9SWZOLh5DcIuqgDQUAkPm82YO28xZq7fj4xy1SkvHB8+0woj9sg3wDXAb/92zJH3V+9G
YoHh5JR/zhcLps/AjCmTcSokEec8NuGXP2qFZ/suVy0iw+ktP+Yo/vHzf8FK9yvaPMoXr1SrvyWZ
gZg5fT58Y1JwYtNCrDsYisSIk9h22Am3KisQ5boDixcvwtRJM+GdcBUxJ+fiP7/fCh9N3Qtf54PY
7xyIaxfisG7uTEybPg0zZs2HS4oEDyAn1A2Lp8/C7FkzMWPmPDhGZavWmSEtXA7ciae+1wqtfvQM
jqVUAnkeeO5f1etW/4qpB2PVCfUyjqyZi5mzZmPupl3IKTT8lkFetC+Wz5yD+ZOG4A+/+A/03Oij
dTe3vumTqezRZVc88M6//QCvftwef/vt7zF8rSsMR0MVYtx3Ye6M2Zg+Zy7cYy6ofakIJ9YsUfvn
dLV/zsKKjduwZpHaV2cvg1f2DVwIPo05M9X+O2M6Zi9bjy3rlmG6+n/VSR/cVsU+2dMOU6fOxLy5
czB36RZkltYjL9EdC2fM0MY5c+EKhF4z/KhVkrMt5s2eh+mft8e///R32OiXjcLUs1i1ZAlmT5+M
rcf9UVYrX0VtftkofVLlLQD13t2GBqT57kWvnp3Ruc1H+KzrNDhEyE/9NsBpQTf86h+d4ZcYj0Xd
XsMrfVcg91oSPvv79zHJNgEhW0fiV39vA7f4BKwZ8B7+0Wk2ruRfxNDXfoEXui3CoWVT0WP6OkQH
O+Kdp76HLosdUWZswBTEH8dLP/k+3uk6DJMmTcL48eMxedk2pGWkYfSHv8J//OaP+Pd//zk2embD
cd6r+M/XuiPY7wSe/8G/YMSaPVg5tR+W7PfEhVBbPPu//4LJByKxY8jv8Kv2UxDpboOfqtZYh5kb
MLLdL/HHQStwMdoFb/3+V+g53wFn987B99T73TcFGWZGcTlwF55WQUKtfrRd7ISw/VPwn61+gO/9
2y8x66AvDsx4Hz9/vgds7ZzR9fmf4+2xm3AlJQAfPfULtJ9qC3/bVXj6Jz9E942+2vjMrm/6RGoI
AJ744D++p+0/rf7jVbhdMdz2uuC2Dn/45c8xdqMztk/tjV899RrOJESi9/9rhX97eSBWz+mNH6ph
Bs5cjqEf/QpPjVqF4/N6qvH8G8as2IBP/9QKP32pFzYv7Y3v/fpZHAlJwr45QzBpgz2SI93R7Zkf
4cPFdgjZM16b9uhVW9Du5R/h/SUOyHDfij/98g+YusMDLisH499+8ntsOOuJsX/9MV7tOxt7Ns7A
sKmLkVV6Fw315peN0idV3gJQqb+6ohTXr99Wp6o6FF6IwpmN4/Gr//055rh5YO4rv8X/PNcaC5Ys
xNShnfGPrhMRGxeKjs//G6ae9MKyD57Gz55+G3PV+zNHdsdLXUbAyWkn/q5OXpvCC7UToEZeJD56
Rp2cDiQZO9y/ArAhoFF/xmufN4J3apfj/zRgq/baZcE7+PV7/XDh+k0cW/o5unTuiQmTRuGoawJK
M73w2lM/xFrfAjhM+wf+0nseojz24v9++wu4qIa/z/J2+HGHcTi+eiz+50fPIUy+Ir42De/945fo
teV+ALjosxXP/+7/4cMPPsRvfvlHPP3HP6Nzz8H4v2eexqhN29D9Fz9Gry/Oav2Gb+yGVu/0xbFN
U/GbVn+CT6l0zUGH1/8H7VZ5aP2YW9/0yVR229uXPfDGD7+P7qOWovsrP8dP3h+j/Yyxw+RP8LNf
fAztGtQNH/zhj7/G1MMnMeqpf0f3Vb4oiDyAP/zp1/C6WA/3ZV3xs09GY9e8Pvjf376NlOK7mPvZ
v6L1Ine1e3ngF7/4M9a4n8fN7FCsXTELCxcsUMX+1/j9kHXws5mIp/72OtJuAZsG/x+eGrMC+0Z9
it/8uQvyZNqXnfDbp/6A1R4ZSD61HL3btsGoiWOwetNh5N6uVQHgu31OgdJvW94CUGeu2oJwfPrr
n6PXQjtIbbyT4oq///f3McY2BAeHvodf/qMfPKPS4Ll3JTYdPosbF6Pwzu/kXmcoToz/DD97pgtc
wtPgd3AtNuw7hZyMYLz/i39B96UuyAw+i7UHTiM7NQgf/KEV+m0KufdrhNejDuKpf22FJa6X790C
qKy+g5qyq1jS52X88Be/wa9+/yJOJBbCZf6b+O/XuiA2PRUnNh9DUnomZvb+d7R6rh9iw13w8v+2
woLTl3B4zFP4befpCHfdiT/917/ieEotnGa/i1atx8Hv2Ar88nv/hjW+ObgUdBi//9WPMWhXqGFm
FJluq/D7n/0UNmoDvfGfciXgaRxxOopnf/WfGLLJDgva/hF/bL8AF69cx6L2f8avO89EmMtO/O57
P8BM+0u4GGaH3/x3K3zGAKA7tQCQ7YJnVWgdf/w8CpKO4vc/bIUem84i+vAM/PeP/4C9kdeReGwJ
/uun/4ttPr7o97NWaDP/DC75bcXPfvlfOJ18G/azPsF/fDgC22d0wX//1/OIvFqOie+0wuvTHVCX
5oAf/+TP+ML2FPo91wpvD1mN8ymx6Pnyv+MX/VfDe/to/Oq3f0d0Xh2W9/g9fj10AzzXqlb/j/8M
2/ibiN03C63+5b+xzDkcvvuOwi84A6d3dFb7+Q+xNVCLCGaXjdInVd4CqK3D3YYaJLttxbBPO2Da
jHEYOqgPJi7Zh+JqFQYKzmHhoAEYMGwcerfpjE3H41BVdB5je7yGlS5ZqL2djS+GDUbfIePQr00n
rNztr/2CXZTDanzSujN6f/YBRq09iqJb+dg99jO06zkFIVnF2vfIF5/3wsDWr6PbwJEYN24cxo4d
i3HjF2HnlqVo/V47HPAMxPIRn6LXnGNw2T0JXcYuQualFMzu3AGDRk5Avx6fYtnJAJTdvoRVA1uj
2/AvsGxKJ/RbZINzYU7o0+4T+FysRbDNOLw1ci1Kq8vhvG02eg0YgUGdPsQPv9dKBYAQ7cQn85MT
YYtun7aBd2Y+bMa1QYfxu1CQHYXe7Vpj5ek0lOa6YWS39ujbfzA+7dUf3vG5qK8tx4nV4/F+u37o
o+brxZdex0K7GG18Ztc3fSJtUNu7PDcUg19/DcsdDVe5fLdOwMsf9kH81UwcXjkUnboORteO7bB4
12mU37mKWZ++jml7QpAbewqdOrdDUFY5/HdNxaeT1sJx5zy0bzcE5woqsHn8Oxi9IwB12QFo07Yn
Tqqw7b13LHr2H4IJ44fjw7dfRq/Vdoh2XIcu3Qch7WYdDi/ogfYS6NXxuWJ8H7TrPgRdPvkQr7zZ
GQ6xaTg5dzg69RiJkUO7YPjCtbhSegcN/GQA1ZkMAJrGj+jV16CivAwVdww36e/Kk8Vaa/0uqirL
YfzFWO335aVzQ12t8adN76Ja3q81NO1leoL8ZG6VcdzyUT6h7k4VqqSVr6Zba/zcfI3x52llI5SX
lat5rr73E7CC/IRqrXS424B67fJBg/YzqneM0zONu6a6EjXG/mqNHw2UJ6blY45C2ZUoLJ43Cbv8
EhByeA7+80c/xNKzl7T3tPkxDiO/bmei3titob5OTVWoU+ui0vjE9V01jKGr/Hxv1b31xhOpLjV+
1NVwKd349H2dOskY95FatX9Wm/pRx450lX3lgX1V9u97+7nav1Q3Qye1T90bv7F/dSyVl6t9UXrV
PrZqnI4aRvtXDWP6boua6gp1vBj3b2N/NXcqUFllPFZ5+Z/qUAaAe9YaPstutPEw8jvs97qbumn9
mN5XQeDecMbxmelmGs/9jxw9OM37/RuGlf60YdRrrZuy8XgM/TYet/Rn6N80fcM4VJBRJ72a8jzY
rJ2O3sPHYezwz1VLzBUVKsHIcKb5aTpd6f7AdIzTNb1nmPb9ZW3cL9Wbhv256TFg2geb7h+GfmU/
atKf0tC/YR+TfbFpf42PL015v8kwpn208bTFpsMbxm2cZ0p1JAOAnrz3hUH34UefKKVUnzIAUEop
pTqUAYBSSinVoQwAlFJKqQ5lAKCUUkp1qG4CAKVPuuYOcEop/Sp1EwCqqqpQVlaOMrWglD5JlpdX
aAeyuQOcUkq/yic+AFRXV2lfsRsaHo34hGQkJJ6j9IkyPCIG5zMu8NsXKaWPpC4CQHFJCRKTUo2f
fCfkyaJEHRdJKWkMAJTSR1IXAaCktBRJyWnG0yUhTxbFxaVIOZfOAEApfSR1FwDKr6cjKDIWhRX3
v+/eEtytKkJ0RDAy8yuMXb5d8s7HITI5A9XG7z4n+oEBgFLaHHUXAIrS3fHhx6/hUEI1ys57Yqu9
m/FHbpogP6hj/NEQFRvgZbsRs2fPwuwltsgs/XJ4aLiVg9mDXke/TYafwn0YGuQHTLRfOimC/Ya5
GDttA7Lv5YcGuNnMw4Qp65Gp1sPXkeQwBy+/3g2JJcYORDcwAFBKm6MObwHUYNns3jgYX46ydDes
s3UyGwCizmzAgmOGn8oN3DsNw7/YhsyMRExp3xdbPLK07k3xPzgZY7Y5GV99HXdxYNs8HIi4rv6v
RYTtYvyk1Y8w7WiE9m5l5hm89ov/wAeDtqPM+Kt//5TbcZgyfDiibxhfE93AAEApbY76CwANtzB/
em/YRlyG574FmHXAHw311Ujz2oV5U6di6PC5cEsJxpQ+f8df3+2AVUd84bRpAroPXY0rpWr48hLk
F5ShpjIHe1fOxaTxI7DSyQPSRveyGYsxO1xlIkj2OYwxoydjxIIlSCiXnxytQ+zZPRg7bgKGDJuG
A8f2oN1bf8DbnT/HYd80XE4JxKJRw9B26EwU1VTBaesMDO41CvN2Balh1dDlBbBdtACTJk3CxFmb
kXFLfnq3AUleBzFqxCSMnzgUrQeMQHKR1jvREQwAlNLmqMsAMG9qD9gm1yDHfQnazdiE2tsJ6Pvq
69h9NhFRToHIvFaC09tH4vPVtigpq1KN9VIc3zQGn7zTDWtOxmijcV8zFP1nHMJ5VbjH9O8LrwtV
CDw8GRP3+6Lmqi/6d+oDp6gLOL15BMav88DNS66qoA9H5NXriPA8gNDkDCyf3g0rHONRVlWDc/52
2H/EDRvmDcfoecuwY9dhOGxegzFr5ZZCLY7PHY6ZK720ZTo+awwGL3NGUV4AhvUYDI/UQuTHHkXX
7p8jvlCbPaIjGAAopc1Rh7cAyrBwRi8cT72LkvDt6Ld4i+pWj3i3PRg2bAgmbTymZrIeXnsmYPw+
H22I/FxDs7oo4ywGvtsGxyLTsXtsW7TpNhaz58zF6AET4JFWjoCj0zHDNgC3omzw9jPvYPr82Zg5
cRyWbnFBsN1aTJp5QhuPgXosm9UTu8ILtFdp/iex98w55IfvxO9+9hScsmqQuH8FRm8IVO8WYnrH
j+FoXISapFMYMmI9/N02Y/SY7YaOZXGYPm4UA4AOYQCglDZH3QWA+oqrGNLrbWwIKECm41y80WM8
MrLTcOa0L7LTg9Dhzbex3j8fYao133H8BiTHpWDR5P5YdsAdOdeSMHfccByPuQKPTeMwcPouZGZm
IjoqFvnlVbBd1g09VhxH5WVP9OvYF6fjMpGZEo/ErFxciziOHv2Hwic1E4khkchUK2XjtHYYvcIZ
6anZcD++FtNXnUVDXQlCw2NQiTqcnjsA7w/Zhsr6Ohyb0xejZxzVprdz0UiM2uKFwswz6NS1G1zT
MxDvvhkfvPkxPLPKteUk+oEBgFLaHHUXAMqzwzF97GhsOukD94MrMGrsfPjHxGPfqmmYMXMWvtjj
gtLaBtTmRWHh2Ok46peNq5l+WL5kPKZPn4QDp4K0+/31NTewf+tyzJgxA67R53Gntgh7l4/F2CU2
KL7bgPNRZzBxygys3W2LvMo7aogGBDqsxfip07H/hCrwNQ3IibDDxDErEHLuMuw3zMb4ZftRKLf2
hboCHFg6CaPGrMYFVdPrq6/AZuksNQ/TscDGCbl1hgcDI85sxvgZc2Dr649N8ybAxjNF6070AwMA
pbQ56vAWACFPFgwAlNLmyABAiJXDAEApbY4MAIRYOQwAlNLmyABAiJXDAEApbY4MAIRYOQwAlNLm
yABAiJXDAEApbY4MAIRYOQwAlNLmyABAiJWj5wBQW1tLdai5fYE+ugwAhFg5eg0AUggqKiqQm5uL
a9eu0Sfcq1evat68edPs/kAfXQYAQqwcvQaAqqoqrSDI8V5XV/elViJ9sjRt47y8PNy4cUN7bW6/
oA8vAwAhVo4eA4Cc/IuLi7XWoBzvUVFRiI2NpU+w0dHRSE1N1ba/BL+m+wR9dBkACLFy9BwARDnO
vb294e/vT59gfXx8tKAnVwHkloC5/YI+mgwAhFg5eg8AcgLz8/NDUFAQfYKVEBATE8MAYEEZAAix
chgAGAD0IAOA5WUAIMTKYQBgANCDDACWlwGAECuHAYABQA8yAFheBgBCrBwGAAYAPcgAYHkZAAix
chgAGAD0IAOA5WUAIMTKYQBgANCDDACWlwGAECuHAYABQA8yAFheBgBCrBwGAAYAPcgAYHkZAAix
chgAGAD0IAOA5WUAIMTKYQBgANCDDACWlwGAECuHAYABQA8yAFheBgBCrBwGAAYAPcgAYHkZAAix
chgAGAD0IAOA5WUAIMTKYQBgANCDDACWlwGAECuHAYABQA8yAFheBgBCrBwGAAYAPcgAYHkZAAix
chgAGAD0IAOA5WUAIMTKYQBgANCDDACWlwGAECuHAYAB4DsxOBihYWEIUX/Nvm9hGQAsLwMAIVYO
A8C3GACCQxETG4f4+HjExkQixFw/FjXQMM34BMRFRyAoUL0OCUOseh2rXgfL+2aH++cGBgYhNDwK
CQkJiI4IU68DNUPCIhEv3SLDDNMyM6wYrIp+gJ833Nzc4BegXpvpx9IyAFheBgBCrBwGgG8jAAQi
OCQcEeG+2LJmMWbOnIVVWw7CVxXCZrWAtWIbjshwVWjNvW80OCQUgb7OWL9gPlbttUNkdCwC3E9h
1cL5WLH5IPzUPIUEmx/2qw1GWFgInI7sxPyFC7HXzh0REaGqNR8OX9cTWLZoATbvtUewCgZfVdhD
wyPh77oH7V/9G4YvO4KYKBVOzPRnSRkALC8DACFWDgPAtxEAwhAV4YEZ/brg3c6jsXTRFLzy0rtY
ethdrftk1RqPRLQqzgmxUarfYETI/6olHRcdhWCtJR1yr1u8arlHRMbB5fAGTFu7B0mJCQhpOoyx
ZR8cqqYb6opRH/4drX78FLY6RiAhzAmDP3wLQxfsVEU6Uo3L0JJPiI1BqIwnJh6JiYkID1WFOiJK
Fedw7SpCnOoWG63+V63/sPAIeB5fi+d/9gP84b2B8IhIQkpcCJYNeUudnH+H2TscEaGGC1Pjj5Nx
J8SrsBJquCogVyTiEpGRlYgvhn6GgTO3qWWPNK6nxycDgOVlACDEymEAePwBICwqFi675+GV19rB
1i8OaefiYLtjM47ancCqmbNUa3wv1q6aieFz1iNYteoPbViM4cOHY/bGnQiMjkZooAf2rZiLkSNG
Yvbmw/AP8cLYbs/hdy+8hYkLtsBXtcgPbzQMM0sNExBlvL0QHKICQQA2LZuHzu++ijfajYZfUiw2
Tx2HzSfcER8XhTOHt2CkGm70vC/gHh6AnUsmY9SoMTh0JgAuB7dh9U57BPo7YvbIEZi7aj+CIsMR
HByBmBAnTB/cHy+/+BJm7/NBiNMO9Gr7Nt77cBSO+YeqsBAD9yM2mDJ8hJqvCdh90gORUVEIDzyL
VbMmYszYiWjX7m0MX7pbhQwGAGuUAYAQK4cB4HEHgGBExUdh5+w++KDzJASqMCCXxqNi45EUG4Ql
/dvgf1/pjFmrp6L7lCXYvXYGOnT+HFt3bULfXu2w4rAHXI+uwbyFK2CzYgZeffVT7HYNxuqJn+HV
Dv2wz85NFf+paNvROEzPtli8x1kV1TAtAMRG+mL57JnYuGMvBrV5EX1mbcGG2ROx8bgXglXR7t62
A+Zu2I8pI9pj9Ip9OLF2JP7v5fdhGxCNZf1ew9Mf9odn4BkM+rgTFmyzR5gEgJAIhHvbYvKEeZg3
oT8+HTQRC6eNxZxZs9Dh0wHY568KusNW9G7dFfNX2GDDlGF4893+sAsMw4bJ3dGm11Ts2b0VXT9+
BQPn79GugJhfd5aTAcDyMgAQYuUwAHwbASAau2b3xkvvD4N/dBzCwkIRHOCPiMhI7JszEG92n4qg
hHRkpEVi+ZDWeO7VthgzbhQ6vPMuxiw9gNAAd2xbsxazhnTHU8+8jM1OMTixZgTaj1+CS1dSsWro
R3j2FcMw7d95B6MW7kF4bJRqqRsCwLLpU7Birxt8Di3Cc399Hp927Ie9zn44tXEMnv3zy/h89AT0
7fAROg9ehogYDwzt3gerduzE+i/moXvfIVixai0Wr1kPv8g4hMozA1oAOIrRI+fB8cwhtPnzT/CP
brPh67gP7Vr3g214JHbP6ILPes1BRPplZCV5Y+RnnTF36xYM+7QNVh0NwaWLyVgzoTOGzd+BaF4B
sEoZAAixchgAHv8tgNCIGHgfW4WX//I8Zh50R1yYJ8b17IW1xzywb1ZfvNxpInyjE5GQGIkNEzri
zU+GwtbxNHarIuzobIdpvTrg87k2sLNZhKdeeBHrT0Xh6NIBeL//ZHh7+2Hx6LZ4S4Y5pYbZtg0H
7V0QqkKG6QrA4snjsWCjHVLT4rFqTGv86Pu/xfoz4XDfMwOvvtAaG4844ug+G+w4cAJRiXHYPLUz
/va3D7BHnWw3TeqD555vi5X7XBEdrVr/skxaADiMYYMmwd47ADuWTsdiGyfEnd2Jd19rBxvfaDhu
GIsP3u4JB79EhDltQ+v3O2Dr8eMY2vZ1jFhrq1r9HioUvIr+s3cihlcArFIGAEKsHAaAb+MhwGBE
Robi4LrJaPPZZ+jVpT3e6z4Rx8+6YFbf1njh9W444OqPqKgo+Lkfx9ihfdGzXz/MXLoePsH+2Lp8
It5r0xVT5y9Tw76GYUsPwffUNnR4tzWGzdgNF3c7TBjezzDMkrVw9vFHaEgIQkLDEeJ7AoM/eg/t
hy2GX3Q8ov1OYHiXnthwwhex4V5YPHM02qsW/5gpc3DMxQMRqh/3A4vQpk032Ack48zmafi47Qic
Do1FRIhhWSIiw3Byy2y88/YHmG9zGsnJSUhMiILt2sl48YWXMH7FUUTH+WH56L74pF0PdGrfE2PW
7UJ4TBxO7VqMz9q2xsDZCzGuf3t81G0EHL3DER76eL8PgAHA8jIAEGLlMAB8GwFADFEhIBxBvl7w
8PRCUGgYQoMD4acKU4DSP8Dw5H5oeATCQgLh6eEBf/m8fWiodsvAz8cLPn6BCJNh1PyGqOGD/P3g
6x+I8IjIB4YJCw25N93AwAD4+/rCVw0jn9+X4cLCDJ/TDw4JQ0R4KLw9PeDt569Nx9BdTVNNVz6v
H6L+l3lo/HFBuQrgr8bn5+er5j9Ae611k2UJUNNT45JPIGjj9vKAp7e/mscI7SOPYeHhCPT1hqeE
FDU9fzUOmWfTuB+XDACWlwGAECuHAeDbCgCiFFTVMheNn/8PNr7WLq0bNRRe1c30HQHG1zKM1r+x
+wPjMfZzb5hGav2F3O8u/ZimZxrONB6D6n3Ta+n3gfeMGocLbhwM7nW7P6xh2o2X7/70TP2bhn+c
MgBYXgYAQqwcBoBvMwDQ70oGAMvLAECIlcMAwACgBxkALC8DACFWDgMAA4AeZACwvAwAhFg5DAAM
AHqQAcDyMgAQYuUwADAA6EEGAMvLAECIlcMAwACgBxkALC8DACFWDgMAA4AeZACwvAwAhFg5DAAM
AHqQAcDyMgAQYuUwADAA6EEGAMvLAECIlcMAwACgBxkALC8DACFWDgMAA4AeZACwvAwAhFg5DAAM
AHqQAcDyMgAQYuUwADAA6EEGAMvLAECIlcMAwACgBxkALC8DACFWDgMAA4AeZACwvAwAhFg5DAAM
AHqQAcDy6iIAFJeUID4hxXi6JOTJoqioBIlJ5xgAzBQN+uTIAGB5n/gAUFVVhTK1cNnZOWhoaKD0
ifP27TJcvnIV9fX1Zg/yJ1EGAP3JAGB5n/gAUFlZqZ0s6uvrzK4ASq1dOSHqbf9mANCfDACWVxcB
QHYYcwtPKbVOTQGgpKREO869vLy0EECfXL29vREZGckAYEEZACilVqcEACn+N27c0I71hIQEJCcn
0yfYxMREZGZmatv/6tWrX9on6KPLAEAptTrlmK6urtYKgZzA5H953oc+uco2lvO5aZtLCDS3b9CH
lwGAUmqVynEthSE7Oxvp6ek4f/48fYI1beOCggIWfwvJAEAptVrl2JZPP1D9yOJvORkAKKWUUh3K
AEAppZTqUAYASimlVIcyAFBKKaU6lAGAUkop1aEMAJRSSqkOZQCglFJKdSgDAKWUUqpDGQAopZRS
HcoAQCmllOpQBgBKKaVUhzIAUEoppTqUAYBSSinVoQwAlFJKqQ5lAKCUUkp1KAMApZRSqkMZACil
lFIdygBAKaWU6lAGAEoppVSHMgBQSimlOpQBgFJKKdWhDACUUkqpDmUAoJRSSnUoAwCllFKqQxkA
KKWUUh3KAEAppZTqUAYASimlVIcyAFBKKaU6lAGAUkop1aEMAJRSSqkOZQCglFJKdSgDAKWUUqpD
GQAopZRSHcoAQCmllOpQBgBKKaVUhzIAUEoppTqUAYBSSinVoQwAlFJKqQ5lAKCUWq1ybNfV1aG+
vp7qRNne5vYF+ugyAFBKrVI5rqurq1FQUIDc3FyqE0tLS3lOt5AMAJRSq1ROXteuXdOOc9Nr+mRb
VVWlbXMpWrwS8M2VdcoAQCm1KuXkX1JSorX+y8rKkJqaivT0dPoEK9s4Oztbu+pz9epVs/sFfTQZ
ACilVqcEgOLiYk05zj09PeHn50efYL28vBAREaFte7kKYG6/oI8mAwCl1OpsHADkBCYFIigoiD7B
+vv7IyYmRjufMwBYRgYASqnVyQCgPxkALC8DAKXU6mQA0J8MAJaXAYBSanUyAOhPBgDLywBAKbU6
GQD0JwOA5WUAoJRanQwA+pMBwPIyAFBKrU4GAP3JAGB5GQAopVYnA4D+ZACwvAwAlFKrkwFAfzIA
WF4GAEqp1ckAoD8ZACwvAwCl1OpkANCfDACWlwGAUmp1MgDoTwYAy8sAQCm1OhkA9CcDgOVlAKCU
Wp0MAPqTAcDyMgBQSq1OBgD9yQBgeRkAKKVWJwOA/mQAsLwMAJRSq5MBQH8yAFheBgBKqdXJAKA/
GQAsLwMApdTqZADQnwwAlpcBgFJqdVpXAAhGcHDwl7pLt+Am3ehXywBgeRkAKKVW53ceAAKDEBoW
gejo6PtGRSIkOAiBTftVhT48PEJ778HhwxEeFvJgvw+jGjZEDWuYbiTCQr4cLv6pwSGICA9/cH6s
QAYAy8sAQCm1Or/bABCMkNBguDocw569e7BtyyZs3rINew4dh5e/eq9RYQ2PiMKhlaPwXud+sHUL
RqQq+FK8Az1sMeizdzBq2QFERkY0GvfXKMEhIgKBbqexdfNm7Nh9DO6+KhA0LeaBgQgODUeMCiXB
QYEICglT/0chRIWFQF9P2J9ygI+a12ArCgEMAJaXAYBSanV+1wEgQhXWw6tH4tk//g09h03C2IFd
8NT/vYCVtv5IToxFXFwcYmOiEBYeiSDHHXi/zbvYYh+AaNXyjoyOR3pmAlYM/QidRq5ApCrMUqxj
1TDxsTEIlWmEyOsYRISpwh0bi+iIUARqLf9I+LscxKihndF/zDh8/MJb6DN9O8Ljo7SwES/TjYpA
aGgUgtxOYOX2fYiKP4don9NYuXUnQuPSEemyG136dsfhs+FISoxHtOo/KirWMG0VCGQ6YWpcsgzx
8fFqnKq7Cg5hEdFatzi1XCFfWiePXwYAy8sAQCm1Or/rWwCh4VHwPbMevdr0hnPsNVxNj8LWNfOx
/0wQ3A5sw/z587F620EERycgwvUA2nf5BNscgpAUGwbbneuwdPkKDOv/CfrPWIfouAQEezlh9aIF
WLR6KzzDI+DnehzrV27DKRdHrFuzEjuPOSM8LBSRcbE4vGwwXms9EBFX8uB3dBsWLdyBsJR4eNjt
x8IFC7B233EVCCKwbmp7/PHltzFvnQ1Wz+2DP/7jZUxevA17tq/BrBWb4e3ljq3r12HPgePYvfUL
LN2wAx4hIYiMiMBZ+31YtGA+liz7Al+s3Axnn0C4O+xU01qAZVt2wUOugph5ruFxygBgeRkAKKVW
Z0sIAN6O69DxjY+wcu9JrF8wF/udfOGweSG6txmIeYvmo9u7rTF08UHEeNuiXedPYOMaBbsNE/HR
p70xTxXqdq1fRPdpWxEX5oEpg7tiwPjlmDC8PUas2K2GOYSPnvk/vD9sAnoMbodus7YgLjoSISoc
BJ21xZDO7+P9z4Zg81FPJJxLhfeJjejdpQemLVyMPv07YdXRM9g8qxOeee0dzFyxFUtn9cIzL72C
iYu2Y/uysXjuow5w9PDDgv4f4ffP98EyFV7avPwKJm+xR5T7AXRr+wk+n7UAnd75G55vPxZH9y5H
jw9bY/aCRRjQcTgOqGEjQpvx/MI3kAHA8jIAUEqtzpYQAPzObMYnz/wdXQYMxUcvvYUF23didNu3
MGXTWWRdzILP7oX44JNRcHY/js5d22K/iyumdGqNaRtdcTnnAnbM7IEBM7bA124VXv3zsxg2Yxmm
fN4Bb7UeheDYYIzv9AF6L9yP6Pgo+AcEaNMNDAxEeGQcYsLPYs30gXjt2TewYI8z9i7sjedebIM5
ixehz0dvoM/UvXA79gU+HTwGseevIfTkWnzUZwACErMRd9YGn3VtjxO+CXBcOQkf9JiLmMvpWDe6
A4Yv2g+/40vx7vvdYB+Thg2Tu6HbzG2I9NiLDu+9jcFjZ2OvnQdCQkO/tE4etwwAlpcBgFJqdbaE
AOBzei16ftIbzjGXEOHrDl8/J4xq8wpGLjqOjMxMOKybgHfbT4C3jz269GiPIy5nMabd6xi1zh6Z
GTFYOPhjDJxjg2A1ntee/gdmrN0Nm60bsXLTPsRE+mB0+w8wdPUJxMZGGy+3ByMqMhg7l8/EvLW2
yCm4iG1Tu6DD8KXYtexzvPRqJ2zccwAb16yEzQlP2G+bhvd6DYVXYAIcdszG21164rR3HLyObcAn
ndrhpH8i7JZNwKcDliD2UjJWqAAwZOFeJIU6Y2yfTug84HMMHTcZDt5BCPHzguMpe2xdPBLPv/Ip
NjsGICrs2w0BDACWlwGAUmp1fucPAUZH4sCK4Xj2qb9j7OqjiFSFKTomFqd2LlQt5Y8xaPAgtOnc
C4uPOMN993z89e/PYOrWU3DYPhfvffIOhsxdgKFd3scrH/eDg4cHlkwZgo69h2Ly9FnYa++KIBcb
vPvMn/Fu7wXwjYpEqPF+u3xi4MTWGfjk03cxcMgAdOvRB+ttvRDscRhD+vbAgJFjMHvhF7D3VPPp
tA2fvvEaeg7fCAeHvejZ+g10HbgCK+aOxFNPP4VJG/Zh6YCP8ZdX++GEqwMGvv8X/K3dKDic2IN+
bd5C974DMHDwYMzeuh/7tyxBx/bdMWpoL3zUfSSOeQYjPJTPAFi7DACUUqvzu74CEBwSBA+X0zhh
dwIOZ85qn62X7hGqQHs422H//v2wc/ZGpAoK3m5OOHniJE6f9UJEeBhc7I/i0MnT8PZRrXS7k/AM
CENkWACOHTqIIydOaff5A7zdYHfSDvYOzvB74AuDghGqCu9Z55M4sP8AHJ3cERYWhrCISAT4nMXB
A/vh4KK6qemEqf7cHO1xwtFNvR8BrzOncMLBBR5uLjh5Us2Piyuc1fsn7Rzh4eGO0/aGblsXjELb
3uNw/IwLDm+ehuc+fBdbT3rjrMNRHDh4BG6+Qc37/oJvKAOA5WUAoJRand91ABBDQsMQoQpr+AMP
wwWr4htu6B4WqhXu4BBDf1KQ5X35UiD5eF+oNny49pG6YPlyHtWPBASt2N97bRhH4+nKFwuFhan3
ZBqm/pWm+Qm7d39e5kXmwzB/oWq+wtX47vcXonXT5kFNTz6yGBMbA6f9qzG0bRcMGPw5+nTtj+kL
t8A3JAJRkZH3hrs3L9+iDACWlwGAUmp1toQA8KQqASbI1xPOzs5wOeuF0LBIhIaY+YbDb1kGAMvL
AEAptToZAB6nwQgJCUVoqBjSYr4tkAHA8jIAUEqtTgYA/ckAYHkZACilVicDgP5kALC8DACUUquT
AUB/MgBYXgYASqnVyQCgPxkALC8DAKXU6mQA0J8MAJaXAYBSanUyAOhPBgDLywBAKbU6GQD0JwOA
5WUAoJRanQwA+pMBwPIyAFBKrU4GAP3JAGB5GQAopVYnA4D+ZACwvAwAlFKrkwFAfzIAWF4GAEqp
1ckAoD8ZACwvAwCl1OpkANCfDACWlwGAUmp1MgDoTwYAy8sAQCm1OhkA9CcDgOVlAKCUWp0MAPqT
AcDyMgBQSq1OBgD9yQBgeRkAKKVWZ9MA4OPjg4CAAPoE6+vri6ioKAYAC8oAQCm1Ok0BQE5epaWl
CA0NRWRkJH2CDQsLQ1JSknY+v3r1qtn9gj6aDACUUqtTjmk5tnNyclBWVsZjXAeatnF+fj4KCgq4
zS0gAwCl1CqVqwBS/LOyspCenk51ounyP8/r31wGAEqp1Wo6tqurq6lOlG3Oc7plZACglFJKdSgD
AKWUUqpDGQAopZRSHcoAQCmllOpQBgBKKaVUhzIAUEoppTqUAYBSSinVoQwAlFJKqQ5lAKCUUkp1
KAMApZRSqkMZACillFIdygBAKaWU6lAGAEoppVSHMgBQSimlOpQBgFJKKdWhDACUUkqpDmUAoJRS
SnUoAwCllFKqQxkAKKWUUh3KAEAppZTqUAYASimlVIcyAFBKKaU6lAGAUkop1aEMAJRSSqkOZQCg
lFJKdSgDAKWUUqpDGQAopZRSHcoAQCmllOpQBgBKKaVUhzIAUEoppTqUAYBSSinVoQwAlFJKqQ5l
AKCUUkp1KAMApZRSqkMZACillFIdygBAKaWU6lAGAEoppVSHPvEBoKqqCnV1dVoIoJRSSqlBCQFP
dACQhSstLUVJSQmllFJKjRYXF2t1sqKiwmwd/aZ+ZwHApBR/SimllH5ZaSyXlZWZrZ/f1O88AFBK
KaX025cBgFJKKdWhDACUUkqpDmUAoJRSSnUoAwCllFKqQxkAKKWUUh3KAEAppZTqUAYASimlVIcy
AFBKKaU6lAGAUkop1aEMAJRSSqkOZQCglFJKdSgDAKWUUqpDGQAopZRSHcoAQCmllOpQBgBKKaVU
hzIAUEoppTqUAYBSSinVoQwAlFJKqQ5lAKCUUkp1KAMApZRSqkMZACillFIdygBAKaWU6lAGAEop
pVSHMgBQSimlOpQBgFJKKdWhDACUUkqpDmUAoJRSSnUoAwCllFKqQxkAKKWUUh3KAEAppZTqUAYA
SimlVIcyAFBKKaU6lAGAUkop1aEMAJRSSqkOZQCglFJKdSgDAKWUUqpDGQAopZS2GG9Ts+vlcdgi
AsDt27fNdteTsg70sB70spxfJ9fDkyW3pcHmrodSZXnZLdRU3EaF+qtnq8tvoar829mfvtMAIDtL
aWkprl69isuXL+PKlSvaXz0qy15YWPhEn0hk2YqLi5GTk6PrbS3KOpB1wcLxZJiXl6dtV73v1/n5
+c3ap6Xw3SwuxSrfXIx2zMHY01f1qUMOprlcRcLlIi0MSTAyt74s5XceAKT4FxQUoK6uTrO2tlZ3
ynKXl5drB1BRUZHZdfWkaCp8et3Woix7SUmJtr0lAJtbT9Q6lHPY9evXce3aNdy5c0fX57Dq6mot
AD1qCJBL3hIAVvrmYXVgIfLL6lBYUYeb5TpTLXNRZT28LpRjiH0OLuQVo6rc/DqzlN9pAJCToOww
DQ0NuHv3rq4Vbty4obUkysrKzK4va1ZOCDdv3tROlIK5daAnhdzcXG2bN6fFRFuGsu0kyFVVVWnb
1Ny21ouCrA85pz/KOUwu/ecUlGCow1XcbZDx6F2oIHQTx2Ou4271460F33kAkBah7DwSAvSsILcA
pCg8yQFAlk8wtw70pCBhT65+MQBYr6YAIK1fvZ/HhIqKimYFgMsFxRhzWhoHEibMj18vCtvDi3A0
igGgxWnC3HvfRIEBQD8KDADWrzUHABOWmm9BbmU2JwBcMQUANS8tPQCYMPeeJRS2hhXBNpoBwOKa
w1x/TZV5rK+vR3R0tHaf3lw/30SBAeDRle1iQl43pmm/X6VpHObee1wKDADW7+MMAE0x109zlXmV
50/kfFZTU2O2n0dVaGkB4OswN4xowtx7cXFx2nMf5t6zhAIDgAU0YXot04mPj8e8efOwYMECzYSE
hIeavqmfQYMGwcbG5oHxWkKBAeDRlG0i914XL16MlJQU7XVWVpa2fU+fPv1Q21WUYCc27W6iaXdL
KDAAWL+PKwAIsbGx985T8uyMJccv45L978MPP0Rqaqo2PXP9PYpCSwoAsowyL3I+mD9/vrYep02b
ph1z8iDyqVOnzK5T6SbnYnt7+wfel/+FmTNnauccofFwllJgAPgGmpBPGNjZ2WlPqMo0RNn47dq1
Q3BwMJKTkzF27FhtHppimqemODo6YseOHcZXBppOvzkKDACPrhTu6dOn4ze/+Y02Xll3nTp1QmBg
oPb6YfD09MTJkyeNrwzzJtvfy8sLUVFRxq6Wu1QqCgwA1u/jCACCtMzXrVun7X9+fn4YP378vfca
I9NsSuPxmDA3rLB06VLExMRo/5uGa65CS7sCIPPTrVs37fiWRsLq1atx/vx5rfbs3btXm+emyDqV
q7ymhl5TwsLCsGbNGuMry54XRIEBoJkKly5dwsaNGzFp0iQcOXLkgQAgjBkzBmlpafD398e+ffu0
nUR22D179mDq1KkIDw/XhhHkJD1x4kRtGOH48eM4evSoNnz//v21g9MS8y8wADy6gq2tLbp27Yqz
Z89q3ebMmaOdhARJ+rNmzcLcuXO1eViyZIm2X8hJb8CAAXBzc8O4cePw3nvvYcqUKdoVBNO+IuOT
4UTZ3kLT6TdXgQHA+n1cAUBCbWJiova/IEFApuHi4qKdoxwcHLSPHco8yPlJzmOyn2dnZ987z8kw
0sAxFSuZV9mXpQUr+50grWO5pC2Ym5dHUWiJtwBmz54Nb29vrdEnx7Swc+dOHDhwQCv0so5k/cl5
Q87Bsv4OHjyILVu2aLdH5EqBrPOhQ4dq61zqg5wzFi1apJ3/zV09/CYKDADNUJATu2woZ2dn7fOp
gul9mY7Yq1cv7UCYMGECzp07p/Vz4cIFuLq6auFh9OjR2rzJ/1988YV2IEo4kGElAMiOI9OZMWOG
VmAsMf8CA8CjK+zevRu+vr5YsWKFdjJbtmyZdhKSAisFPzIyUtu2Cxcu1P6XA10Kv2w/2c5ysMuw
cplVbik0HreQlJSEkSNH4syZM9rrxtNvrgIDgPX7uAJA48Is4xVkX5VbW3Jekn03IiJCKz5S+OXW
pFzKl0vcghQpaQTJuUsaLLKvyXEhrVe5smXqTw8BYPLkyVoDThpsUsgFWQ/STdafNASkHoSEhGhF
XZBbw1If5NiXhoGscznvy3JJsPrggw+QkZGhjftxnNMYAJqhIBtKEt+2bdu0jSeY3jcdSLJBBTlo
5X85CcuOu3//fm1HaNOmjdavtCzlIGqMBIuOHTtqB6A8RCM0nofmKjAAPLqCXMqT4ixfQCLbXU6G
sm3kgH7ttde0k5xcQt2+fbvWf0BAAAYOHKilf0FuEzW+3Nd43PKwj+wHsr0lPAiNp99cBQYA6/dx
BQApVHLJ2oS07KX1KS1YOb9JATKd32S/ltatNHjk6pYgrfzQ0FDtf0H+f/nll7V74VLYpHUryH1x
05UGc/PyKAotMQBI4Dedd+S2sCBX+mQ9ChKMZP1K7ZDzvyD9yzqUKwBy+0BClru7u3ZlWM4fpvUn
9UOOY8Hc9JujwADQTAVJddLikw0oLUA5MGQaouygcgVA0rJ8CYtc/pFCIJdyTJd0nn32We3ELzvE
8uXLtTQol9wE2fByH0mKAa8APLyPKwDIupcD2HRASste7Z7a9BpfAZArNkFBQV+6AiBBQVpVmzZt
go+Pj3ZFyLSvSCiQA1yu/siJQDA3D81RYACwfh9XAJBWuhR2OV6kpSmFXa5SyuV+KfwvvPCCtr/K
NKWQSUiVfvv27atdxWp8BUBuGzS+AiDnMxm/nBeHDx+uXT0TzM3Loyi0tAAgx+3nn3+uNQYaI1dP
pKEg8ytX9yRAyblh2LBhWv2Q58NkuIsXL2rrVmqBXBmWuiCNDTkvyLD9+vWz2EOUJgUGgG+gCdnB
JUWb7tEIcrlLNrjcY5MCYNoxJNnJfSApBFIgTA+FyUEliVmeF5D5lCQo70ui5jMAD+/jCACy3uUA
l4NRWjKCbGsp2BLMBNMzAKJcIWj6DIC0qOSEKQFi/fr12ryaxi8nXAmJJhpP+5sqMABYv48jAMh4
BGlpyjlKzlUSAgR5YFUaJWvXrtUKvOz/cj6TfVeuTsrtTyleghR7ufIlD70JMq/SwpXL/7LvSTGT
gif3w2Wa33T+hZYUAGR5pL6MGjUKhw8f1ubPxKFDh7R1JYVf1oFc3pdu8r+cM5ycnLRwJM8OyF+5
IiOBS84vsu7l9oEMK+OQxqGltr0oMABYQBPyv0xDvqVKLoHJJWFTUZADTFK1HEBNaTwOoelrE6bp
fRMFBoBHU7apXL6Xk5q0gmQ7yj052b5S5FetWqVN61Exjd9E42laSoEBwPq1dACQcUgBlX1Zzk2m
85SEAPlruhJlQoYxR9Pu5vqTaZkwTf+bKLSUACDLJsonKeR8YDrPm2z8gGVTGq+XpnzVe+bmobkK
DACPQUlvUmSlVddUSX3mhvm2FBgAHl0Zr7ntKX7X2/SfKTAAWL+WDgCiFHlz+7McP6armS1RoaXd
ApBzgLl1KVf9vq2686gKDACPyX+Guf6/LQUGgEf36zA3TEtQYACwfh9HAJDxfBXm+m8pCi0tAHwV
LbX4iwIDgM4UGAD0o8AAYP0+jgBgrQotLQBYo8I2PQUAwdyK0JOCBAD5LDoDwJOvwABg/ZoCgHxE
jwHA8GuAsj6aEwBGSwAQGACwRQWAQ5HXgSc5AMhHsGRnkdSod2TDy2dU5f7Uk1gQZJnkfpyptaR3
5D6vtJTkI6gMANarFDo5biW8E2iB9lGvYpapmlGsasHIUzkIuFRhHJN+KalqwDinXIRk3kRt5eM9
N3ynAUBOfHLgyJcyZGZmah+70quy/HLgPMnFQE4KcoIwLW/TdaAnZfnlY4ks/tatbD+5kilfJMN9
OlML+ObW09dZXXEbURcLMcbhEuaeuYiFrpewwPWi7lyoHHoiC3vDr+OOWie3zawrS/qdBgBRDiBp
Bcmlbz2rl0vBsoxyK8DcOtCTT+qVHj0q21GuZkqAN7et9aLc0pL10Nz9uka1dq/kF8E3JVe/Juci
4VKBFogetZY2x+88AIiyw0jrUO+aWzdPotzeZdo6MLduqHXKfdqguXXzKFaW31ZBoEzXasXfzLp5
HLaIAEAppZTSb1cGAEoppVSHMgBQSimlOpQBgFJKKdWhDACUUkqpDmUAoJRSSnUoAwCllFKqQxkA
KKWUUh1q0QBQrAJAWZlhpJRSSiltuUq9tlgAuKiGlpFRSimltOWbkWeo3984AEiKSJMkQSmllNIW
rdTre/W7OQEgXQUAGZBSSiml1mmaMu9hA8C8efPjqu4C18uVaiBKKaWUWqdS/KsAOLt6fH0AGDFi
ZJKTi7tKC2e0xEAppZRS69XZ1R0rVq7++gBACCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEII0TGtWv1/yv1T0LO0pCcAAAAASUVORK5CYII=</Preview>
  <Form>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
/T/ShIfhIHsAAA==</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabSelectMod)
	{
		#TODO: Enter Validation Code here for Step 1
		if($lblModName.Text)
		{
			return $true 
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabLaunch)
	{
		#TODO: Enter Validation Code here for Step 2

		
		
		if ($lblModName.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabAddons)
	{
		#TODO: Enter Validation Code here for Step 3

			return $true
		
	}
	elseif ($tabPage -eq $tabModSettings)
	{
		
		if ($txtScriptsFolder.Text)
		{
			return $true
		}
		
		return $false
		
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$frmWizard_Load={
	Update-NavButtons
	Update-Wizard

	
	
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	
	Update-NavButtons
}

$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$textboxName_TextChanged={
	Update-NavButtons
}




$tabSelectMod_Click={
	#TODO: Place custom script here
	
}

$btnLaunch_Click={
	#TODO: Place custom script here
	Start-kServer
	Start-Sleep -Seconds 5
	Start-kMPGame
}

$btnKill_Click={
	#TODO: Place custom script here
	Stop-kDayz
}

$buttonSelectAdditionalMods_Click={
	#TODO: Place custom script here
	$FolderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog;
	$FolderBrowser.RootFolder = "Desktop";
	
	$Results = $FolderBrowser.ShowDialog();
	
	if ($Results -eq "OK")
	{
		$location = $FolderBrowser.SelectedPath.ToString();
		$txtAdditionalMods.Text = $location;
		Update-NavButtons
	}
}

$buttonBrowseFolder_Click={
	if($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
	}
}

$buttonBrowseFolder_Click2={
	if($folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowsermoderndialog1.SelectedPath
	}
}

$btnSettings_Click={
	#TODO: Place custom script here
	Show-GlobalSettings_psf
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$listSelectAdditionalMods_SelectedIndexChanged={
	#TODO: Place custom script here
	$selectedmod = $listSelectAdditionalMods.Items.Item($listSelectAdditionalMods.SelectedIndex)
	Update-ListBox $listAdditionalMods  $selectedmod -Append
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
	
}

function Initialize-Listbox
{
	[CmdletBinding()]
	param ()
	
	#TODO: Place script here
	$mods = Read-ModParam -key "AdditionalMPMods"
	
	if ($mods)
	{
		$modlist = $Mods.Split(';')
		
		foreach ($mod in $modlist)
		{
			Update-ListBox $listAdditionalMods  $mod -Append
		}
		
	}
	
}



function Convert-ListboxCollection
{
	[CmdletBinding()]
	[OutputType([string])]
	param ()
	
	$addonresult = ""
	#TODO: Place script here
	foreach ($mod in $listAdditionalMods.Items)
	{
		$addonresult = $addonresult +  $mod + ';'
		
	}
	if ($addonresult)
	{
		$addonresult = $addonresult.TrimEnd(';')
	}
	Else
	{
		$addonresult = ""
	}
	
	return $addonresult
}



$listAdditionalMods_Click={
	#TODO: Place custom script here
	$selindex = $listAdditionalMods.SelectedIndex
	$item = $listAdditionalMods.Items.Item($selindex)
	$listAdditionalMods.Items.Remove($item)
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
}

$buttonLaunchWorkbench_Click={
	#TODO: Place custom script here
	Start-kWorkbench
}

$btnLaunchServerGame_Click={
	#TODO: Place custom script here
	Stop-kDayz
	Start-kServer
	Start-Sleep -Seconds 10
	Start-kMPGame
	
}

$listSelectMod_SelectedIndexChanged= {
	#TODO: Place custom script here
	$modname = $listSelectMod.Items.Item($listSelectMod.SelectedIndex)
	$lblModName.Text = $modname
	$curmodfolder = Read-GlobalParam -key "ModSourceFolder"
	$curmodfolder = Add-Folder -Source $curmodfolder -Folder $modname
	Write-GlobalParam -key "CurrentModFolder" -value $curmodfolder
	Write-ModParam -key "ModName" -value $modname
	
	# initialize elements that require a modname
	Initialize-Listbox
	
	
	$modscriptsfolder = Read-ModParam -key "ScriptsFolder"
	if (-not $modscriptsfolder)
	{
		if (Assert-ModScriptsFolder -outpath ([ref]$modscriptsfolder))
		{
			$txtScriptsFolder.Text = $modscriptsfolder
			Write-ModParam -key "ScriptsFolder" -value $modscriptsfolder
		}
	}
	else
	{
		$txtScriptsFolder.Text = $modscriptsfolder
	}
	
	
	Update-NavButtons
}


$btnLinkMods_Click={
	#TODO: Place custom script here
	Link-Scripts
	Link-Source
	Link-Packed
	Link-Workbench
}
<#
	.SYNOPSIS
		Set folder to folder define in settings
	
	.DESCRIPTION
		A detailed description of the Set-Folder function.
	
	.PARAMETER folder
		A description of the folder parameter.
	
	.EXAMPLE
				PS C:\> Set-Folder -folder 'Value1'
	
	.NOTES
		Additional information about the function.
#>



$buttonBuild_Click={
	#TODO: Place custom script here
	
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	Start-Build $buildmethod
}

$btnWorkbenchCommandline_Click={
	Set-PopupMessage -Message (Start-kWorkbench -Commandline)
	Show-messageform_psf
}

$btnServerCommandline_Click={
	#TODO: Place custom script here
	$newline = "`n"
	$servergamecommandline = "SERVER`n" + (Start-kServer -CommandLine)
	$servergamecommandline += "`n`n"
	$servergamecommandline += "GAME`n" + (Start-kMPGame -CommandLine)
	Set-PopupMessage -Message $servergamecommandline
	Show-messageform_psf
}

$buttonBuildSettings_Click={
	#TODO: Place custom script here
	Show-BuildSettings_psf
}

$btnScriptsFolder_Click = {
	$folderbrowserdialog1.SelectedPath = Read-GlobalParam -key "CurrentModFolder"

	$testpath = ""

	if ($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		
		Write-ModParam -key "ScriptsFolder" -value $folderbrowserdialog1.SelectedPath
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
		Update-NavButtons
	}
	
	
}
$txtScriptsFolder_TextChanged = {
	#TODO: Place custom script here
	Write-ModParam -key "ScriptsFolder" -value $txtScriptsFolder.Text

}


$lblModName_Click={
	#TODO: Place custom script here
	
}

$btnBuildCommandLine_Click={
	#TODO: Place custom script here
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	Set-PopupMessage  -Message (Start-Build -BuildMethod $buildmethod  -Commandline)
	Show-messageform_psf
}

$buttonSetupWizard_Click={
	#TODO: Place custom script here
	Show-SetupWizard_psf
}

$labelPboname_Click={
	#TODO: Place custom script here
	
}

$textpboname_TextChanged={
	#TODO: Place custom script here
	Write-ModParam -key "PboName" -value $textpboname.Text
	
}

$listAdditionalMods_SelectedIndexChanged={
	#TODO: Place custom script here
	
}

$buttonHelpScriptsFolder_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "This is the subfolder that contains your mods scripts. It is generally just called scripts. Kommander will autofill this field if you use the standard setup" -Title "Help"
	Show-messageform_psf
}

$buttonlinkmods_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "If Kommander is running as administrator, this will link your mods. Otherwise you can use the provided linkall bat file" -Title "Help"
	Show-messageform_psf
}

$buttonkillall_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "Kill all running instances of dayz. " -Title "Help"
	Show-messageform_psf
}

$buttonhelpadditionmods_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "Select the mods that you want to load with your mod.  Click on left panel to select a mod. Click on right panel to deselect a mod`n'link to workbench' will add a symbolic link to dayz\addons." -Title "Help"
	Show-messageform_psf
}


$buttonMountP_Click={
	#TODO: Place custom script here
	Mount-Pdrive
}

$buttonLinkToDayzAddons_Click={
	#TODO: Place custom script here
	Link-Addons
}



$btnCreateNewMod_Click={
	#TODO: Place custom script here
	Show-CreateMod_psf
}

$tabSelectMod_Enter={
	#TODO: Place custom script here
	Update-Wizard
}

function Update-Wizard
{
	[CmdletBinding()]
	param ()
	
	$workshop = Read-GlobalParam -key GameFolder
	$workshop += "\!Workshop"
	$modsource = Read-GlobalParam -key ModSourceFolder
	Update-ListBox $listSelectAdditionalMods (Get-ChildItem -Path "$workshop" -Directory)
	Update-ListBox $listSelectMod (Get-ChildItem -Path "$modsource" -Directory)

	$buildmethod = Read-GlobalParam -key "BuildMethod"
	if ($buildmethod -eq "Mikero")
	{
		$labelPboname.Visible = $true
		$textpboname.Visible = $true
	}

}


$buttonBrowse_Click={
	
	Show-DisplayLogs_psf
	
}

$buttonBrowse2_Click={

	if($openfiledialog2.ShowDialog() -eq 'OK')
	{
		$textboxFile.Text = $openfiledialog2.FileName
	}
}

$formSplashScreen_Load = {
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
	
	$paramShowSplashScreen = @{
		Image = $pictureboxSplashScreenHidden.Image
		Title = 'Loading...'
		PassThru = $false
	}
	
	Show-SplashScreen @paramShowSplashScreen
	
	#TODO: Place initialization script here:
	
}
#Append the event to the form
#  $frmWizard.add_Load($formSplashScreen_Load)


#region Splash Screen Helper Function
function Show-SplashScreen
{
	<#
	.SYNOPSIS
		Displays a splash screen using the specified image.
	
	.PARAMETER Image
		Mandatory Image object that is displayed in the splash screen.
	
	.PARAMETER Title
		(Optional) Sets a title for the splash screen window. 
	
	.PARAMETER Timeout
		The amount of seconds before the splash screen is closed.
		Set to 0 to leave the splash screen open indefinitely.
		Default: 2
	
	.PARAMETER ImageLocation
		The file path or url to the image.

	.PARAMETER PassThru
		Returns the splash screen form control. Use to manually close the form.
	
	.PARAMETER Modal
		The splash screen will hold up the pipeline until it closes.

	.EXAMPLE
		PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
				#close the splash screen
				$splashScreen.Close()
	.OUTPUTS
		System.Windows.Forms.Form
	
	.NOTES
		Created by SAPIEN Technologies, Inc.

		The size of the splash screen is dependent on the image.
		The required assemblies to use this function outside of a WinForms script:
		Add-Type -AssemblyName System.Windows.Forms
		Add-Type -AssemblyName System.Drawing
#>
	[OutputType([System.Windows.Forms.Form])]
	param
	(
		[Parameter(ParameterSetName = 'Image',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNull()]
		[System.Drawing.Image]$Image,
		[Parameter(Mandatory = $false)]
		[string]$Title,
		[int]$Timeout = 1,
		[Parameter(ParameterSetName = 'ImageLocation',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNullOrEmpty()]
		[string]$ImageLocation,
		[switch]$PassThru,
		[switch]$Modal
	)
	
	#Create a splash screen form to display the image.
	$splashForm = New-Object System.Windows.Forms.Form
	
	#Create a picture box for the image
	$pict = New-Object System.Windows.Forms.PictureBox
	
	if ($Image)
	{
		$pict.Image = $Image;
	}
	else
	{
		$pict.Load($ImageLocation)
	}
	
	$pict.AutoSize = $true
	$pict.Dock = 'Fill'
	$splashForm.Controls.Add($pict)
	
	#Display a title if defined.
	if ($Title)
	{
		$splashForm.Text = $Title
		$splashForm.FormBorderStyle = 'FixedDialog'
	}
	else
	{
		$splashForm.FormBorderStyle = 'None'
	}
	
	#Set a timer
	if ($Timeout -gt 0)
	{
		$timer = New-Object System.Windows.Forms.Timer
		$timer.Interval = $Timeout * 1000
		$timer.Tag = $splashForm
		$timer.add_Tick({
				$this.Tag.Close();
				$this.Stop()
			})
		$timer.Start()
	}
	
	#Show the form
	$splashForm.AutoSize = $true
	$splashForm.AutoSizeMode = 'GrowAndShrink'
	$splashForm.ControlBox = $false
	$splashForm.StartPosition = 'CenterScreen'
	$splashForm.TopMost = $true
	
	if ($Modal) { $splashForm.ShowDialog() }
	else { $splashForm.Show() }
	
	if ($PassThru)
	{
		return $splashForm
	}
}
#endregion

$frmWizard_MouseMove=[System.Windows.Forms.MouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	#TODO: Place custom script here

}

$frmWizard_Enter={
	#TODO: Place custom script here

}

$frmWizard_MouseEnter={
	#TODO: Place custom script here

}

$listSelectMod_MouseEnter={
	#TODO: Place custom script here
	Update-NavButtons
	Update-Wizard
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">133</Line>
    <Line Disabled="True">440</Line>
    <Line Disabled="False">481</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>