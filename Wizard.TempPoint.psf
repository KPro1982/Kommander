<File version="3.2">
  <FileID>fb15099b-6511-42ea-a001-83430d32c4ab</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAF02SURBVHhe7d1ncBxnnib4jZmI3Yj9cHEbF3Ef
LuIiZrZvt6enW90tqVvdklotiaIkUo4SvafoSdAb0DvRiZ6i9wa0oAUIS3jvvffee+8LeO79Z6HI
AlgkQRAUAebzzPyahaqsqsysrHyfzCpA/4VhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZh
GIZhGEZ3ufyv//Iv4f/fb34TvmzZ8vD16zeGr127noiIiIaMDeEbN24K//brr8L/23/9r+FqbBfP
zr/8y78kjRgxAudtbiIsMQep+dVIzq0kIiKiISIlr0qphE9wFFasWIH/8T/+T3QP80/Pb/7nv4Wf
u3QdMdmV8I3NgVdUBryJiIhoSJHxOzSlBGGx6Rg1atTzC8CyJcvDwxJy4B+XC7+YLCIiIhqifKMz
EasO6K9ev/X8ArBxw6bwrOJ6+MRkwy+WiIho6PIfQEPtMYWvKgEJeTW4defB8wvAhvUbwjOLatUd
cxAQR0RENDQFJeQiODFfyXtpQYo8ZmB8rnpc9fMAGdj5zH/0mCZSCBJVAbh56/7zC8B6KQDFddpH
ALKgREREQ40M2J5habj+IBBX7vvjql1A/6j7XrnvBwfvGG2Q9Y5Iwz33YNx7GIh7bv0k91VcA2ON
8xmaiuv2AzGf/nDyjdNKgGk9SAlIyq/tewHIUgUgIN5yWyEiIhrsQpILtAHxoX8c/KLS4asG7v4K
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
BqUYvxQoxaK6NBEuTi5IL6xAcpgPEtXKRmcDQtw9EJNTp030tN8EYAEgItIvFoBHjF/KsxTTNL3z
vF8DlDx6/O6fn5eKcFtMH/k5tl5wRoX2WUT30Xvvp3rKPEnMp330/BawABAR6RcLwCDT0VKL9KRE
lNdrf1nf4jQDhQWAiEi/WAAGGfMDfUu3DxT51cDXUQDKy8tZAIiIBgFdFYCmpibk5eVpA5DeI+tE
1kVLS8sTBUDWm9zW0SFfIBy4FBcXo6qqigWAiGgQ0E0BEHJZjkBzc3NRWlqqWyUlJcjJydEGY/P1
8yrXk5xtkLMvvZ+LiIheD90VADmqlcEtKysL2dnZumNabnnhZV2YbwzmBnI9yWPI4N/a2mqxcBAR
0a9PVwXARE5Ba/8xGx171uBvMpDrSb4HYOk5iIjo9dBlASAiItI7FgAiIiIdYgEgIiLSIRYAIiIi
HWIBICIi0iEWACIiIh1iASAiItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIBICIi0iEWACIiIh1iASAi
ItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAiIiIdYgEgIiLSIRYA
IiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIBICIi0iEWACIiIh1i
ASAiItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAiIiIdYgEgIiLS
IRYAIiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIBICIi0iEWACIi
Ih1iASAiItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAiIiIdYgEg
IiLSIRYAIiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIBICIi0iEW
ACIiIh1iASAiItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAiIiId
YgEgIiLSIRYAIiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIBICIi
0iEWACIiIh1iASAiItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAi
IiIdYgEgIiLSIRYAIiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAiIiIdYgEgIiLSIRYAIiIiHWIB
ICIi0iEWACIiIh1iASAiItIhFgAiIiIdeqMLQEtLCzo6OrQSQERERI+9sQWgvLxcu9zQ0KAtIBER
ET0m46T823sMHQivrQCImpoaVFVVERERkQUyTspBsqUx9GW91gIgZwGIiIjo6SyNnwPhtRYAIiIi
ej1YAIiIiHSIBYCIiEiHWACIiIh0iAWAiIhIh1gAiIiIdIgFgIiISIdYAIiIiHSIBYCIiEiHWACI
iIh0iAWAiIhIh1gAiIiIdIgFgIiISIdYAIiIiHSIBYCIiEiHWACIiIh0iAWAiIhIh1gAiIiIdIgF
gIiISIdYAIiIiHSIBYCIiEiHWACIiIh0iAWAiIhIh1gAiIiIdIgFgIiISIdYAIiIiHSIBYCIiEiH
WACIiIh0iAWAiIhIh1gAiIiIdIgFgIiISIdYAIiIiHSIBYCIiEiHWACIiIh0iAWAiIhIh1gAiIiI
dIgFgIiISIcGRQGoq6tDfX29rsk6sLRu3lR8zY309rq/ybhNv/z2zHVo9GvtF157AaipqUFhYSFy
cnKQm5ur/atHsg4srZ83kWzcJSUl2nLr+TXPz89HdXX1r/Zmp1dH9mMFBQUWX2c9eZn9mLwPysrK
tH2CnvcLeXl5qKys/FX2C6+1AMgCyk5QBoOWlhZNc3Oz7shyyzqQdfGmDwayfKZlbWpq0vVrLm9y
ecPL4GFpXdHQ0Hs/Zun11oOX2Y/J9OXl5drA39DQoOv9gqwP2S/8GiXgtRUAWTBZQHnBOzs7Ienq
6tIliawDWRe/VvN7XWTZZONubW3VltvS+tADU4qKirSd5pv8mr/JzPdjpte192utFxLTfqyqquqF
tmk57S33k/tILD2+XkgqKiq0M0qyXiytr4Hy2guAtEWJbDh6JpF18aYXACEFoL29XdvYLa0LvZDI
Kc/i4uJX/kanV4P7sZ4k/dmPmQpAY2Oj9hiWHlsvJHJWUNYjC8AgYmpnr2LgkrAA6IuktLSUBWAI
G+oFwBRLt/WH5E0vAKZYum0gSOS7QSwAr4ClWJrOEvmMJjMzEx0dHRZvfxkSFoD+M0Uum4qapPd0
z/JrFxIJC8DQ9ir3Y+bbseRVbJ+m0/WWbusPyWArAJZiuv5Z6/Rpt8sXHeV92/v6gSJhARgApph+
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
0zlyVCfksmwc8tmxeXo/hqT3zxLTdC9L0p83zlA0kAVAHkPezLLTkzeyvJbyuspRv1wnJU/eRBKZ
3jy9fzaP6fFNMf08kCQsAEPbq9iPyTYtA498+VTI9izbsTB9ic0U0/Smy6aYXzbF0nSmyHUDQTKY
CoAcvZvWo+wbTOR0vul5TDFdNt3fPOY/P219DxQJC8ArIP+hBfkWZ2/SouW0jrywJub3M//ZfJre
070MCQtA/8j66v16mv8sR/fmr1dfLv8aJCwAQ9ur2o/J6fne27H8LNebtlPzbdV02dL15j/3vs7S
7S9DMlgKgJCztubrz0Ted6Zl781036fd9rTLA0XCAvAKyAv1rFi6z69FwgLQP8/LQL9BB4qEBWBo
e1X7sWfF0vSDhWQwFYBnxdL0g4GEBUBnJCwA+iJhARjauB/rSTKYCsBQJGEB0BmJngqA6Y+VWFoX
eiGRAiBfVmUBGJq4H+tJ8jIFQL6wK7H02HohkS9tym9uvLEFQMhCyrfo5e8x6z3y/QQZGKX5WVpX
bwrZKcgb3fStZD1HfvVK3uTyh4fe9NL3JpP3rOzH5D2s9/R3PyYDnXxJW77jwBh/g+3XODP4WguA
7PTkBZc/eiHkTSS/b6knpmU2fcHnTR8IZPnk6MD0mvdeH3oir7m80Tn4D22m/Zh80UxeVz3ux0xk
HfRnPybTy0GBlAfTetQr2S/IgcGvsV94rQVAyELKEZAssJ7p6ShQllP+1Kal9aAn8psnennN33Tc
jxm9zH5M7iclQM4EWHpsvZA/VGZaH73X0UB77QVAyILKH6XQs1/jxR5M+Jo38HP/Nwy36Zffj8n9
5X1h6bH14tfcLwyKAkBERES/LhYAIiIiHWIBICIi0iEWACIiIh1iASAiItIhFgAiIiIdYgEgIiLS
IRYAIiIiHRrQAlClCkB9vfFBiYiIaPCS8XrACkCWeiB5MCIiIhr80oqMg/9LF4Bk1SKkSRAREdHg
92j87k8BSFYFwNQeiIiIaOhJUor6WgDWr98Q2dwFFDco6k5EREQ0NMng3wzAzsHl+QVg9uw5sfcf
OMP2tp3WGIiIiGjosnNwxs5dPz+/ADAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
wzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAMwzAM
w7xB+S//5f8HTWKbfiQZXTIAAAAASUVORK5CYII=</Preview>
  <Form>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
/wORTGG5GbAAAA==</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabSelectMod)
	{
		#TODO: Enter Validation Code here for Step 1
		if($lblModName.Text)
		{
			return $true 
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabLaunch)
	{
		#TODO: Enter Validation Code here for Step 2

		
		
		if ($lblModName.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabAddons)
	{
		#TODO: Enter Validation Code here for Step 3

			return $true
		
	}
	elseif ($tabPage -eq $tabModSettings)
	{
		Initialize-ModSettingsTab
		if ($txtScriptsFolder.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabhelp)
	{
		
	
			return $true

		
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$frmWizard_Load={
	Update-NavButtons
	Update-Wizard

	$buttonCreateUIFromLayout.Enabled = $true
	
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	

	
	Update-NavButtons
}

function Initialize-ModSettingsTab
{
	[CmdletBinding()]
	param ()
	
	$layoutf = ""
	Assert-ModLayoutFolder -outpath ([ref]$layoutf)
	if ($layoutf)
	{
		$textLayoutFolder.Text = $layoutf
		Write-ModParam -key "LayoutFolder" -value $layoutf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		$textLayoutFolder.Text = $modfolder
	}
	
	$inputsf = ""
	Assert-ModInputsFolder -outpath ([ref]$inputsf)
	if ($inputsf)
	{
		$textInputsFolder.Text = $inputsf
		Write-ModParam -key "InputsFolder" -value $inputsf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		$textLayoutFolder.Text = $modfolder
	}
}


$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$textboxName_TextChanged={
	Update-NavButtons
}




$tabSelectMod_Click={
	
	
}

$btnLaunch_Click={
	
	Start-kServer
	Start-Sleep -Seconds 5
	Start-kMPGame
}

$btnKill_Click={
	
	Stop-kDayz
}

$buttonSelectAdditionalMods_Click={
	
	$FolderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog;
	$FolderBrowser.RootFolder = "Desktop";
	
	$Results = $FolderBrowser.ShowDialog();
	
	if ($Results -eq "OK")
	{
		$location = $FolderBrowser.SelectedPath.ToString();
		$txtAdditionalMods.Text = $location;
		Update-NavButtons
	}
}

$buttonBrowseFolder_Click={
	if($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
	}
}

$buttonBrowseFolder_Click2={
	if($folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowsermoderndialog1.SelectedPath
	}
}

$btnSettings_Click={
	
	Show-GlobalSettings_psf
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$listSelectAdditionalMods_SelectedIndexChanged={
	
	$selectedmod = $listSelectAdditionalMods.Items.Item($listSelectAdditionalMods.SelectedIndex)
	Update-ListBox $listAdditionalMods  $selectedmod -Append
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
	
}

function Initialize-Listbox
{
	[CmdletBinding()]
	param ()
	
	#TODO: Place script here
	$mods = Read-ModParam -key "AdditionalMPMods"
	
	if ($mods)
	{
		$modlist = $Mods.Split(';')
		
		foreach ($mod in $modlist)
		{
			Update-ListBox $listAdditionalMods  $mod -Append
		}
		
	}
	
}



function Convert-ListboxCollection
{
	[CmdletBinding()]
	[OutputType([string])]
	param ()
	
	$addonresult = ""
	#TODO: Place script here
	foreach ($mod in $listAdditionalMods.Items)
	{
		$addonresult = $addonresult +  $mod + ';'
		
	}
	if ($addonresult)
	{
		$addonresult = $addonresult.TrimEnd(';')
	}
	Else
	{
		$addonresult = ""
	}
	
	return $addonresult
}



$listAdditionalMods_Click={
	
	$selindex = $listAdditionalMods.SelectedIndex
	$item = $listAdditionalMods.Items.Item($selindex)
	$listAdditionalMods.Items.Remove($item)
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
}

$buttonLaunchWorkbench_Click={
	
	Start-kWorkbench
}

$btnLaunchServerGame_Click={
	
	Stop-kDayz
	Start-kServer
	Start-Sleep -Seconds 10
	Start-kMPGame
	
}

$listSelectMod_SelectedIndexChanged= {
	
	$modname = $listSelectMod.Items.Item($listSelectMod.SelectedIndex)
	$lblModName.Text = $modname
	$curmodfolder = Read-GlobalParam -key "ModSourceFolder"
	$curmodfolder = Add-Folder -Source $curmodfolder -Folder $modname
	Write-GlobalParam -key "CurrentModFolder" -value $curmodfolder
	Write-ModParam -key "ModName" -value $modname
	
	# initialize elements that require a modname
	Initialize-Listbox
	
	
	$modscriptsfolder = Read-ModParam -key "ScriptsFolder"
	if (-not $modscriptsfolder)
	{
		if (Assert-ModScriptsFolder -outpath ([ref]$modscriptsfolder))
		{
			$txtScriptsFolder.Text = $modscriptsfolder
			Write-ModParam -key "ScriptsFolder" -value $modscriptsfolder
		}
	}
	else
	{
		$txtScriptsFolder.Text = $modscriptsfolder
	}
	
	
	Update-NavButtons
}


$btnLinkMods_Click={
	
	Link-Scripts
	Link-Source
	Link-Packed
	Link-Workbench
}
<#
	.SYNOPSIS
		Set folder to folder define in settings
	
	.DESCRIPTION
		A detailed description of the Set-Folder function.
	
	.PARAMETER folder
		A description of the folder parameter.
	
	.EXAMPLE
				PS C:\> Set-Folder -folder 'Value1'
	
	.NOTES
		Additional information about the function.
#>



$buttonBuild_Click={
	
	
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	Reset-BuildSuccess
	Start-Build $buildmethod
	
}




$btnWorkbenchCommandline_Click = {
	$wbcommandline = Start-kWorkbench -Commandline
	Set-PopupMessage -Message $wbcommandline -Title "Workbench Commandline"
	Show-messageform_psf
}

$btnBuildCommandLine_Click = {
	
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	$buildm = ""
	$buildm = Start-Build -BuildMethod $buildmethod -Commandline
	Set-PopupMessage -Message "$buildm" -Title "Build Commandline"
	Show-messageform_psf
}


$btnServerCommandline_Click={
	
	$newline = "`n"
	$servergamecommandline = "SERVER`n" + (Start-kServer -CommandLine)
	$servergamecommandline += "`n`n"
	$servergamecommandline += "GAME`n" + (Start-kMPGame -CommandLine)
	Set-PopupMessage -Message $servergamecommandline -Title "Server + Build Commandlines"
	Show-messageform_psf
}

$buttonBuildSettings_Click={
	
	Show-BuildSettings_psf
}

$btnScriptsFolder_Click = {
	$folderbrowserdialog1.SelectedPath = Read-GlobalParam -key "CurrentModFolder"

	$testpath = ""

	if ($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		
		Write-ModParam -key "ScriptsFolder" -value $folderbrowserdialog1.SelectedPath
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
		Update-NavButtons
	}
	
	
}
$txtScriptsFolder_TextChanged = {
	
	Write-ModParam -key "ScriptsFolder" -value $txtScriptsFolder.Text

}


$lblModName_Click={
	
	
}



$buttonSetupWizard_Click={
	
	Show-SetupWizard_psf
}

$labelPboname_Click={
	
	
}

$textpboname_TextChanged={
	
	Write-ModParam -key "PboName" -value $textpboname.Text
	
}

$listAdditionalMods_SelectedIndexChanged={
	
	
}

$buttonHelpScriptsFolder_Click={
	
	Set-PopupMessage -Message "This is the subfolder that contains your mods scripts. It is generally just called scripts. Kommander will autofill this field if you use the standard setup" -Title "Help"
	Show-messageform_psf
}

$buttonlinkmods_Click={
	
	Set-PopupMessage -Message "If Kommander is running as administrator, this will link your mods. Otherwise you can use the provided linkall bat file" -Title "Help"
	Show-messageform_psf
}

$buttonkillall_Click={
	
	Set-PopupMessage -Message "Kill all running instances of dayz. " -Title "Help"
	Show-messageform_psf
}

$buttonhelpadditionmods_Click={
	
	Set-PopupMessage -Message "Select the mods that you want to load with your mod.  Click on left panel to select a mod. Click on right panel to deselect a mod`n'link to workbench' will add a symbolic link to dayz\addons." -Title "Help"
	Show-messageform_psf
}


$buttonMountP_Click={
	
	Mount-Pdrive
}

$buttonLinkToDayzAddons_Click={
	
	Link-Addons
}



$btnCreateNewMod_Click={
	
	Show-CreateMod_psf
	Update-NavButtons
	Update-Wizard
	
}

$tabSelectMod_Enter={
	
	Update-Wizard
}

function Update-Wizard
{
	[CmdletBinding()]
	param ()
	
	$workshop = Read-GlobalParam -key GameFolder
	$workshop += "\!Workshop"
	$modsource = Read-GlobalParam -key ModSourceFolder
	Update-ListBox $listSelectAdditionalMods (Get-ChildItem -Path "$workshop" -Directory)
	Update-ListBox $listSelectMod (Get-ChildItem -Path "$modsource" -Directory)

	$buildmethod = Read-GlobalParam -key "BuildMethod"
	if ($buildmethod -eq "Mikero")
	{
		$labelPboname.Visible = $true
		$textpboname.Visible = $true
	}
	Reset-BuildSuccess
	
}


$buttonBrowse_Click={
	
	Write-ScratchParam -key "DefaultLogFile" -value "None"
	Show-DisplayLogs_psf
	
}

$buttonBrowse2_Click={

	if($openfiledialog2.ShowDialog() -eq 'OK')
	{
		$textboxFile.Text = $openfiledialog2.FileName
	}
}

$formSplashScreen_Load = {
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
	
	$paramShowSplashScreen = @{
		Image = $pictureboxSplashScreenHidden.Image
		Title = 'Loading...'
		PassThru = $false
	}
	
	Show-SplashScreen @paramShowSplashScreen
	
	#TODO: Place initialization script here:
	
}
#Append the event to the form
#  $frmWizard.add_Load($formSplashScreen_Load)


#region Splash Screen Helper Function
function Show-SplashScreen
{
	<#
	.SYNOPSIS
		Displays a splash screen using the specified image.
	
	.PARAMETER Image
		Mandatory Image object that is displayed in the splash screen.
	
	.PARAMETER Title
		(Optional) Sets a title for the splash screen window. 
	
	.PARAMETER Timeout
		The amount of seconds before the splash screen is closed.
		Set to 0 to leave the splash screen open indefinitely.
		Default: 2
	
	.PARAMETER ImageLocation
		The file path or url to the image.

	.PARAMETER PassThru
		Returns the splash screen form control. Use to manually close the form.
	
	.PARAMETER Modal
		The splash screen will hold up the pipeline until it closes.

	.EXAMPLE
		PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
				#close the splash screen
				$splashScreen.Close()
	.OUTPUTS
		System.Windows.Forms.Form
	
	.NOTES
		Created by SAPIEN Technologies, Inc.

		The size of the splash screen is dependent on the image.
		The required assemblies to use this function outside of a WinForms script:
		Add-Type -AssemblyName System.Windows.Forms
		Add-Type -AssemblyName System.Drawing
#>
	[OutputType([System.Windows.Forms.Form])]
	param
	(
		[Parameter(ParameterSetName = 'Image',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNull()]
		[System.Drawing.Image]$Image,
		[Parameter(Mandatory = $false)]
		[string]$Title,
		[int]$Timeout = 1,
		[Parameter(ParameterSetName = 'ImageLocation',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNullOrEmpty()]
		[string]$ImageLocation,
		[switch]$PassThru,
		[switch]$Modal
	)
	
	#Create a splash screen form to display the image.
	$splashForm = New-Object System.Windows.Forms.Form
	
	#Create a picture box for the image
	$pict = New-Object System.Windows.Forms.PictureBox
	
	if ($Image)
	{
		$pict.Image = $Image;
	}
	else
	{
		$pict.Load($ImageLocation)
	}
	
	$pict.AutoSize = $true
	$pict.Dock = 'Fill'
	$splashForm.Controls.Add($pict)
	
	#Display a title if defined.
	if ($Title)
	{
		$splashForm.Text = $Title
		$splashForm.FormBorderStyle = 'FixedDialog'
	}
	else
	{
		$splashForm.FormBorderStyle = 'None'
	}
	
	#Set a timer
	if ($Timeout -gt 0)
	{
		$timer = New-Object System.Windows.Forms.Timer
		$timer.Interval = $Timeout * 1000
		$timer.Tag = $splashForm
		$timer.add_Tick({
				$this.Tag.Close();
				$this.Stop()
			})
		$timer.Start()
	}
	
	#Show the form
	$splashForm.AutoSize = $true
	$splashForm.AutoSizeMode = 'GrowAndShrink'
	$splashForm.ControlBox = $false
	$splashForm.StartPosition = 'CenterScreen'
	$splashForm.TopMost = $true
	
	if ($Modal) { $splashForm.ShowDialog() }
	else { $splashForm.Show() }
	
	if ($PassThru)
	{
		return $splashForm
	}
}
#endregion

$frmWizard_MouseMove=[System.Windows.Forms.MouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	

}

$frmWizard_Enter={
	

}

$frmWizard_MouseEnter={
	

}

$listSelectMod_MouseEnter={
	

}



$buttonHelpCleanUpLinks_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "This tool removes all kinks in P:\ and the Dayz game folder"
	Show-messageform_psf
}

$buttonCleanUpLinks_Click={
	#TODO: Place custom script here
	Remove-AllLinks
}

$buttonOpenBuildLog_Click={
	Write-ScratchParam -key "DefaultLogFile" -value "Buildoutput.txt"
	Show-DisplayLogs_psf
	
}

$buttonLaunchLogs_Click={
	#TODO: Place custom script here
	Write-ScratchParam -key "DefaultLogFile" -value "ServerLog"
	Show-DisplayLogs_psf
}

$buttonHotLoading_Click={
	
	Set-PopupMessage -Message "If hotloading does not work. Try Tools->Clean Links.  Launch->Link All"
	Show-messageform_psf
	
}

$buttonConvertExistingMod_Click={
	
	# Copy Kommander folder
	$templatef = Read-GlobalParam -key "TemplateFolder"
	$templateKommanderf = Add-Folder -Source $templatef -Folder "Kommander\*"
	
	$modfolder = Read-GlobalParam -key "CurrentModFolder"
	$kommanderf = Add-Folder -Source $modfolder -Folder "Kommander"
	
	if (-not (Test-Path -Path $kommanderf))
	{
		New-Item -Path $kommanderf -ItemType "Directory"			
	}
	Copy-Item -Path $templateKommanderf -Destination $kommanderf -Recurse
	
	# Edit dayz.proj to refer to modname instead of templatemod
	$ModName = Read-ModParam -key "ModName"
	Edit-TemplateTokens -Source "TemplateMod" -Replace $ModName -Folder $kommanderf -File "dayz.gproj"
	
	# Copy batch files from template to modfolder
	$templatef = Add-Folder -Source $templatef -Folder "*.bat"
	
	Copy-Item -Path $templatef -Destination $modfolder
	Edit-BatchFiles -Modfolder $modfolder -Modname $ModName
	
	
}

$buttonHelpFolderSettings_Click={
	Set-PopupMessage -Message "Convert Mod `n (1) Creates Kommander folder; `n (2) Copies and Customizes dayz.groj `n (3) Copies and customizes batch folders `n (4) Copies integrated tools `n `nUsage: Copy your modfolder into the modsource folder that you slected in folder settings. Click on it in left panel. Click on Convert Mod." -Title "Help"
	Show-messageform_psf
	
}

$buttonCreateUIFromLayout_Click={
	
	Show-CreateUI_psf
	
}

$buttonLayoutFolder_Click3={
	if($folderbrowserdialog2.ShowDialog() -eq 'OK')
	{
		$textLayoutFolder.Text = $folderbrowserdialog2.SelectedPath
		Write-ModParam -key "LayoutFolder" -value $folderbrowserdialog2.SelectedPath
	}
}

$buttonInputsFolder_Click3={
	if($folderbrowserdialog3.ShowDialog() -eq 'OK')
	{
		$textInputsFolder.Text = $folderbrowserdialog3.SelectedPath
	}
}

$buttonHelpCreateUI_Click={
	Set-PopupMessage -Message "This tool will create the code necessary to implement a layout. The code is contained in separate subfolders named UIHelper. `n`nThe tool will also create the necessary code to show the dialog.  However, at present, the tool cannot inject itself into an existing input.xml.  If you don't already have an inputs.xml, then it shouldn't be a problem. The  tool will create one with the O key as default key to bring up your dialog.  But if the tool finds an existing inputs.xml, it will copy the required code in a uiinputs.xml file. Its up to you to integrate the two files. Automating this is on my todo list. `n `n If the key doesn't bring up the dialog, also check to make sure that the config.cpp contains the appropriate reference to the inputs.xml"
	Show-messageform_psf
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">11</Line>
    <Line Disabled="True">176</Line>
    <Line Disabled="True">500</Line>
    <Line Disabled="False">540</Line>
    <Line Disabled="False">614</Line>
    <Line Disabled="True">847</Line>
    <Line Disabled="True">854</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>