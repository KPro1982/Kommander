<File version="3.2">
  <FileID>fb15099b-6511-42ea-a001-83430d32c4ab</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAHh1SURBVHhe7Z0FfF1HmuV3Z2anZxune2dndoe2
aTpN6U4n3YFOp5PYceLEiR0zMzMzM8cMMTODZNmyZTEz2hbYYostsBits/XV07Of5WdbluToSfec
3+8vXah760Ld+k7VhfffKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqi
KIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqi
KIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqi
KIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqi
KIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqi
KIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiKIqiDKdDf/s3
fxP085/9LGjy5ClBc+fOD5o9ey4hhBBCWg3zgubPXxD0RafPgr71938fpGK78Gz9zd/8za2OHTti
3+GTCLyZhNjUfEQn5xJCCCGklRCTkqfIhbtfKKZOnYof/vAfURfmn66f/fTHQXsPHkd4Yi48IpLg
GnoHboQQQghpVUj8DojJRGDEbXTp0uX5BmDyxClBgTeS4BWZDM/wBEIIIYS0UjzC4hGhGvRHj59+
vgGYP29BUEJGEdzDE+EZQQghhLRevJqR1rZOwUOZgBspBTh91v75BmDe3HlB8en31YJJ8I4khBBC
Wie+N5LhdzNVkdJkfBWyTp+oZLVeNd5MNO92pj5cpxkxBDeVATh5+sLzDcBcMQAZhfoWgOwoIYQQ
0tqQgO0SGIfj9j44csELRy96Nw617JELnrjkFq6DrFtwHM5f98P5az4479RIZFnFVZ8I03YGxOK4
XXNspxcue0RqE2A+DmICbqXeb7gBSFAGwDvKulshhBBCbB3/6Ls6IF7zioRn6G14qMDdWLzD7uDo
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
A9AaEdEAGAyRkQyA+WMl1o6FURCJAZCHVWkAWiesxx5H1BQDIA/siqyt2yiI5KFNeXOjzRoAQXZS
nqKX7zEbXfJ8ggRGcX7WjlVbQSoFudDNTyUbWfLqlVzk8uGhtm762jJyzUo9Jtew0dXYekwCnTyk
Lc84UKY32L6JnsEWNQBS6ckJl49eCHIRyfuWRsK8z+YHfNp6IJD9k9aB+ZzXPx5GQs65XOgM/q0b
cz0mD5rJeTViPWZGjkFj6jFJL40CMQ/m42hUpF6QhsE3US+0qAEQZCelBSQ7bGSM1AqU/ZRPbVo7
DkZC3jwxyjlv67AeM9GUekyWExMgPQHW1m0U5ENl5uNR/xg1Ny1uAATZUfkohZH5Jk62LcFzXsz7
/m0Mlumm12OyvFwX1tZtFL7JesEmDAAhhBBCvlloAAghhBADQgNACCGEGBAaAEIIIcSA0AAQQggh
BoQGgBBCCDEgNACEEEKIAaEBIIQQQgxIsxqAPGUAiopMKyWEEEKI7SLxutkMQIJakayMEEIIIbZP
XLop+DfZAEQrFyFOghBCCCG2z8P43RgDEK0MgNk9EEIIIaT1cUuR3lADMHfuvJCyWiCjWKEWIoQQ
QkjrRIJ/GYCLlxyfbwCGDx8RccH+Ck6duagdAyGEEEJaLxcvXcGKlaufbwAoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqLakP7bf/v/3snXfG15C2kAAAAASUVORK5CYII=</Preview>
  <Form>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
/wWhGF8RNeAAAA==</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabSelectMod)
	{
		#TODO: Enter Validation Code here for Step 1
		if($lblModName.Text)
		{
			return $true 
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabLaunch)
	{
		#TODO: Enter Validation Code here for Step 2

		
		
		if ($lblModName.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabAddons)
	{
		#TODO: Enter Validation Code here for Step 3

			return $true
		
	}
	elseif ($tabPage -eq $tabModSettings)
	{
		Initialize-ModSettingsTab
		if ($txtScriptsFolder.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabtools)
	{
		
		
		return $true
		
		
	}($tabPage -eq $tabhelp)
	{
		
		
		return $true
		
		
	}
	elseif ($tabPage -eq $tabkodesearch)
	{
		
		
		return $true
		
		
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$frmWizard_Load={
	Update-NavButtons
	Update-Wizard
	
	$buttonCreateUIFromLayout.Enabled = $true
	if(Read-GlobalParam -key "EnableToolStrip")
	{
		$script:initilizing = $true
		$enabletoolstrip = Read-GlobalParam -key "EnableToolStrip"
		if ($enabletoolstrip -eq $true)
		{
			$checkboxEnableToolStrip.Checked = $true
		}
		else
		{
			$checkboxEnableToolStrip.Checked = $false
		}
		
		$script:initilizing = $false
	}
	
	$script:initilizing = $true
	$autoarchive = Read-GlobalParam -key "Auto-Archive"
	if ($autoarchive -eq $true)
	{
		$checkboxAutoArchive.Checked = $true
	}
	else
	{
		$checkboxAutoArchive.Checked = $false
	}
	$script:initilizing = $false
	$greppath = Read-GlobalParam -key "dngreppath"
	if ($greppath)
	{
		$textboxdnGrepPath.Text = $greppath
	}
	$indexpath = Read-GlobalParam -key "indexhtmlpath"
	if ($indexpath)
	{
		$textboxIndexPath.Text = $indexpath
	}
	
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	

	
	Update-NavButtons
}

function Initialize-ModSettingsTab
{
	[CmdletBinding()]
	param ()
	
	$layoutf = ""
	Assert-ModLayoutFolder -outpath ([ref]$layoutf)
	if ($layoutf)
	{
		$textLayoutFolder.Text = $layoutf
		Write-ModParam -key "LayoutFolder" -value $layoutf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		$textLayoutFolder.Text = $modfolder
	}
	
	$inputsf = ""
	Assert-ModInputsFolder -outpath ([ref]$inputsf)
	if ($inputsf)
	{
		$textInputsFolder.Text = $inputsf
		Write-ModParam -key "InputsFolder" -value $inputsf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		
	}
}


$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$textboxName_TextChanged={
	Update-NavButtons
}




$tabSelectMod_Click={
	
	
}

$btnLaunch_Click={
	
	Start-kServer
	Start-Sleep -Seconds 5
	Start-kMPGame
}

$btnKill_Click={
	
	Stop-kDayz
}

$buttonSelectAdditionalMods_Click={
	
	$FolderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog;
	$FolderBrowser.RootFolder = "Desktop";
	
	$Results = $FolderBrowser.ShowDialog();
	
	if ($Results -eq "OK")
	{
		$location = $FolderBrowser.SelectedPath.ToString();
		$txtAdditionalMods.Text = $location;
		Update-NavButtons
	}
}

$buttonBrowseFolder_Click={
	if($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
	}
}

$buttonBrowseFolder_Click2={
	if($folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowsermoderndialog1.SelectedPath
	}
}

$btnSettings_Click={
	
	Show-GlobalSettings_psf
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$listSelectAdditionalMods_SelectedIndexChanged={
	
	$selectedmod = $listSelectAdditionalMods.Items.Item($listSelectAdditionalMods.SelectedIndex)
	Update-ListBox $listAdditionalMods  $selectedmod -Append
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
	
}

function Initialize-Listbox
{
	[CmdletBinding()]
	param ()
	
	#TODO: Place script here
	$mods = Read-ModParam -key "AdditionalMPMods"
	
	# clear list box
	$listAdditionalMods.Items.Clear()
	
	if ($mods)
	{
		$modlist = $Mods.Split(';')
		
		foreach ($mod in $modlist)
		{
			Update-ListBox $listAdditionalMods  $mod -Append
		}
		
	}
	
}



function Convert-ListboxCollection
{
	[CmdletBinding()]
	[OutputType([string])]
	param ()
	
	$addonresult = ""
	#TODO: Place script here
	foreach ($mod in $listAdditionalMods.Items)
	{
		$addonresult = $addonresult +  $mod + ';'
		
	}
	if ($addonresult)
	{
		$addonresult = $addonresult.TrimEnd(';')
	}
	Else
	{
		$addonresult = ""
	}
	
	return $addonresult
}



$listAdditionalMods_Click={
	
	$selindex = $listAdditionalMods.SelectedIndex
	$item = $listAdditionalMods.Items.Item($selindex)
	$listAdditionalMods.Items.Remove($item)
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
}

$buttonLaunchWorkbench_Click={
	
	Start-kWorkbench
}

$btnLaunchServerGame_Click={
	
Use-Launch
	
}




$listSelectMod_SelectedIndexChanged= {
	
	$modname = $listSelectMod.Items.Item($listSelectMod.SelectedIndex)
	$lblModName.Text = $modname
	$curmodfolder = Read-GlobalParam -key "ModSourceFolder"
	$curmodfolder = Add-Folder -Source $curmodfolder -Folder $modname
	Write-GlobalParam -key "CurrentModFolder" -value $curmodfolder
	Write-ModParam -key "ModName" -value $modname
	
	# initialize elements that require a modname
	Initialize-Listbox
	
	
	$modscriptsfolder = Read-ModParam -key "ScriptsFolder"
	if (-not $modscriptsfolder)
	{
		if (Assert-ModScriptsFolder -outpath ([ref]$modscriptsfolder))
		{
			$txtScriptsFolder.Text = $modscriptsfolder
			Write-ModParam -key "ScriptsFolder" -value $modscriptsfolder
		}
	}
	else
	{
		$txtScriptsFolder.Text = $modscriptsfolder
	}
	
	$autoarchive = Read-GlobalParam -key "Auto-Archive"
	if ($autoarchive -eq $true)
	{
		Start-Archive
		
	}
	

	
	Update-NavButtons
}


$btnLinkMods_Click={
	
	Link-Scripts
	Link-Source
	Link-Packed
	Link-Workbench
}
<#
	.SYNOPSIS
		Set folder to folder define in settings
	
	.DESCRIPTION
		A detailed description of the Set-Folder function.
	
	.PARAMETER folder
		A description of the folder parameter.
	
	.EXAMPLE
				PS C:\> Set-Folder -folder 'Value1'
	
	.NOTES
		Additional information about the function.
#>



$buttonBuild_Click={
	
	
	Use-Build
	
}





$btnWorkbenchCommandline_Click = {
	$wbcommandline = Start-kWorkbench -Commandline
	Set-PopupMessage -Message $wbcommandline -Title "Workbench Commandline"
	Show-messageform_psf
}

$btnBuildCommandLine_Click = {
	
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	$buildm = ""
	if ($buildmethod -eq "Tools")
	{
		$buildm = Start-BuildAddonBuilder -Commandline
	}
	elseif ($buildmethod -eq "Mikero")
	{
		$buildm = Start-BuildMikero -Commandline
	}
	
	Set-PopupMessage -Message "$buildm" -Title "Build Commandline"
	Show-messageform_psf
}


$btnServerCommandline_Click={
	
	$newline = "`n"
	$servergamecommandline = "SERVER`n" + (Start-kServer -CommandLine)
	$servergamecommandline += "`n`n"
	$servergamecommandline += "GAME`n" + (Start-kMPGame -CommandLine)
	Set-PopupMessage -Message $servergamecommandline -Title "Server + Build Commandlines"
	Show-messageform_psf
}

$buttonBuildSettings_Click={
	
	Show-BuildSettings_psf
}

$btnScriptsFolder_Click = {
	$folderbrowserdialog1.SelectedPath = Read-GlobalParam -key "CurrentModFolder"

	$testpath = ""

	if ($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		
		Write-ModParam -key "ScriptsFolder" -value $folderbrowserdialog1.SelectedPath
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
		Update-NavButtons
	}
	
	
}
$txtScriptsFolder_TextChanged = {
	
	Write-ModParam -key "ScriptsFolder" -value $txtScriptsFolder.Text

}


$lblModName_Click={
	
	
}



$buttonSetupWizard_Click={
	
	Show-SetupWizard_psf
}

$labelPboname_Click={
	
	
}

$textpboname_TextChanged={
	
	Write-ModParam -key "PboName" -value $textpboname.Text
	
}

$listAdditionalMods_SelectedIndexChanged={
	
	
}

$buttonHelpScriptsFolder_Click={
	
	Set-PopupMessage -Message "This is the subfolder that contains your mods scripts. It is generally just called scripts. Kommander will autofill this field if you use the standard setup" -Title "Help"
	Show-messageform_psf
}

$buttonlinkmods_Click={
	
	Set-PopupMessage -Message "If Kommander is running as administrator, this will link your mods. Otherwise you can use the provided linkall bat file" -Title "Help"
	Show-messageform_psf
}

$buttonkillall_Click={
	
	Set-PopupMessage -Message "Kill all running instances of dayz. " -Title "Help"
	Show-messageform_psf
}

$buttonhelpadditionmods_Click={
	
	Set-PopupMessage -Message "Select the mods that you want to load with your mod.  Click on left panel to select a mod. Click on right panel to deselect a mod`n'link to workbench' will add a symbolic link to dayz\addons." -Title "Help"
	Show-messageform_psf
}


$buttonMountPDrive_Click={
	
	Mount-Pdrive
}

$buttonLinkToDayzAddons_Click={
	
	Link-Addons
}



$btnCreateNewMod_Click={
	
	Show-CreateMod_psf
	Update-NavButtons
	Update-Wizard
	
}

$tabSelectMod_Enter={
	
	Update-Wizard
}

function Update-Wizard
{
	[CmdletBinding()]
	param ()
	
	$workshop = Read-GlobalParam -key GameFolder
	$workshop += "\!Workshop"
	$modsource = Read-GlobalParam -key ModSourceFolder
	Update-ListBox $listSelectAdditionalMods (Get-ChildItem -Path "$workshop" -Directory)
	Update-ListBox $listSelectMod (Get-ChildItem -Path "$modsource" -Directory)

	$buildmethod = Read-GlobalParam -key "BuildMethod"
	if ($buildmethod -eq "Mikero")
	{
		$labelPboname.Visible = $true
		$textpboname.Visible = $true
	}
	Reset-BuildSuccess
	
}




$buttonBrowse2_Click={

	if($openfiledialog2.ShowDialog() -eq 'OK')
	{
		$textboxdnGrepPath.Text = $openfiledialog2.FileName
	}
}

$formSplashScreen_Load = {
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
	
	$paramShowSplashScreen = @{
		Image = $pictureboxSplashScreenHidden.Image
		Title = 'Loading...'
		PassThru = $false
	}
	
	Show-SplashScreen @paramShowSplashScreen
	
	#TODO: Place initialization script here:
	
}
#Append the event to the form
#  $frmWizard.add_Load($formSplashScreen_Load)


#region Splash Screen Helper Function
function Show-SplashScreen
{
	<#
	.SYNOPSIS
		Displays a splash screen using the specified image.
	
	.PARAMETER Image
		Mandatory Image object that is displayed in the splash screen.
	
	.PARAMETER Title
		(Optional) Sets a title for the splash screen window. 
	
	.PARAMETER Timeout
		The amount of seconds before the splash screen is closed.
		Set to 0 to leave the splash screen open indefinitely.
		Default: 2
	
	.PARAMETER ImageLocation
		The file path or url to the image.

	.PARAMETER PassThru
		Returns the splash screen form control. Use to manually close the form.
	
	.PARAMETER Modal
		The splash screen will hold up the pipeline until it closes.

	.EXAMPLE
		PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
				#close the splash screen
				$splashScreen.Close()
	.OUTPUTS
		System.Windows.Forms.Form
	
	.NOTES
		Created by SAPIEN Technologies, Inc.

		The size of the splash screen is dependent on the image.
		The required assemblies to use this function outside of a WinForms script:
		Add-Type -AssemblyName System.Windows.Forms
		Add-Type -AssemblyName System.Drawing
#>
	[OutputType([System.Windows.Forms.Form])]
	param
	(
		[Parameter(ParameterSetName = 'Image',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNull()]
		[System.Drawing.Image]$Image,
		[Parameter(Mandatory = $false)]
		[string]$Title,
		[int]$Timeout = 1,
		[Parameter(ParameterSetName = 'ImageLocation',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNullOrEmpty()]
		[string]$ImageLocation,
		[switch]$PassThru,
		[switch]$Modal
	)
	
	#Create a splash screen form to display the image.
	$splashForm = New-Object System.Windows.Forms.Form
	
	#Create a picture box for the image
	$pict = New-Object System.Windows.Forms.PictureBox
	
	if ($Image)
	{
		$pict.Image = $Image;
	}
	else
	{
		$pict.Load($ImageLocation)
	}
	
	$pict.AutoSize = $true
	$pict.Dock = 'Fill'
	$splashForm.Controls.Add($pict)
	
	#Display a title if defined.
	if ($Title)
	{
		$splashForm.Text = $Title
		$splashForm.FormBorderStyle = 'FixedDialog'
	}
	else
	{
		$splashForm.FormBorderStyle = 'None'
	}
	
	#Set a timer
	if ($Timeout -gt 0)
	{
		$timer = New-Object System.Windows.Forms.Timer
		$timer.Interval = $Timeout * 1000
		$timer.Tag = $splashForm
		$timer.add_Tick({
				$this.Tag.Close();
				$this.Stop()
			})
		$timer.Start()
	}
	
	#Show the form
	$splashForm.AutoSize = $true
	$splashForm.AutoSizeMode = 'GrowAndShrink'
	$splashForm.ControlBox = $false
	$splashForm.StartPosition = 'CenterScreen'
	$splashForm.TopMost = $true
	
	if ($Modal) { $splashForm.ShowDialog() }
	else { $splashForm.Show() }
	
	if ($PassThru)
	{
		return $splashForm
	}
}
#endregion

$frmWizard_MouseMove=[System.Windows.Forms.MouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	

}

$frmWizard_Enter={
	

}

$frmWizard_MouseEnter={
	

}

$listSelectMod_MouseEnter={
	

}



$buttonHelpCleanUpLinks_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "This tool removes all kinks in P:\ and the Dayz game folder"
	Show-messageform_psf
}

$buttonCleanUpLinks_Click={
	#TODO: Place custom script here
	Remove-AllLinks
}

$buttonOpenBuildLog_Click = {
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	
	if ($buildmethod -eq "Tools")
	{
		$logfolder = Read-GlobalParam -key "CurrentModFolder"
		$filepath = Add-Folder -Source $logfolder "Kommander\Buildoutput.txt"
	}
	elseif ($buildmethod -eq "Mikero")
	{
		$mikerologfoler = ""
		Assert-MikeroLogFolder -outpath ([ref] $mikerologfoler)
		$filepath = Add-Folder -Source $mikerologfoler -Folder "Scripts.packing.log"
	}
	
	
	Request-Log -FilePath $filepath -InitialDirectory $logfolder 
	
}

$buttonLaunchLogs_Click = {
	
	$profilef = Read-GlobalParam -key "ProfilesFolder"
	Request-Log -Folder $profilef -InitialDirectory $profilef -Filter "All Files (*.*)|*.*|RPT (*.RPT)|*.rpt|Log (*.log)|*.log" -MostRecent 
}

$buttonHotLoading_Click={
	
	Set-PopupMessage -Message "If hotloading does not work. Try Tools->Clean Links.  Launch->Link All"
	Show-messageform_psf
	
}

$buttonConvertExistingMod_Click={
	
	# Copy Kommander folder
	$templatef = Read-GlobalParam -key "TemplateFolder"
	$templateKommanderf = Add-Folder -Source $templatef -Folder "Kommander\*"
	
	$modfolder = Read-GlobalParam -key "CurrentModFolder"
	$kommanderf = Add-Folder -Source $modfolder -Folder "Kommander"
	
	if (-not (Test-Path -Path $kommanderf))
	{
		New-Item -Path $kommanderf -ItemType "Directory"			
	}
	Copy-Item -Path $templateKommanderf -Destination $kommanderf -Recurse
	
	# Edit dayz.proj to refer to modname instead of templatemod
	$ModName = Read-ModParam -key "ModName"
	Edit-TemplateTokens -Source "TemplateMod" -Replace $ModName -Folder $kommanderf -File "dayz.gproj"
	
	# Copy batch files from template to modfolder
	$templatef = Add-Folder -Source $templatef -Folder "*.bat"
	
	Copy-Item -Path $templatef -Destination $modfolder
	Edit-BatchFiles -Modfolder $modfolder -Modname $ModName
	
	
}

$buttonHelpFolderSettings_Click={
	Set-PopupMessage -Message "Convert Mod `n`n (1) Creates Kommander folder; `n (2) Copies and customizes batch folders `n (3) Copies integrated tools `n `nUsage: Copy your modfolder into the modsource folder that you slected in folder settings. Click on it in left panel. Click on Convert Mod. Your mod should now work with Kommander." -Title "Help"
	Show-messageform_psf
	
}

$buttonCreateUIFromLayout_Click={
	
	Show-CreateUI_psf
	
}

$buttonLayoutFolder_Click3={
	if($folderbrowserdialog2.ShowDialog() -eq 'OK')
	{
		$textLayoutFolder.Text = $folderbrowserdialog2.SelectedPath
		Write-ModParam -key "LayoutFolder" -value $folderbrowserdialog2.SelectedPath
	}
}

$buttonInputsFolder_Click3 = {
	$folderbrowserdialog3.SelectedPath = Read-GlobalParam -key "CurrentModFolder"
	if($folderbrowserdialog3.ShowDialog() -eq 'OK')
	{
		$textInputsFolder.Text = $folderbrowserdialog3.SelectedPath
	}
	Write-ModParam -key "InputsFolder" -value $textInputsFolder.Text
}

$buttonHelpCreateUI_Click={
	Set-PopupMessage -Message "This tool will create the code necessary to implement a layout. The code is contained in separate subfolders named UIHelper. `n`nThe tool will also create the necessary code to show the dialog.  However, at present, the tool cannot inject itself into an existing input.xml.  If you don't already have an inputs.xml, then it shouldn't be a problem. The  tool will create one with the O key as default key to bring up your dialog.  But if the tool finds an existing inputs.xml, it will copy the required code in a uiinputs.xml file. Its up to you to integrate the two files. Automating this is on my todo list. `n `n If the key doesn't bring up the dialog, also check to make sure that the config.cpp contains the appropriate reference to the inputs.xml"
	Show-messageform_psf
	
}






$buttonCopyMissionAndConfig_Click={
	$kommanderf = Get-KommanderFolder
	$serveraddins = Add-Folder -Source $kommanderf -Folder "Source Code\Dayz_Folder_Adds\*"
	$gamef = Read-GlobalParam -key "GameFolder"
	Copy-Item -Path $serveraddins -Destination $gamef
}

$buttonHelpCopyMission_Click={
	Set-PopupMessage -Message "In order to run the dayZdiag_x64.exe as the server in the Dayz folder, you must have a copy of the mission and serverDZ.cfg files in the game folder.  If you do not have them, this tool will copy them for you."
	Show-messageform_psf
	
}

$frmWizard_Resize={
	#TODO: Place custom script here

	if ($frmWizard.Size.Height -le 50) # minimized
	{


		# return to previous state

	}
	else
	{
		
	}
	
}

$checkboxEnableToolStrip_CheckedChanged={
	if (-not $script:initilizing)
	{		
		Write-GlobalParam -key "EnableToolStrip" -value $checkboxEnableToolStrip.Checked
	}

}



$buttonHelpMountP_Click={
	Set-PopupMessage -Message "Uses Dayz Tools Command Line to Mount P:"
	Show-messageform_psf
	
}



$buttonBinLogs_Click = {
	$logfolder = Read-SteamCommon
	$logfolder = Add-Folder -Source $logfolder -Folder "DayZ Tools\Bin\Logs"
	
	Request-Log -Folder $logfolder -InitialDirectory $logfolder -Filter "All Files (*.*)|*.*" -MostRecent
	
}
$buttonWorkbenchLog_Click={
	$logfolder = Read-SteamCommon
	$logfolder = Add-Folder -Source $logfolder -Folder "DayZ Tools\Bin\Logs\Workbench"
	Request-Log -Folder $logfolder -InitialDirectory $logfolder -Filter "All Files (*.*)|*.*" -MostRecent
	
}


$buttonCreateFile_Click={
	#TODO: Place custom script here
	Show-CreateNewFIle_psf
	
}


$buttonToolMode_Click={
	#TODO: Place custom script here
	# minimize form
	$winstate = $frmWizard.WindowState
	$frmWizard.WindowState = 'Minimized'
	Show-KommandStrip_psf
	# return to previous state
	$frmWizard.WindowState = $winstate
}

$buttonArchive_Click={
	
	start-archive
}

$checkboxAutoArchive_CheckedChanged={
	
	if (-not $script:initilizing)
	         
	{
		Write-GlobalParam -key "Auto-Archive" -value $checkboxAutoArchive.Checked
	}
	
	
}

$buttonKommander_Click = {
	
	$logfolder = Get-KommanderFolder
	$logfolder = Add-Folder -Source $logfolder -Folder "Logs"
	
	Request-Log -Folder $logfolder -InitialDirectory $logfolder -Filter "Log Files (*.txt)|*.txt" -MostRecent
	
}

$button1_Click={
	Set-PopupMessage -Message "Tool mode closes the main form and opens a floating toolbar in the upper right corner. This mode is easier to use in the script editor or in game.`n`nR - Reload Dayzgame only. It is slightly quicker to close the dayz only when you need to recompile in which case use the R option.`nL - Launch game AND server if you've terminated both server and game.`nK - Kill both server and game processes.`n`nClose the toolbar window to bring the main form back up." -Title "Help"
	Show-messageform_psf
	
}

$button2_Click={
	Set-PopupMessage -Message "Create a new mod from a modtemplate" -Title "Help"
	Show-messageform_psf
}

$button3_Click={
	Set-PopupMessage -Message "Set global folder locations" -Title "Help"
	Show-messageform_psf
	
}

$button4_Click={
	Set-PopupMessage -Message "This will link your dayz addons folder to workbench." -Title "Help"
	Show-messageform_psf
	
}

$buttonBrowseCodebase_Click={
	#TODO: Place custom script here
	$Kommanderf = Get-KommanderFolder
	$indexpath = Add-Folder -Source $Kommanderf -Folder "Doxy\html\index.html"
	Start-Process "$indexpath"
}

$buttonDnGrepCodebase_Click={
	Start-dnGrep
	
	
}

$buttonDnGrepPath_Click={
	
	$greppath = "C:\\Program Files\\dnGrep\\"
	if($openfiledialog1.ShowDialog() -eq 'OK')
	{
		$textboxdnGrepPath.Text = $openfiledialog1.FileName
		Write-GlobalParam -key "dngreppath" -value $textboxdnGrepPath.Text
		
	}
}

$textboxdnGrepPath_TextChanged={
	#TODO: Place custom script here
	
}

$openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$buttonHelpDnGrep_Click={
	Set-PopupMessage -Message "This tool will only work if you install dnGrep. dnGrep is a super useful tool to have on your computer as it makes searching for files very powerful. It can be installed from the git https://dngrep.github.io/ or by running the following winget command on an elevated commandline: winget install -e --id dnGrep.dnGrep " -Title "dnGrep Help"
	Show-messageform_psf
	
}

$button5_Click={
	Set-PopupMessage -Message "This tool uses the output from Doxygen which is an automated code documenter.  It is what Leroy uses for the online version.  Mine is essentially the same thing although I have tweeked the settings to provide more detail.  The current generation date is printed at the bottom of each page of documentation so you can tell if it is out of date.  If so you cane either check my repo to see if I have updated it or download doxygen to generate a current document set." -Title "Doxygen Help"
	Show-messageform_psf
	
}

$buttonBrowse_Click={
	$kommanderf = Get-KommanderFolder
	$indexpath = Add-Folder -source $kommanderf -folder "doxy\html\"
	$folderbrowserdialog1.SelectedPath = Read-GlobalParam -key "CurrentModFolder"
	if($openfiledialog2.ShowDialog() -eq 'OK')
	{
		
		$textboxIndexPath.Text = $openfiledialog2.FileName
		Write-GlobalParam -key "indexhtmlpath" -value $textboxdnGrepPath.Text
		
	}
}

$labelFileLocationOfIndexh_Click={
	#TODO: Place custom script here
	
}

$button6_Click={
	Set-PopupMessage -Message "This is the location of the index.html for the documentation. It is intended to be located within the kommander folder at ..\Kommander\Doxy\Html\index.html."
	Show-messageform_psf
	
}

$button7_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "This is the location of the dngrep.exe.  After installation, it will be located in: C:\\Program Files\\dnGrep\\dnGREP.exe."
	Show-messageform_psf
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">11</Line>
    <Line Disabled="True">70</Line>
    <Line Disabled="True">123</Line>
    <Line Disabled="True">228</Line>
    <Line Disabled="True">504</Line>
    <Line Disabled="False">610</Line>
    <Line Disabled="False">684</Line>
    <Line Disabled="True">1085</Line>
    <Line Disabled="False">1086</Line>
    <Line Disabled="False">1089</Line>
    <Line Disabled="False">1144</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>