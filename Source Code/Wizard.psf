<File version="3.2">
  <FileID>fb15099b-6511-42ea-a001-83430d32c4ab</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabSelectMod)
	{
		#TODO: Enter Validation Code here for Step 1
		if($lblModName.Text)
		{
			return $true 
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabLaunch)
	{
		#TODO: Enter Validation Code here for Step 2

		
		
		if ($lblModName.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabAddons)
	{
		#TODO: Enter Validation Code here for Step 3

			return $true
		
	}
	elseif ($tabPage -eq $tabModSettings)
	{
		Initialize-ModSettingsTab
		if ($txtScriptsFolder.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabtools)
	{
		
		
		return $true
		
		
	}($tabPage -eq $tabhelp)
	{
		
		
		return $true
		
		
	}
	elseif ($tabPage -eq $tabkodesearch)
	{
		
		
		return $true
		
		
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$frmWizard_Load={
	Update-NavButtons
	Update-Wizard
	
	$buttonCreateUIFromLayout.Enabled = $true
	if(Read-GlobalParam -key "EnableToolStrip")
	{
		$script:initilizing = $true
		$enabletoolstrip = Read-GlobalParam -key "EnableToolStrip"
		if ($enabletoolstrip -eq $true)
		{
			$checkboxEnableToolStrip.Checked = $true
		}
		else
		{
			$checkboxEnableToolStrip.Checked = $false
		}
		
		$script:initilizing = $false
	}
	
	$script:initilizing = $true
	$autoarchive = Read-GlobalParam -key "Auto-Archive"
	if ($autoarchive -eq $true)
	{
		$checkboxAutoArchive.Checked = $true
	}
	else
	{
		$checkboxAutoArchive.Checked = $false
	}
	$script:initilizing = $false
	$greppath = Read-GlobalParam -key "dngreppath"
	if ($greppath)
	{
		$textboxdnGrepPath.Text = $greppath
	}
	$indexpath = Read-GlobalParam -key "indexhtmlpath"
	if ($indexpath)
	{
		$textboxIndexPath.Text = $indexpath
	}
	
	$textboxComment.Text = ""
	
	
	$usebatch = Read-GlobalParam -key "UseBatch"
	if ($usebatch -eq $true)
	{
		$checkboxUseBatch.Checked = $true
	}
	else
	{
		$checkboxUseBatch.Checked = $false
	}
	$archivetime = Read-GlobalParam -key "ArchiveTimer"
	if ($archivetime -ne 0)
	{
		$numericupdownArchiveTimer.Value = $archivetime
		$labelArchiveTimer.Text = [int]$archivetime * 60
	}
	else
	{
		$labelArchiveTimer.Text = "Never"
	}
	
	
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	

	
	Update-NavButtons
}

function Initialize-ModSettingsTab
{
	[CmdletBinding()]
	param ()
	
	$layoutf = ""
	Assert-ModLayoutFolder -outpath ([ref]$layoutf)
	if ($layoutf)
	{
		$textLayoutFolder.Text = $layoutf
		Write-ModParam -key "LayoutFolder" -value $layoutf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		$textLayoutFolder.Text = $modfolder
	}
	
	$inputsf = ""
	Assert-ModInputsFolder -outpath ([ref]$inputsf)
	if ($inputsf)
	{
		$textInputsFolder.Text = $inputsf
		Write-ModParam -key "InputsFolder" -value $inputsf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		
	}
}


$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$textboxName_TextChanged={
	Update-NavButtons
}




$tabSelectMod_Click={
	
	
}

$btnLaunch_Click={
	
	Start-kServer
	Start-Sleep -Seconds 5
	Start-kMPGame
}

$btnKill_Click={
	
	Stop-kDayz
}

$buttonSelectAdditionalMods_Click={
	
	$FolderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog;
	$FolderBrowser.RootFolder = "Desktop";
	
	$Results = $FolderBrowser.ShowDialog();
	
	if ($Results -eq "OK")
	{
		$location = $FolderBrowser.SelectedPath.ToString();
		$txtAdditionalMods.Text = $location;
		Update-NavButtons
	}
}

$buttonBrowseFolder_Click={
	if($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
	}
}

$buttonBrowseFolder_Click2={
	if($folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowsermoderndialog1.SelectedPath
	}
}

$btnSettings_Click={
	
	Show-GlobalSettings_psf
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$listSelectAdditionalMods_SelectedIndexChanged={
	
	$selectedmod = $listSelectAdditionalMods.Items.Item($listSelectAdditionalMods.SelectedIndex)
	Update-ListBox $listAdditionalMods  $selectedmod -Append
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
	
}

function Initialize-Listbox
{
	[CmdletBinding()]
	param ()
	
	#TODO: Place script here
	$mods = Read-ModParam -key "AdditionalMPMods"
	
	# clear list box
	$listAdditionalMods.Items.Clear()
	
	if ($mods)
	{
		$modlist = $Mods.Split(';')
		
		foreach ($mod in $modlist)
		{
			Update-ListBox $listAdditionalMods  $mod -Append
		}
		
	}
	
}



function Convert-ListboxCollection
{
	[CmdletBinding()]
	[OutputType([string])]
	param ()
	
	$addonresult = ""
	#TODO: Place script here
	foreach ($mod in $listAdditionalMods.Items)
	{
		$addonresult = $addonresult +  $mod + ';'
		
	}
	if ($addonresult)
	{
		$addonresult = $addonresult.TrimEnd(';')
	}
	Else
	{
		$addonresult = ""
	}
	
	return $addonresult
}



$listAdditionalMods_Click={
	
	$selindex = $listAdditionalMods.SelectedIndex
	$item = $listAdditionalMods.Items.Item($selindex)
	$listAdditionalMods.Items.Remove($item)
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
}

$buttonLaunchWorkbench_Click={
	
	Start-ArchiveTimer
	Start-kWorkbench
	
}

$btnLaunchServerGame_Click={
	
Use-Launch
	
}




$listSelectMod_SelectedIndexChanged= {
	
	$modname = $listSelectMod.Items.Item($listSelectMod.SelectedIndex)
	$lblModName.Text = $modname
	$curmodfolder = Read-GlobalParam -key "ModSourceFolder"
	$curmodfolder = Add-Folder -Source $curmodfolder -Folder $modname
	Write-GlobalParam -key "CurrentModFolder" -value $curmodfolder
	Write-ModParam -key "ModName" -value $modname
	
	# initialize elements that require a modname
	Initialize-Listbox
	
	
	$modscriptsfolder = Read-ModParam -key "ScriptsFolder"
	if (-not $modscriptsfolder)
	{
		if (Assert-ModScriptsFolder -outpath ([ref]$modscriptsfolder))
		{
			$txtScriptsFolder.Text = $modscriptsfolder
			Write-ModParam -key "ScriptsFolder" -value $modscriptsfolder
		}
	}
	else
	{
		$txtScriptsFolder.Text = $modscriptsfolder
	}
	
	$autoarchive = Read-GlobalParam -key "Auto-Archive"
	if ($autoarchive -eq $true)
	{
		Start-Archive -Comment "Auto Archive"
		
	}
	

	
	Update-NavButtons
}


$btnLinkMods_Click={
	
   Link-All
}
<#
	.SYNOPSIS
		Set folder to folder define in settings
	
	.DESCRIPTION
		A detailed description of the Set-Folder function.
	
	.PARAMETER folder
		A description of the folder parameter.
	
	.EXAMPLE
				PS C:\> Set-Folder -folder 'Value1'
	
	.NOTES
		Additional information about the function.
#>



$buttonBuild_Click={
	
	
	Use-Build
	
}





$btnWorkbenchCommandline_Click = {
	$wbcommandline = Start-kWorkbench -Commandline
	Set-PopupMessage -Message $wbcommandline -Title "Workbench Commandline"
	Show-messageform_psf
}

$btnBuildCommandLine_Click = {
	
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	$buildm = ""
	if ($buildmethod -eq "Tools")
	{
		$buildm = Start-BuildAddonBuilder -Commandline
	}
	elseif ($buildmethod -eq "Mikero")
	{
		$buildm = Start-BuildMikero -Commandline
	}
	
	Set-PopupMessage -Message "$buildm" -Title "Build Commandline"
	Show-messageform_psf
}


$btnServerCommandline_Click={
	
	$newline = "`n"
	$servergamecommandline = "SERVER`n" + (Start-kServer -CommandLine)
	$servergamecommandline += "`n`n"
	$servergamecommandline += "GAME`n" + (Start-kMPGame -CommandLine)
	Set-PopupMessage -Message $servergamecommandline -Title "Server + Build Commandlines"
	Show-messageform_psf
}

$buttonBuildSettings_Click={
	
	Show-BuildSettings_psf
}

$btnScriptsFolder_Click = {
	$folderbrowserdialog1.SelectedPath = Read-GlobalParam -key "CurrentModFolder"

	$testpath = ""

	if ($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		
		Write-ModParam -key "ScriptsFolder" -value $folderbrowserdialog1.SelectedPath
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
		Update-NavButtons
	}
	
	
}
$txtScriptsFolder_TextChanged = {
	
	Write-ModParam -key "ScriptsFolder" -value $txtScriptsFolder.Text

}


$lblModName_Click={
	
	
}



$buttonSetupWizard_Click={
	
	Show-SetupWizard_psf
}

$labelPboname_Click={
	
	
}

$textpboname_TextChanged={
	
	Write-ModParam -key "PboName" -value $textpboname.Text
	
}

$listAdditionalMods_SelectedIndexChanged={
	
	
}

$buttonHelpScriptsFolder_Click={
	
	Set-PopupMessage -Message "This is the subfolder that contains your mods scripts. It is generally just called scripts. Kommander will autofill this field if you use the standard setup" -Title "Help"
	Show-messageform_psf
}

$buttonlinkmods_Click={
	
	Set-PopupMessage -Message "If Kommander is running as administrator, this will link your mods. Otherwise you can use the provided linkall bat file" -Title "Help"
	Show-messageform_psf
}

$buttonkillall_Click={
	
	Set-PopupMessage -Message "Kill all running instances of dayz. " -Title "Help"
	Show-messageform_psf
}

$buttonhelpadditionmods_Click={
	
	Set-PopupMessage -Message "Select the mods that you want to load with your mod.  Click on left panel to select a mod. Click on right panel to deselect a mod`n'link to workbench' will add a symbolic link to dayz\addons." -Title "Help"
	Show-messageform_psf
}


$buttonMountPDrive_Click={
	
	Mount-Pdrive
}

$buttonLinkToDayzAddons_Click={
	
	Link-Addons
}



$btnCreateNewMod_Click={
	
	Show-CreateMod_psf
	Update-NavButtons
	Update-Wizard
	
}

$tabSelectMod_Enter={
	
	Update-Wizard
}

function Update-Wizard
{
	[CmdletBinding()]
	param ()
	
	$workshop = Read-GlobalParam -key GameFolder
	$workshop += "\!Workshop"
	$modsource = Read-GlobalParam -key ModSourceFolder
	Update-ListBox $listSelectAdditionalMods (Get-ChildItem -Path "$workshop" -Directory)
	Update-ListBox $listSelectMod (Get-ChildItem -Path "$modsource" -Directory)

	$buildmethod = Read-GlobalParam -key "BuildMethod"
	if ($buildmethod -eq "Mikero")
	{
		$labelPboname.Visible = $true
		$textpboname.Visible = $true
	}
	Reset-BuildSuccess
	
}




$buttonBrowse2_Click={

	if($openfiledialog2.ShowDialog() -eq 'OK')
	{
		$textboxdnGrepPath.Text = $openfiledialog2.FileName
	}
}

$formSplashScreen_Load = {
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
	
	$paramShowSplashScreen = @{
		Image = $pictureboxSplashScreenHidden.Image
		Title = 'Loading...'
		PassThru = $false
	}
	
	Show-SplashScreen @paramShowSplashScreen
	
	#TODO: Place initialization script here:
	
}
#Append the event to the form
#  $frmWizard.add_Load($formSplashScreen_Load)


#region Splash Screen Helper Function
function Show-SplashScreen
{
	<#
	.SYNOPSIS
		Displays a splash screen using the specified image.
	
	.PARAMETER Image
		Mandatory Image object that is displayed in the splash screen.
	
	.PARAMETER Title
		(Optional) Sets a title for the splash screen window. 
	
	.PARAMETER Timeout
		The amount of seconds before the splash screen is closed.
		Set to 0 to leave the splash screen open indefinitely.
		Default: 2
	
	.PARAMETER ImageLocation
		The file path or url to the image.

	.PARAMETER PassThru
		Returns the splash screen form control. Use to manually close the form.
	
	.PARAMETER Modal
		The splash screen will hold up the pipeline until it closes.

	.EXAMPLE
		PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
				#close the splash screen
				$splashScreen.Close()
	.OUTPUTS
		System.Windows.Forms.Form
	
	.NOTES
		Created by SAPIEN Technologies, Inc.

		The size of the splash screen is dependent on the image.
		The required assemblies to use this function outside of a WinForms script:
		Add-Type -AssemblyName System.Windows.Forms
		Add-Type -AssemblyName System.Drawing
#>
	[OutputType([System.Windows.Forms.Form])]
	param
	(
		[Parameter(ParameterSetName = 'Image',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNull()]
		[System.Drawing.Image]$Image,
		[Parameter(Mandatory = $false)]
		[string]$Title,
		[int]$Timeout = 1,
		[Parameter(ParameterSetName = 'ImageLocation',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNullOrEmpty()]
		[string]$ImageLocation,
		[switch]$PassThru,
		[switch]$Modal
	)
	
	#Create a splash screen form to display the image.
	$splashForm = New-Object System.Windows.Forms.Form
	
	#Create a picture box for the image
	$pict = New-Object System.Windows.Forms.PictureBox
	
	if ($Image)
	{
		$pict.Image = $Image;
	}
	else
	{
		$pict.Load($ImageLocation)
	}
	
	$pict.AutoSize = $true
	$pict.Dock = 'Fill'
	$splashForm.Controls.Add($pict)
	
	#Display a title if defined.
	if ($Title)
	{
		$splashForm.Text = $Title
		$splashForm.FormBorderStyle = 'FixedDialog'
	}
	else
	{
		$splashForm.FormBorderStyle = 'None'
	}
	
	#Set a timer
	if ($Timeout -gt 0)
	{
		$timer = New-Object System.Windows.Forms.Timer
		$timer.Interval = $Timeout * 1000
		$timer.Tag = $splashForm
		$timer.add_Tick({
				$this.Tag.Close();
				$this.Stop()
			})
		$timer.Start()
	}
	
	#Show the form
	$splashForm.AutoSize = $true
	$splashForm.AutoSizeMode = 'GrowAndShrink'
	$splashForm.ControlBox = $false
	$splashForm.StartPosition = 'CenterScreen'
	$splashForm.TopMost = $true
	
	if ($Modal) { $splashForm.ShowDialog() }
	else { $splashForm.Show() }
	
	if ($PassThru)
	{
		return $splashForm
	}
}
#endregion

$frmWizard_MouseMove=[System.Windows.Forms.MouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	

}

$frmWizard_Enter={
	

}

$frmWizard_MouseEnter={
	

}

$listSelectMod_MouseEnter={
	

}



$buttonHelpCleanUpLinks_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "This tool removes all kinks in P:\ and the Dayz game folder"
	Show-messageform_psf
}

$buttonCleanUpLinks_Click={
	#TODO: Place custom script here
	Remove-AllLinks
}

$buttonOpenBuildLog_Click = {
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	
	if ($buildmethod -eq "Tools")
	{
		$logfolder = Read-GlobalParam -key "CurrentModFolder"
		$filepath = Add-Folder -Source $logfolder "Kommander\Buildoutput.txt"
	}
	elseif ($buildmethod -eq "Mikero")
	{
		$mikerologfoler = ""
		Assert-MikeroLogFolder -outpath ([ref] $mikerologfoler)
		$filepath = Add-Folder -Source $mikerologfoler -Folder "Scripts.packing.log"
	}
	
	
	Request-Log -FilePath $filepath -InitialDirectory $logfolder 
	
}

$buttonLaunchLogs_Click = {
	
	$profilef = Read-GlobalParam -key "ProfilesFolder"
	Request-Log -Folder $profilef -InitialDirectory $profilef -Filter "All Files (*.*)|*.*|RPT (*.RPT)|*.rpt|Log (*.log)|*.log" -MostRecent 
}

$buttonHotLoadingWasWorking_Click={
	
	Set-PopupMessage -Message "If hotloading does not work. Try Tools->Clean Links.  Launch->Link All"
	Show-messageform_psf
	
}

$buttonConvertExistingMod_Click={
	
	# Copy Kommander folder
	$templatef = Read-GlobalParam -key "TemplateFolder"
	$templateKommanderf = Add-Folder -Source $templatef -Folder "Kommander\*"
	
	$modfolder = Read-GlobalParam -key "CurrentModFolder"
	$kommanderf = Add-Folder -Source $modfolder -Folder "Kommander"
	
	if (-not (Test-Path -Path $kommanderf))
	{
		New-Item -Path $kommanderf -ItemType "Directory"			
	}
	Copy-Item -Path $templateKommanderf -Destination $kommanderf -Recurse
	
	
	# Copy batch files from template to modfolder
	$templatef = Add-Folder -Source $templatef -Folder "*.bat"
	
	Copy-Item -Path $templatef -Destination $modfolder
	Edit-BatchFiles -Modfolder $modfolder -Modname $ModName
	
	
}

$buttonHelpFolderSettings_Click={
	Set-PopupMessage -Message "Convert Mod `n`n (1) Creates Kommander folder; `n (2) Copies and customizes batch folders `n (3) Copies integrated tools `n `nUsage: Copy your modfolder into the modsource folder that you slected in folder settings. Click on it in left panel. Click on Convert Mod. Your mod should now work with Kommander." -Title "Help"
	Show-messageform_psf
	
}

$buttonCreateUIFromLayout_Click={
	
	Show-CreateUI_psf
	
}

$buttonLayoutFolder_Click3={
	if($folderbrowserdialog2.ShowDialog() -eq 'OK')
	{
		$textLayoutFolder.Text = $folderbrowserdialog2.SelectedPath
		Write-ModParam -key "LayoutFolder" -value $folderbrowserdialog2.SelectedPath
	}
}

$buttonInputsFolder_Click3 = {
	$folderbrowserdialog3.SelectedPath = Read-GlobalParam -key "CurrentModFolder"
	if($folderbrowserdialog3.ShowDialog() -eq 'OK')
	{
		$textInputsFolder.Text = $folderbrowserdialog3.SelectedPath
	}
	Write-ModParam -key "InputsFolder" -value $textInputsFolder.Text
}

$buttonHelpCreateUI_Click={
	Set-PopupMessage -Message "This tool will create the code necessary to implement a layout. The code is contained in separate subfolders named UIHelper. `n`nThe tool will also create the necessary code to show the dialog.  However, at present, the tool cannot inject itself into an existing input.xml.  If you don't already have an inputs.xml, then it shouldn't be a problem. The  tool will create one with the O key as default key to bring up your dialog.  But if the tool finds an existing inputs.xml, it will copy the required code in a uiinputs.xml file. Its up to you to integrate the two files. Automating this is on my todo list. `n `n If the key doesn't bring up the dialog, also check to make sure that the config.cpp contains the appropriate reference to the inputs.xml"
	Show-messageform_psf
	
}






$buttonCopyMissionAndConfig_Click={
	$kommanderf = Get-KommanderFolder
	$serveraddins = Add-Folder -Source $kommanderf -Folder "Source Code\Dayz_Folder_Adds\*"
	$gamef = Read-GlobalParam -key "GameFolder"
	Copy-Item -Path $serveraddins -Destination $gamef
}

$buttonHelpCopyMission_Click={
	Set-PopupMessage -Message "In order to run the dayZdiag_x64.exe as the server in the Dayz folder, you must have a copy of the mission and serverDZ.cfg files in the game folder.  If you do not have them, this tool will copy them for you."
	Show-messageform_psf
	
}

$frmWizard_Resize={
	#TODO: Place custom script here

	if ($frmWizard.Size.Height -le 50) # minimized
	{


		# return to previous state

	}
	else
	{
		
	}
	
}

$checkboxEnableToolStrip_CheckedChanged={
	if (-not $script:initilizing)
	{		
		Write-GlobalParam -key "EnableToolStrip" -value $checkboxEnableToolStrip.Checked
	}

}



$buttonHelpMountP_Click={
	Set-PopupMessage -Message "Uses Dayz Tools Command Line to Mount P:"
	Show-messageform_psf
	
}



$buttonBinLogs_Click = {
	$logfolder = Read-SteamCommon
	$logfolder = Add-Folder -Source $logfolder -Folder "DayZ Tools\Bin\Logs"
	
	Request-Log -Folder $logfolder -InitialDirectory $logfolder -Filter "All Files (*.*)|*.*" -MostRecent
	
}
$buttonWorkbenchLog_Click={
	$logfolder = Read-SteamCommon
	$logfolder = Add-Folder -Source $logfolder -Folder "DayZ Tools\Bin\Logs\Workbench"
	Request-Log -Folder $logfolder -InitialDirectory $logfolder -Filter "All Files (*.*)|*.*" -MostRecent
	
}


$buttonCreateFile_Click={
	#TODO: Place custom script here
	Show-CreateNewFIle_psf
	
}


$buttonToolMode_Click={
	#TODO: Place custom script here
	# minimize form
	$winstate = $frmWizard.WindowState
	$frmWizard.WindowState = 'Minimized'
	Show-KommandStrip_psf
	# return to previous state
	$frmWizard.WindowState = $winstate
}

$buttonArchiveNow_Click={
	
	start-archive -Comment $textboxComment.Text
	$textboxComment.Text = ""
}

$checkboxAutoArchive_CheckedChanged={
	
	if (-not $script:initilizing)
	         
	{
		Write-GlobalParam -key "Auto-Archive" -value $checkboxAutoArchive.Checked
	}
	
	
}

$buttonKommander_Click = {
	
	$logfolder = Get-KommanderFolder
	$logfolder = Add-Folder -Source $logfolder -Folder "Logs"
	
	Request-Log -Folder $logfolder -InitialDirectory $logfolder -Filter "Log Files (*.txt)|*.txt" -MostRecent
	
}

$button1_Click={
	Set-PopupMessage -Message "Tool mode closes the main form and opens a floating toolbar in the upper right corner. This mode is easier to use in the script editor or in game.`n`nR - Reload Dayzgame only. It is slightly quicker to close the dayz only when you need to recompile in which case use the R option.`nL - Launch game AND server if you've terminated both server and game.`nK - Kill both server and game processes.`n`nClose the toolbar window to bring the main form back up." -Title "Help"
	Show-messageform_psf
	
}

$button2_Click={
	Set-PopupMessage -Message "Create a new mod from a modtemplate" -Title "Help"
	Show-messageform_psf
}

$button3_Click={
	Set-PopupMessage -Message "Set global folder locations" -Title "Help"
	Show-messageform_psf
	
}

$button4_Click={
	Set-PopupMessage -Message "This will link your the currently selected mod to workbench so that they will be available to workbench without selecting them on this page each time you create a new mod. This is useful if you always include CF in your mods. To remove them, just delete the links from the dayz/addons folder." -Title "Help"
	Show-messageform_psf
	
}

$buttonBrowseCodebase_Click={
	#TODO: Place custom script here
	$Kommanderf = Get-KommanderFolder
	$indexpath = Add-Folder -Source $Kommanderf -Folder "Doxy\html\index.html"
	Start-Process "$indexpath"
}

$buttonDnGrepCodebase_Click={
	Start-dnGrep
	
	
}

$buttonDnGrepPath_Click={
	
	$greppath = "C:\\Program Files\\dnGrep\\"
	if($openfiledialog1.ShowDialog() -eq 'OK')
	{
		$textboxdnGrepPath.Text = $openfiledialog1.FileName
		Write-GlobalParam -key "dngreppath" -value $textboxdnGrepPath.Text
		
	}
}

$textboxdnGrepPath_TextChanged={
	#TODO: Place custom script here
	
}

$openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$buttonHelpDnGrep_Click={
	Set-PopupMessage -Message "This tool will only work if you install dnGrep. dnGrep is a super useful tool to have on your computer as it makes searching for files very powerful. It can be installed from the git https://dngrep.github.io/ or by running the following winget command on an elevated commandline: winget install -e --id dnGrep.dnGrep " -Title "dnGrep Help"
	Show-messageform_psf
	
}

$buttonMyModWontBuildButICa_Click={
	Set-PopupMessage -Message "Is workbench open -- maybe in the background? You cannot re-build if workbench is open because workbench locks the pbo." -Title "Build Help"
	Show-messageform_psf
	
}

$buttonBrowse_Click={
	$kommanderf = Get-KommanderFolder
	$indexpath = Add-Folder -source $kommanderf -folder "doxy\html\"
	$folderbrowserdialog1.SelectedPath = Read-GlobalParam -key "CurrentModFolder"
	if($openfiledialog2.ShowDialog() -eq 'OK')
	{
		
		$textboxIndexPath.Text = $openfiledialog2.FileName
		Write-GlobalParam -key "indexhtmlpath" -value $textboxdnGrepPath.Text
		
	}
}

$labelFileLocationOfIndexh_Click={
	#TODO: Place custom script here
	
}

$button6_Click={
	Set-PopupMessage -Message "This is the location of the index.html for the documentation. It is intended to be located within the kommander folder at ..\Kommander\Doxy\Html\index.html."
	Show-messageform_psf
	
}

$button7_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "This is the location of the dngrep.exe.  After installation, it will be located in: C:\\Program Files\\dnGrep\\dnGREP.exe."
	Show-messageform_psf
}

$buttonHelpInputsFolder_Click={
	Set-PopupMessage -Message "This is the location of inputs.xml.  This file defines your mods keybinds. In Kommander's template it will be in \scripts\data. If you are using another template you may need to do a search for the file name will will alway be inputs.xml. "
	Show-messageform_psf
	
}

$textboxComment_TextChanged={
	#TODO: Place custom script here
	
}



$contextmenustrip1_Opening=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$contextmenustrip1_ItemClicked=[System.Windows.Forms.ToolStripItemClickedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.ToolStripItemClickedEventArgs]
	#TODO: Place custom script here
	$modname = $listSelectMod.Items.Item($listSelectMod.SelectedIndex)
	$cmf = Read-GlobalParam -key "CurrentModFolder"
	Start-Archive -Comment "archive prior to deletion"
	Remove-Item -Path $cmf -recurse
	Update-Wizard
}

$buttonMyModDoesntShowUpInS_Click={
	Set-PopupMessage -Message "This can occur if your packed mod is not linked properly.  First, make sure that you have built the mod at least once by checking in your packed mod folder to see if the *pbo* is there. Second, make make sure that there is a link to the packed mod folder to P:\."
	Show-messageform_psf
	
}

$buttonImWorkingOnANewModIn_Click={
	Set-PopupMessage -Message "You must exit and restart WB each time you change mods so that it can load the appropriate pbo. Check the build logs. Both Tools and Mikero build the pbo in a temp location. The final step is to copy it to your pbo folder.  If it builds but fails to copy its probably because sometimes holds on even after termination so you may need to reboot to be sure that this isn't the issue."
	Show-messageform_psf
	
}

$buttonWhyArentMyEditsHotLo_Click={
	Set-PopupMessage -Message "If hotloading is working generally but certain edits aren't hotloading, consider the following:`n`n1. Changes to method signature do not hot load. Try setting a break point if you are not sure if a hot load took. If the breakpoint has an ! in it you will need to close the game and compile with F7.`n`n2. Changes won't hot load if there are errors, which there maybe even though recompiling on host reports succes."
	Show-messageform_psf
	
}

$checkboxUseBatch_CheckedChanged={
	Write-GlobalParam -key "UseBatch" -value $checkboxUseBatch.Checked
	
}

$labeladdedToArchiveName_Click={
	#TODO: Place custom script here
	
}

$numericupdownArchiveTimer_ValueChanged= {
	
	Write-GlobalParam -key "ArchiveTimer" -value $numericupdownArchiveTimer.Value
}

$ArchiveTimer_Tick={
	#Use Get-Date for Time Accuracy
	[TimeSpan]$span =  $script:StartTime - (Get-Date)
	
	
	
	
	$labelArchiveTimer.Text =  "{0:N0}" -f $span.TotalSeconds
	
	if ($span.TotalSeconds -le 0)
	{
		$ArchiveTimer.Stop()
		Start-Archive -Comment "TimedArchive"
		Start-ArchiveTimer
	}
	
}

function Start-ArchiveTimer
{
	[CmdletBinding()]
	param
	(
		$Duration
	)
	
	$TotalTimeStr = Read-GlobalParam -key "ArchiveTimer"
	$TotalTime = [int]$TotalTimeStr
	$TotalTime = $TotalTime * 60 # must be in seconds
	
	if ($TotalTime -gt 0)  # 0 in minutes means don't autosave
	{
		
		$script:StartTime = (Get-Date).AddSeconds($TotalTime)
		#Start the timer
		$ArchiveTimer.Start()
		
	}


	
	
}


$labelTimeUntilNextArchive_Click={
	#TODO: Place custom script here
	
}

$buttonStop_Click={
	$ArchiveTimer.Stop()
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">11</Line>
    <Line Disabled="True">70</Line>
    <Line Disabled="True">123</Line>
    <Line Disabled="True">252</Line>
    <Line Disabled="True">530</Line>
    <Line Disabled="False">633</Line>
    <Line Disabled="False">1084</Line>
    <Line Disabled="False">1114</Line>
    <Line Disabled="False">1165</Line>
    <Line Disabled="True">1260</Line>
    <Line Disabled="True">1309</Line>
    <Line Disabled="True">1326</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>0</Mode>
  <Assemblies />
</File>