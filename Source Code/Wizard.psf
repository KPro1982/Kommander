<File version="3.2">
  <FileID>fb15099b-6511-42ea-a001-83430d32c4ab</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAIIcSURBVHhe7Z0HWBzJmf7Xd/e/4Dv7fOezfcln
n+1zXq9315uzwq5yzjnnnHPOOeccAUmAyBmGAQaGDAIUiQIBAiEQSULw/utrGAmh2V2tgJWGft/n
+T0z011dXd1dXd9b1WFeoSiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiK
oiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiK
oiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiK
oiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiK
oiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiK
oiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiKoiiK0p2O/fVf
/ZX5V7/8pXnq1Gnm+fMXmufOnU8IIYQQm2GBeeHCRebOHTuY/+5v/9asYrvw1fqrv/qrpHbt2uHQ
8bOIuJSGy5l3kJxeQAghhBAbISWjUFGAwLBoTJ8+Hf/yLz9AXZj/cv3yFz83Hzx6GrGpBQiKS4N/
9DUEEEIIIcSmkPgdnnILEXFX0bVr1683AFMnTzNHJKYhOD4dhtgbhBBCCLFRgmKuI0516E+etv96
A7BwwSLzjZwSBMamwhBHCCGE2C7BTYit5SkEKROQmFEE+3MXv94ALJi/wHw9+65aMA3GeEIIIcQ2
CU1MR9ilTEVGowlVSJ4hCekqX/W7iWjacmY+ytOCGIJLygCctXf8egMwXwxATrF2CUA2lBBCCLE1
JGD7RVzB6YshOOEYjJNOxudDLXvC0QCXgFgtyAZEXsEFnzBc8ArBBe/nRJZVeIbE1ZYz/DJOOzdF
OYPhFhSvmQDLfhATkJR599kNwA1lAIwJ1t0KIYQQ8rJjSs7SAqJXcDwM0VcRpAL382KMuYaTF4Lg
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
AIJUGHkphZ7RWyDgMb/H6/4tDNbpxrdj91T8qCov0TUPykqavedv4aUwAIQQQgj5dqEBIIQQQnQI
DQAhhBCiQ2gACCGEEB1CA0AIIYToEBoAQgghRIfQABBCCCE6hAaAEEII0SFNagAKlQEoKanNlBBC
CCEvLxKvm8wA3FAZSWaEEEIIefm5kl0b/BttAJKVixAnQQghhJCXn0fx+3kMQLIyABb3QAghhBDb
I0mR/awGYP78BVHlNUDOPYVaiBBCCCG2iQT/cgBOLh5fbwBGjhwV53jRHXYOTppjIIQQQojt4uTi
jlWr1369AaAoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIo
iqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoiqIoimpBeuWV/w+k4mbCIRWI
KAAAAABJRU5ErkJggg==</Preview>
  <Form>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
AAA=</Form>
  <Code><![CDATA[
#-------------------------------------------------------
# NOTE: When new TabPage added place the validation code
# 		in the Test-WizardPage function.
#-------------------------------------------------------
function Test-WizardPage
{
<#
	Add TabPages and place the validation code in this function
#>
	[OutputType([boolean])]
	param([System.Windows.Forms.TabPage]$tabPage)
	
	if($tabPage -eq $tabSelectMod)
	{
		#TODO: Enter Validation Code here for Step 1
		if($lblModName.Text)
		{
			return $true 
		}
		
		return $false
	}
	elseif ($tabPage -eq $tabLaunch)
	{
		#TODO: Enter Validation Code here for Step 2

		
		
		if ($lblModName.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabAddons)
	{
		#TODO: Enter Validation Code here for Step 3

			return $true
		
	}
	elseif ($tabPage -eq $tabModSettings)
	{
		Initialize-ModSettingsTab
		if ($txtScriptsFolder.Text)
		{
			return $true
		}
		
		return $false
		
	}
	elseif ($tabPage -eq $tabtools)
	{
		
		
		return $true
		
		
	}($tabPage -eq $tabhelp)
	{
		
		
		return $true
		
		
	}
	elseif ($tabPage -eq $tabkodesearch)
	{
		
		
		return $true
		
		
	}
	#Add more pages here
	
	return $false
}



$buttonFinish_Click={
	#-------------------------------------------------------
	# TODO: Place finalization script here
	#-------------------------------------------------------
	
}

#region Events and Functions
$frmWizard_Load={
	Update-NavButtons
	Update-Wizard
	
	$buttonCreateUIFromLayout.Enabled = $true
	if(Read-GlobalParam -key "EnableToolStrip")
	{
		$script:initilizing = $true
		$enabletoolstrip = Read-GlobalParam -key "EnableToolStrip"
		if ($enabletoolstrip -eq $true)
		{
			$checkboxEnableToolStrip.Checked = $true
		}
		else
		{
			$checkboxEnableToolStrip.Checked = $false
		}
		
		$script:initilizing = $false
	}
	
	$script:initilizing = $true
	$autoarchive = Read-GlobalParam -key "Auto-Archive"
	if ($autoarchive -eq $true)
	{
		$checkboxAutoArchive.Checked = $true
	}
	else
	{
		$checkboxAutoArchive.Checked = $false
	}
	$script:initilizing = $false
	$greppath = Read-GlobalParam -key "dngreppath"
	if ($greppath)
	{
		$textboxdnGrepPath.Text = $greppath
	}
	$indexpath = Read-GlobalParam -key "indexhtmlpath"
	if ($indexpath)
	{
		$textboxIndexPath.Text = $indexpath
	}
	
	$textboxComment.Text = ""
	
}

function Update-NavButtons
{
	<# 
		.DESCRIPTION
		Validates the current tab and Updates the Next, Prev and Finish buttons.
	#>
	$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
	$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
	$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
	#Uncomment to Hide Buttons
	#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
}

$script:DeselectedIndex = -1
$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# Store the previous tab index
	$script:DeselectedIndex = $_.TabPageIndex
}

$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
	# We only validate if we are moving to the Next TabPage. 
	# Users can move back without validating
	if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
	{
		#Validate each page until we reach the one we want
		for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
		{
			$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
			
			if($_.Cancel) 
			{
				# Cancel and Return if validation failed.
				return;
			}
		}
	}
	

	
	Update-NavButtons
}

function Initialize-ModSettingsTab
{
	[CmdletBinding()]
	param ()
	
	$layoutf = ""
	Assert-ModLayoutFolder -outpath ([ref]$layoutf)
	if ($layoutf)
	{
		$textLayoutFolder.Text = $layoutf
		Write-ModParam -key "LayoutFolder" -value $layoutf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		$textLayoutFolder.Text = $modfolder
	}
	
	$inputsf = ""
	Assert-ModInputsFolder -outpath ([ref]$inputsf)
	if ($inputsf)
	{
		$textInputsFolder.Text = $inputsf
		Write-ModParam -key "InputsFolder" -value $inputsf
	}
	else
	{
		$modfolder = Read-GlobalParam -key "CurrentModFolder"
		
	}
}


$buttonBack_Click={
	#Go to the previous tab page
	if($tabcontrolWizard.SelectedIndex -gt 0)
	{
		$tabcontrolWizard.SelectedIndex--
	}
}

$buttonNext_Click={	
	#Go to the next tab page
	if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
	{
		$tabcontrolWizard.SelectedIndex++
	}
}

#endregion

#------------------------------------------------------
# NOTE: When a Control State changes you should call
# 		Update-NavButtons to trigger validation
#------------------------------------------------------

$textboxName_TextChanged={
	Update-NavButtons
}




$tabSelectMod_Click={
	
	
}

$btnLaunch_Click={
	
	Start-kServer
	Start-Sleep -Seconds 5
	Start-kMPGame
}

$btnKill_Click={
	
	Stop-kDayz
}

$buttonSelectAdditionalMods_Click={
	
	$FolderBrowser = New-Object System.Windows.Forms.FolderBrowserDialog;
	$FolderBrowser.RootFolder = "Desktop";
	
	$Results = $FolderBrowser.ShowDialog();
	
	if ($Results -eq "OK")
	{
		$location = $FolderBrowser.SelectedPath.ToString();
		$txtAdditionalMods.Text = $location;
		Update-NavButtons
	}
}

$buttonBrowseFolder_Click={
	if($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
	}
}

$buttonBrowseFolder_Click2={
	if($folderbrowsermoderndialog1.ShowDialog() -eq 'OK')
	{
		$txtScriptsFolder.Text = $folderbrowsermoderndialog1.SelectedPath
	}
}

$btnSettings_Click={
	
	Show-GlobalSettings_psf
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$listSelectAdditionalMods_SelectedIndexChanged={
	
	$selectedmod = $listSelectAdditionalMods.Items.Item($listSelectAdditionalMods.SelectedIndex)
	Update-ListBox $listAdditionalMods  $selectedmod -Append
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
	
}

function Initialize-Listbox
{
	[CmdletBinding()]
	param ()
	
	#TODO: Place script here
	$mods = Read-ModParam -key "AdditionalMPMods"
	
	# clear list box
	$listAdditionalMods.Items.Clear()
	
	if ($mods)
	{
		$modlist = $Mods.Split(';')
		
		foreach ($mod in $modlist)
		{
			Update-ListBox $listAdditionalMods  $mod -Append
		}
		
	}
	
}



function Convert-ListboxCollection
{
	[CmdletBinding()]
	[OutputType([string])]
	param ()
	
	$addonresult = ""
	#TODO: Place script here
	foreach ($mod in $listAdditionalMods.Items)
	{
		$addonresult = $addonresult +  $mod + ';'
		
	}
	if ($addonresult)
	{
		$addonresult = $addonresult.TrimEnd(';')
	}
	Else
	{
		$addonresult = ""
	}
	
	return $addonresult
}



$listAdditionalMods_Click={
	
	$selindex = $listAdditionalMods.SelectedIndex
	$item = $listAdditionalMods.Items.Item($selindex)
	$listAdditionalMods.Items.Remove($item)
	$mods = Convert-ListboxCollection
	Write-ModParam -key "AdditionalMPMods" -value $mods
}

$buttonLaunchWorkbench_Click={
	
	Start-kWorkbench
}

$btnLaunchServerGame_Click={
	
Use-Launch
	
}




$listSelectMod_SelectedIndexChanged= {
	
	$modname = $listSelectMod.Items.Item($listSelectMod.SelectedIndex)
	$lblModName.Text = $modname
	$curmodfolder = Read-GlobalParam -key "ModSourceFolder"
	$curmodfolder = Add-Folder -Source $curmodfolder -Folder $modname
	Write-GlobalParam -key "CurrentModFolder" -value $curmodfolder
	Write-ModParam -key "ModName" -value $modname
	
	# initialize elements that require a modname
	Initialize-Listbox
	
	
	$modscriptsfolder = Read-ModParam -key "ScriptsFolder"
	if (-not $modscriptsfolder)
	{
		if (Assert-ModScriptsFolder -outpath ([ref]$modscriptsfolder))
		{
			$txtScriptsFolder.Text = $modscriptsfolder
			Write-ModParam -key "ScriptsFolder" -value $modscriptsfolder
		}
	}
	else
	{
		$txtScriptsFolder.Text = $modscriptsfolder
	}
	
	$autoarchive = Read-GlobalParam -key "Auto-Archive"
	if ($autoarchive -eq $true)
	{
		Start-Archive
		
	}
	

	
	Update-NavButtons
}


$btnLinkMods_Click={
	
	Link-Scripts
	Link-Source
	Link-Packed
	Link-Workbench
}
<#
	.SYNOPSIS
		Set folder to folder define in settings
	
	.DESCRIPTION
		A detailed description of the Set-Folder function.
	
	.PARAMETER folder
		A description of the folder parameter.
	
	.EXAMPLE
				PS C:\> Set-Folder -folder 'Value1'
	
	.NOTES
		Additional information about the function.
#>



$buttonBuild_Click={
	
	
	Use-Build
	
}





$btnWorkbenchCommandline_Click = {
	$wbcommandline = Start-kWorkbench -Commandline
	Set-PopupMessage -Message $wbcommandline -Title "Workbench Commandline"
	Show-messageform_psf
}

$btnBuildCommandLine_Click = {
	
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	$buildm = ""
	if ($buildmethod -eq "Tools")
	{
		$buildm = Start-BuildAddonBuilder -Commandline
	}
	elseif ($buildmethod -eq "Mikero")
	{
		$buildm = Start-BuildMikero -Commandline
	}
	
	Set-PopupMessage -Message "$buildm" -Title "Build Commandline"
	Show-messageform_psf
}


$btnServerCommandline_Click={
	
	$newline = "`n"
	$servergamecommandline = "SERVER`n" + (Start-kServer -CommandLine)
	$servergamecommandline += "`n`n"
	$servergamecommandline += "GAME`n" + (Start-kMPGame -CommandLine)
	Set-PopupMessage -Message $servergamecommandline -Title "Server + Build Commandlines"
	Show-messageform_psf
}

$buttonBuildSettings_Click={
	
	Show-BuildSettings_psf
}

$btnScriptsFolder_Click = {
	$folderbrowserdialog1.SelectedPath = Read-GlobalParam -key "CurrentModFolder"

	$testpath = ""

	if ($folderbrowserdialog1.ShowDialog() -eq 'OK')
	{
		
		Write-ModParam -key "ScriptsFolder" -value $folderbrowserdialog1.SelectedPath
		$txtScriptsFolder.Text = $folderbrowserdialog1.SelectedPath
		Update-NavButtons
	}
	
	
}
$txtScriptsFolder_TextChanged = {
	
	Write-ModParam -key "ScriptsFolder" -value $txtScriptsFolder.Text

}


$lblModName_Click={
	
	
}



$buttonSetupWizard_Click={
	
	Show-SetupWizard_psf
}

$labelPboname_Click={
	
	
}

$textpboname_TextChanged={
	
	Write-ModParam -key "PboName" -value $textpboname.Text
	
}

$listAdditionalMods_SelectedIndexChanged={
	
	
}

$buttonHelpScriptsFolder_Click={
	
	Set-PopupMessage -Message "This is the subfolder that contains your mods scripts. It is generally just called scripts. Kommander will autofill this field if you use the standard setup" -Title "Help"
	Show-messageform_psf
}

$buttonlinkmods_Click={
	
	Set-PopupMessage -Message "If Kommander is running as administrator, this will link your mods. Otherwise you can use the provided linkall bat file" -Title "Help"
	Show-messageform_psf
}

$buttonkillall_Click={
	
	Set-PopupMessage -Message "Kill all running instances of dayz. " -Title "Help"
	Show-messageform_psf
}

$buttonhelpadditionmods_Click={
	
	Set-PopupMessage -Message "Select the mods that you want to load with your mod.  Click on left panel to select a mod. Click on right panel to deselect a mod`n'link to workbench' will add a symbolic link to dayz\addons." -Title "Help"
	Show-messageform_psf
}


$buttonMountPDrive_Click={
	
	Mount-Pdrive
}

$buttonLinkToDayzAddons_Click={
	
	Link-Addons
}



$btnCreateNewMod_Click={
	
	Show-CreateMod_psf
	Update-NavButtons
	Update-Wizard
	
}

$tabSelectMod_Enter={
	
	Update-Wizard
}

function Update-Wizard
{
	[CmdletBinding()]
	param ()
	
	$workshop = Read-GlobalParam -key GameFolder
	$workshop += "\!Workshop"
	$modsource = Read-GlobalParam -key ModSourceFolder
	Update-ListBox $listSelectAdditionalMods (Get-ChildItem -Path "$workshop" -Directory)
	Update-ListBox $listSelectMod (Get-ChildItem -Path "$modsource" -Directory)

	$buildmethod = Read-GlobalParam -key "BuildMethod"
	if ($buildmethod -eq "Mikero")
	{
		$labelPboname.Visible = $true
		$textpboname.Visible = $true
	}
	Reset-BuildSuccess
	
}




$buttonBrowse2_Click={

	if($openfiledialog2.ShowDialog() -eq 'OK')
	{
		$textboxdnGrepPath.Text = $openfiledialog2.FileName
	}
}

$formSplashScreen_Load = {
	<#
	Use the -PassTru parameter to update the splash screen text:
	.EXAMPLE
	$splashForm = Show-SplashScreen ... -PassThru
	#Update the splash screen text
	$splashForm.Text = 'Loading Modules...'
	#>
	
	$paramShowSplashScreen = @{
		Image = $pictureboxSplashScreenHidden.Image
		Title = 'Loading...'
		PassThru = $false
	}
	
	Show-SplashScreen @paramShowSplashScreen
	
	#TODO: Place initialization script here:
	
}
#Append the event to the form
#  $frmWizard.add_Load($formSplashScreen_Load)


#region Splash Screen Helper Function
function Show-SplashScreen
{
	<#
	.SYNOPSIS
		Displays a splash screen using the specified image.
	
	.PARAMETER Image
		Mandatory Image object that is displayed in the splash screen.
	
	.PARAMETER Title
		(Optional) Sets a title for the splash screen window. 
	
	.PARAMETER Timeout
		The amount of seconds before the splash screen is closed.
		Set to 0 to leave the splash screen open indefinitely.
		Default: 2
	
	.PARAMETER ImageLocation
		The file path or url to the image.

	.PARAMETER PassThru
		Returns the splash screen form control. Use to manually close the form.
	
	.PARAMETER Modal
		The splash screen will hold up the pipeline until it closes.

	.EXAMPLE
		PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
				#close the splash screen
				$splashScreen.Close()
	.OUTPUTS
		System.Windows.Forms.Form
	
	.NOTES
		Created by SAPIEN Technologies, Inc.

		The size of the splash screen is dependent on the image.
		The required assemblies to use this function outside of a WinForms script:
		Add-Type -AssemblyName System.Windows.Forms
		Add-Type -AssemblyName System.Drawing
#>
	[OutputType([System.Windows.Forms.Form])]
	param
	(
		[Parameter(ParameterSetName = 'Image',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNull()]
		[System.Drawing.Image]$Image,
		[Parameter(Mandatory = $false)]
		[string]$Title,
		[int]$Timeout = 1,
		[Parameter(ParameterSetName = 'ImageLocation',
				   Mandatory = $true,
				   Position = 1)]
		[ValidateNotNullOrEmpty()]
		[string]$ImageLocation,
		[switch]$PassThru,
		[switch]$Modal
	)
	
	#Create a splash screen form to display the image.
	$splashForm = New-Object System.Windows.Forms.Form
	
	#Create a picture box for the image
	$pict = New-Object System.Windows.Forms.PictureBox
	
	if ($Image)
	{
		$pict.Image = $Image;
	}
	else
	{
		$pict.Load($ImageLocation)
	}
	
	$pict.AutoSize = $true
	$pict.Dock = 'Fill'
	$splashForm.Controls.Add($pict)
	
	#Display a title if defined.
	if ($Title)
	{
		$splashForm.Text = $Title
		$splashForm.FormBorderStyle = 'FixedDialog'
	}
	else
	{
		$splashForm.FormBorderStyle = 'None'
	}
	
	#Set a timer
	if ($Timeout -gt 0)
	{
		$timer = New-Object System.Windows.Forms.Timer
		$timer.Interval = $Timeout * 1000
		$timer.Tag = $splashForm
		$timer.add_Tick({
				$this.Tag.Close();
				$this.Stop()
			})
		$timer.Start()
	}
	
	#Show the form
	$splashForm.AutoSize = $true
	$splashForm.AutoSizeMode = 'GrowAndShrink'
	$splashForm.ControlBox = $false
	$splashForm.StartPosition = 'CenterScreen'
	$splashForm.TopMost = $true
	
	if ($Modal) { $splashForm.ShowDialog() }
	else { $splashForm.Show() }
	
	if ($PassThru)
	{
		return $splashForm
	}
}
#endregion

$frmWizard_MouseMove=[System.Windows.Forms.MouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
	

}

$frmWizard_Enter={
	

}

$frmWizard_MouseEnter={
	

}

$listSelectMod_MouseEnter={
	

}



$buttonHelpCleanUpLinks_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "This tool removes all kinks in P:\ and the Dayz game folder"
	Show-messageform_psf
}

$buttonCleanUpLinks_Click={
	#TODO: Place custom script here
	Remove-AllLinks
}

$buttonOpenBuildLog_Click = {
	$buildmethod = Read-GlobalParam -key "BuildMethod"
	
	if ($buildmethod -eq "Tools")
	{
		$logfolder = Read-GlobalParam -key "CurrentModFolder"
		$filepath = Add-Folder -Source $logfolder "Kommander\Buildoutput.txt"
	}
	elseif ($buildmethod -eq "Mikero")
	{
		$mikerologfoler = ""
		Assert-MikeroLogFolder -outpath ([ref] $mikerologfoler)
		$filepath = Add-Folder -Source $mikerologfoler -Folder "Scripts.packing.log"
	}
	
	
	Request-Log -FilePath $filepath -InitialDirectory $logfolder 
	
}

$buttonLaunchLogs_Click = {
	
	$profilef = Read-GlobalParam -key "ProfilesFolder"
	Request-Log -Folder $profilef -InitialDirectory $profilef -Filter "All Files (*.*)|*.*|RPT (*.RPT)|*.rpt|Log (*.log)|*.log" -MostRecent 
}

$buttonHotLoading_Click={
	
	Set-PopupMessage -Message "If hotloading does not work. Try Tools->Clean Links.  Launch->Link All"
	Show-messageform_psf
	
}

$buttonConvertExistingMod_Click={
	
	# Copy Kommander folder
	$templatef = Read-GlobalParam -key "TemplateFolder"
	$templateKommanderf = Add-Folder -Source $templatef -Folder "Kommander\*"
	
	$modfolder = Read-GlobalParam -key "CurrentModFolder"
	$kommanderf = Add-Folder -Source $modfolder -Folder "Kommander"
	
	if (-not (Test-Path -Path $kommanderf))
	{
		New-Item -Path $kommanderf -ItemType "Directory"			
	}
	Copy-Item -Path $templateKommanderf -Destination $kommanderf -Recurse
	
	# Edit dayz.proj to refer to modname instead of templatemod
	$ModName = Read-ModParam -key "ModName"
	Edit-TemplateTokens -Source "TemplateMod" -Replace $ModName -Folder $kommanderf -File "dayz.gproj"
	
	# Copy batch files from template to modfolder
	$templatef = Add-Folder -Source $templatef -Folder "*.bat"
	
	Copy-Item -Path $templatef -Destination $modfolder
	Edit-BatchFiles -Modfolder $modfolder -Modname $ModName
	
	
}

$buttonHelpFolderSettings_Click={
	Set-PopupMessage -Message "Convert Mod `n`n (1) Creates Kommander folder; `n (2) Copies and customizes batch folders `n (3) Copies integrated tools `n `nUsage: Copy your modfolder into the modsource folder that you slected in folder settings. Click on it in left panel. Click on Convert Mod. Your mod should now work with Kommander." -Title "Help"
	Show-messageform_psf
	
}

$buttonCreateUIFromLayout_Click={
	
	Show-CreateUI_psf
	
}

$buttonLayoutFolder_Click3={
	if($folderbrowserdialog2.ShowDialog() -eq 'OK')
	{
		$textLayoutFolder.Text = $folderbrowserdialog2.SelectedPath
		Write-ModParam -key "LayoutFolder" -value $folderbrowserdialog2.SelectedPath
	}
}

$buttonInputsFolder_Click3 = {
	$folderbrowserdialog3.SelectedPath = Read-GlobalParam -key "CurrentModFolder"
	if($folderbrowserdialog3.ShowDialog() -eq 'OK')
	{
		$textInputsFolder.Text = $folderbrowserdialog3.SelectedPath
	}
	Write-ModParam -key "InputsFolder" -value $textInputsFolder.Text
}

$buttonHelpCreateUI_Click={
	Set-PopupMessage -Message "This tool will create the code necessary to implement a layout. The code is contained in separate subfolders named UIHelper. `n`nThe tool will also create the necessary code to show the dialog.  However, at present, the tool cannot inject itself into an existing input.xml.  If you don't already have an inputs.xml, then it shouldn't be a problem. The  tool will create one with the O key as default key to bring up your dialog.  But if the tool finds an existing inputs.xml, it will copy the required code in a uiinputs.xml file. Its up to you to integrate the two files. Automating this is on my todo list. `n `n If the key doesn't bring up the dialog, also check to make sure that the config.cpp contains the appropriate reference to the inputs.xml"
	Show-messageform_psf
	
}






$buttonCopyMissionAndConfig_Click={
	$kommanderf = Get-KommanderFolder
	$serveraddins = Add-Folder -Source $kommanderf -Folder "Source Code\Dayz_Folder_Adds\*"
	$gamef = Read-GlobalParam -key "GameFolder"
	Copy-Item -Path $serveraddins -Destination $gamef
}

$buttonHelpCopyMission_Click={
	Set-PopupMessage -Message "In order to run the dayZdiag_x64.exe as the server in the Dayz folder, you must have a copy of the mission and serverDZ.cfg files in the game folder.  If you do not have them, this tool will copy them for you."
	Show-messageform_psf
	
}

$frmWizard_Resize={
	#TODO: Place custom script here

	if ($frmWizard.Size.Height -le 50) # minimized
	{


		# return to previous state

	}
	else
	{
		
	}
	
}

$checkboxEnableToolStrip_CheckedChanged={
	if (-not $script:initilizing)
	{		
		Write-GlobalParam -key "EnableToolStrip" -value $checkboxEnableToolStrip.Checked
	}

}



$buttonHelpMountP_Click={
	Set-PopupMessage -Message "Uses Dayz Tools Command Line to Mount P:"
	Show-messageform_psf
	
}



$buttonBinLogs_Click = {
	$logfolder = Read-SteamCommon
	$logfolder = Add-Folder -Source $logfolder -Folder "DayZ Tools\Bin\Logs"
	
	Request-Log -Folder $logfolder -InitialDirectory $logfolder -Filter "All Files (*.*)|*.*" -MostRecent
	
}
$buttonWorkbenchLog_Click={
	$logfolder = Read-SteamCommon
	$logfolder = Add-Folder -Source $logfolder -Folder "DayZ Tools\Bin\Logs\Workbench"
	Request-Log -Folder $logfolder -InitialDirectory $logfolder -Filter "All Files (*.*)|*.*" -MostRecent
	
}


$buttonCreateFile_Click={
	#TODO: Place custom script here
	Show-CreateNewFIle_psf
	
}


$buttonToolMode_Click={
	#TODO: Place custom script here
	# minimize form
	$winstate = $frmWizard.WindowState
	$frmWizard.WindowState = 'Minimized'
	Show-KommandStrip_psf
	# return to previous state
	$frmWizard.WindowState = $winstate
}

$buttonArchiveNow_Click={
	
	start-archive -Comment $textboxComment.Text
	$textboxComment.Text = ""
}

$checkboxAutoArchive_CheckedChanged={
	
	if (-not $script:initilizing)
	         
	{
		Write-GlobalParam -key "Auto-Archive" -value $checkboxAutoArchive.Checked
	}
	
	
}

$buttonKommander_Click = {
	
	$logfolder = Get-KommanderFolder
	$logfolder = Add-Folder -Source $logfolder -Folder "Logs"
	
	Request-Log -Folder $logfolder -InitialDirectory $logfolder -Filter "Log Files (*.txt)|*.txt" -MostRecent
	
}

$button1_Click={
	Set-PopupMessage -Message "Tool mode closes the main form and opens a floating toolbar in the upper right corner. This mode is easier to use in the script editor or in game.`n`nR - Reload Dayzgame only. It is slightly quicker to close the dayz only when you need to recompile in which case use the R option.`nL - Launch game AND server if you've terminated both server and game.`nK - Kill both server and game processes.`n`nClose the toolbar window to bring the main form back up." -Title "Help"
	Show-messageform_psf
	
}

$button2_Click={
	Set-PopupMessage -Message "Create a new mod from a modtemplate" -Title "Help"
	Show-messageform_psf
}

$button3_Click={
	Set-PopupMessage -Message "Set global folder locations" -Title "Help"
	Show-messageform_psf
	
}

$button4_Click={
	Set-PopupMessage -Message "This will link your dayz addons folder to workbench." -Title "Help"
	Show-messageform_psf
	
}

$buttonBrowseCodebase_Click={
	#TODO: Place custom script here
	$Kommanderf = Get-KommanderFolder
	$indexpath = Add-Folder -Source $Kommanderf -Folder "Doxy\html\index.html"
	Start-Process "$indexpath"
}

$buttonDnGrepCodebase_Click={
	Start-dnGrep
	
	
}

$buttonDnGrepPath_Click={
	
	$greppath = "C:\\Program Files\\dnGrep\\"
	if($openfiledialog1.ShowDialog() -eq 'OK')
	{
		$textboxdnGrepPath.Text = $openfiledialog1.FileName
		Write-GlobalParam -key "dngreppath" -value $textboxdnGrepPath.Text
		
	}
}

$textboxdnGrepPath_TextChanged={
	#TODO: Place custom script here
	
}

$openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$buttonHelpDnGrep_Click={
	Set-PopupMessage -Message "This tool will only work if you install dnGrep. dnGrep is a super useful tool to have on your computer as it makes searching for files very powerful. It can be installed from the git https://dngrep.github.io/ or by running the following winget command on an elevated commandline: winget install -e --id dnGrep.dnGrep " -Title "dnGrep Help"
	Show-messageform_psf
	
}

$button5_Click={
	Set-PopupMessage -Message "This tool uses the output from Doxygen which is an automated code documenter.  It is what Leroy uses for the online version.  Mine is essentially the same thing although I have tweeked the settings to provide more detail.  The current generation date is printed at the bottom of each page of documentation so you can tell if it is out of date.  If so you cane either check my repo to see if I have updated it or download doxygen to generate a current document set." -Title "Doxygen Help"
	Show-messageform_psf
	
}

$buttonBrowse_Click={
	$kommanderf = Get-KommanderFolder
	$indexpath = Add-Folder -source $kommanderf -folder "doxy\html\"
	$folderbrowserdialog1.SelectedPath = Read-GlobalParam -key "CurrentModFolder"
	if($openfiledialog2.ShowDialog() -eq 'OK')
	{
		
		$textboxIndexPath.Text = $openfiledialog2.FileName
		Write-GlobalParam -key "indexhtmlpath" -value $textboxdnGrepPath.Text
		
	}
}

$labelFileLocationOfIndexh_Click={
	#TODO: Place custom script here
	
}

$button6_Click={
	Set-PopupMessage -Message "This is the location of the index.html for the documentation. It is intended to be located within the kommander folder at ..\Kommander\Doxy\Html\index.html."
	Show-messageform_psf
	
}

$button7_Click={
	#TODO: Place custom script here
	Set-PopupMessage -Message "This is the location of the dngrep.exe.  After installation, it will be located in: C:\\Program Files\\dnGrep\\dnGREP.exe."
	Show-messageform_psf
}

$buttonHelpInputsFolder_Click={
	Set-PopupMessage -Message "This is the location of inputs.xml.  This file defines your mods keybinds. In Kommander's template it will be in \scripts\data. If you are using another template you may need to do a search for the file name will will alway be inputs.xml. "
	Show-messageform_psf
	
}

$textboxComment_TextChanged={
	#TODO: Place custom script here
	
}



$contextmenustrip1_Opening=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$contextmenustrip1_ItemClicked=[System.Windows.Forms.ToolStripItemClickedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.ToolStripItemClickedEventArgs]
	#TODO: Place custom script here
	$modname = $listSelectMod.Items.Item($listSelectMod.SelectedIndex)
	$cmf = Read-GlobalParam -key "CurrentModFolder"
	Start-Archive -Comment "archive prior to deletion"
	Remove-Item -Path $cmf -recurse
	Update-Wizard
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="True">11</Line>
    <Line Disabled="True">70</Line>
    <Line Disabled="True">123</Line>
    <Line Disabled="True">229</Line>
    <Line Disabled="True">505</Line>
    <Line Disabled="False">611</Line>
    <Line Disabled="False">1065</Line>
    <Line Disabled="False">1095</Line>
    <Line Disabled="False">1146</Line>
    <Line Disabled="True">1241</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies />
</File>