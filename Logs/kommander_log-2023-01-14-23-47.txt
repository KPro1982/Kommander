**********************
Windows PowerShell transcript start
Start time: 20230114234739
Username: Office\Daniel
RunAs User: Office\Daniel
Configuration Name: 
Machine: OFFICE (Microsoft Windows NT 10.0.22000.0)
Host Application: C:\Program Files\SAPIEN Technologies, Inc\PowerShell Studio 2022\Debugger64\scriptdriver64Elevated.exe -noprofile -V5 -p 64018 -d S:\Kommander\Source Code -e DebuggerSTA
Process ID: 23812
PSVersion: 5.1.22000.1335
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.22000.1335
BuildVersion: 10.0.22000.1335
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is S:\Kommander\Logs\kommander_log-2023-01-14-23-47.txt
DEBUG: 
		using System;
		using System.Windows.Forms;
		using System.Reflection;

        namespace SAPIENTypes
        {
		    public class FolderBrowserModernDialog : System.Windows.Forms.CommonDialog
            {
                private System.Windows.Forms.OpenFileDialog fileDialog;
                public FolderBrowserModernDialog()
                {
                    fileDialog = new System.Windows.Forms.OpenFileDialog();
                    fileDialog.Filter = "Folders|\n";
                    fileDialog.AddExtension = false;
                    fileDialog.CheckFileExists = false;
                    fileDialog.DereferenceLinks = true;
                    fileDialog.Multiselect = false;
                    fileDialog.Title = "Select a folder";
                }

                public string Title
                {
                    get { return fileDialog.Title; }
                    set { fileDialog.Title = value; }
                }

                public string InitialDirectory
                {
                    get { return fileDialog.InitialDirectory; }
                    set { fileDialog.InitialDirectory = value; }
                }
                
                public string SelectedPath
                {
                    get { return fileDialog.FileName; }
                    set { fileDialog.FileName = value; }
                }

                object InvokeMethod(Type type, object obj, string method, object[] parameters)
                {
                    MethodInfo methInfo = type.GetMethod(method, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    return methInfo.Invoke(obj, parameters);
                }

                bool ShowOriginalBrowserDialog(IntPtr hwndOwner)
                {
                    using(FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog())
                    {
                        folderBrowserDialog.Description = this.Title;
                        folderBrowserDialog.SelectedPath = !string.IsNullOrEmpty(this.SelectedPath) ? this.SelectedPath : this.InitialDirectory;
                        folderBrowserDialog.ShowNewFolderButton = false;
                        if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                        {
                            fileDialog.FileName = folderBrowserDialog.SelectedPath;
                            return true;
                        }
                        return false;
                    }
                }

                protected override bool RunDialog(IntPtr hwndOwner)
                {
                    if (Environment.OSVersion.Version.Major >= 6)
                    {      
                        try
                        {
                            bool flag = false;
                            System.Reflection.Assembly assembly = Assembly.Load("System.Windows.Forms, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = b77a5c561934e089");
                            Type typeIFileDialog = assembly.GetType("System.Windows.Forms.FileDialogNative").GetNestedType("IFileDialog", BindingFlags.NonPublic);
                            uint num = 0;
                            object dialog = InvokeMethod(fileDialog.GetType(), fileDialog, "CreateVistaDialog", null);
                            InvokeMethod(fileDialog.GetType(), fileDialog, "OnBeforeVistaDialog", new object[] { dialog });
                            uint options = (uint)InvokeMethod(typeof(System.Windows.Forms.FileDialog), fileDialog, "GetOptions", null) | (uint)0x20;
                            InvokeMethod(typeIFileDialog, dialog, "SetOptions", new object[] { options });
                            Type vistaDialogEventsType = assembly.GetType("System.Windows.Forms.FileDialog").GetNestedType("VistaDialogEvents", BindingFlags.NonPublic);
                            object pfde = Activator.CreateInstance(vistaDialogEventsType, fileDialog);
                            object[] parameters = new object[] { pfde, num };
                            InvokeMethod(typeIFileDialog, dialog, "Advise", parameters);
                            num = (uint)parameters[1];
                            try
                            {
                                int num2 = (int)InvokeMethod(typeIFileDialog, dialog, "Show", new object[] { hwndOwner });
                                flag = 0 == num2;
                            }
                            finally
                            {
                                InvokeMethod(typeIFileDialog, dialog, "Unadvise", new object[] { num });
                                GC.KeepAlive(pfde);
                            }
                            return flag;
                        }
                        catch
                        {
                            return ShowOriginalBrowserDialog(hwndOwner);
                        }
                    }
                    else
                        return ShowOriginalBrowserDialog(hwndOwner);
                }

                public override void Reset()
                {
                    fileDialog.Reset();
                }
            }
       }
The property 'Visible' cannot be found on this object. Verify that the property exists and can be set.
At S:\Kommander\Source Code\Kommander.Run.ps1:2784 char:4
+             $labelPboname.Visible = $true
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : PropertyNotFound
The property 'Visible' cannot be found on this object. Verify that the property exists and can be set.
At S:\Kommander\Source Code\Kommander.Run.ps1:2784 char:4
+             $labelPboname.Visible = $true
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : PropertyNotFound

The property 'Visible' cannot be found on this object. Verify that the property exists and can be set.
At S:\Kommander\Source Code\Kommander.Run.ps1:2785 char:4
+             $textpboname.Visible = $true
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : PropertyNotFound
The property 'Visible' cannot be found on this object. Verify that the property exists and can be set.
At S:\Kommander\Source Code\Kommander.Run.ps1:2785 char:4
+             $textpboname.Visible = $true
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : PropertyNotFound

The property 'BackColor' cannot be found on this object. Verify that the property exists and can be set.
At S:\Kommander\Source Code\Kommander.Run.ps1:784 char:3
+         $buttonB.BackColor = 'Transparent'
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : PropertyNotFound
The property 'BackColor' cannot be found on this object. Verify that the property exists and can be set.
At S:\Kommander\Source Code\Kommander.Run.ps1:784 char:3
+         $buttonB.BackColor = 'Transparent'
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : PropertyNotFound

Exception getting "Item": "InvalidArgument=Value of '-1' is not valid for 'index'.
Parameter name: index"
At S:\Kommander\Source Code\Kommander.Run.ps1:2559 char:3
+         $modname = $listSelectMod.Items.Item($listSelectMod.SelectedI ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], GetValueInvocationException
    + FullyQualifiedErrorId : ExceptionWhenGetting
Exception getting "Item": "InvalidArgument=Value of '-1' is not valid for 'index'.
Parameter name: index"
At S:\Kommander\Source Code\Kommander.Run.ps1:2559 char:3
+         $modname = $listSelectMod.Items.Item($listSelectMod.SelectedI ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], GetValueInvocationException
    + FullyQualifiedErrorId : ExceptionWhenGetting

**********************
Command start time: 20230114234741
**********************
PS>TerminatingError(Add-Folder): "Cannot bind argument to parameter 'Folder' because it is an empty string."
Add-Folder : Cannot bind argument to parameter 'Folder' because it is an empty string.
At S:\Kommander\Source Code\Kommander.Run.ps1:2562 char:60
+ ...     $curmodfolder = Add-Folder -Source $curmodfolder -Folder $modname
+                                                                  ~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Add-Folder], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationErrorEmptyStringNotAllowed,Add-Folder
Add-Folder : Cannot bind argument to parameter 'Folder' because it is an empty string.
At S:\Kommander\Source Code\Kommander.Run.ps1:2562 char:60
+ ...     $curmodfolder = Add-Folder -Source $curmodfolder -Folder $modname
+                                                                  ~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Add-Folder], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationErrorEmptyStringNotAllowed,Add-Folder

**********************
Command start time: 20230114234741
**********************
PS>TerminatingError(Add-Folder): "Cannot bind argument to parameter 'Folder' because it is an empty string."
Add-Folder : Cannot bind argument to parameter 'Folder' because it is an empty string.
At S:\Kommander\Source Code\Kommander.Run.ps1:1775 char:56
+ ...       $targetpath = Add-Folder -source $targetpath -Folder "$modname"
+                                                                ~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Add-Folder], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationErrorEmptyStringNotAllowed,Add-Folder
Add-Folder : Cannot bind argument to parameter 'Folder' because it is an empty string.
At S:\Kommander\Source Code\Kommander.Run.ps1:1775 char:56
+ ...       $targetpath = Add-Folder -source $targetpath -Folder "$modname"
+                                                                ~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Add-Folder], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationErrorEmptyStringNotAllowed,Add-Folder

**********************
Command start time: 20230114234741
**********************
PS>TerminatingError(Write-Progress): "Cannot access a disposed object.
Object name: 'ProgressBar'."
>> TerminatingError(Write-Progress): "Cannot access a disposed object.
Object name: 'ProgressBar'."
**********************
Command start time: 20230114234742
**********************
PS>TerminatingError(Write-Progress): "Cannot access a disposed object.
Object name: 'ProgressBar'."
>> TerminatingError(Write-Progress): "Cannot access a disposed object.
Object name: 'ProgressBar'."
>> TerminatingError(Write-Progress): "Cannot access a disposed object.
Object name: 'ProgressBar'."
Write-Progress : Cannot access a disposed object.
Object name: 'ProgressBar'.
At 
C:\Windows\system32\WindowsPowerShell\v1.0\Modules\Microsoft.PowerShell.Archive\Microsoft.PowerShell.Archive.psm1:1132 
char:9
+         Write-Progress -Activity $cmdletName -Status $status -Percent ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Write-Progress], ObjectDisposedException
    + FullyQualifiedErrorId : System.ObjectDisposedException,Microsoft.PowerShell.Commands.WriteProgressCommand
Write-Progress : Cannot access a disposed object.
Object name: 'ProgressBar'.
At C:\Windows\system32\WindowsPowerShell\v1.0\Modules\Microsoft.PowerShell.Archive\Microsoft.PowerShell.Archive.psm1:1132 char:9
+         Write-Progress -Activity $cmdletName -Status $status -Percent ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [Write-Progress], ObjectDisposedException
    + FullyQualifiedErrorId : System.ObjectDisposedException,Microsoft.PowerShell.Commands.WriteProgressCommand

